// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ShareTripSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Alamofire
import AppAuth
import AuthenticationServices
import CoreGraphics
import DeveloperToolsSupport
import FBSDKLoginKit
import FirebaseAnalytics
import FirebaseRemoteConfig
import FloatingPanel
import Foundation
import GoogleSignIn
import IQKeyboardManagerSwift
import JTAppleCalendar
import Kingfisher
import Lottie
import MessageUI
import PKHUD
import Photos
@_exported import ShareTripSDK
import StoreKit
import Swift
import SwiftKeychainWrapper
import SwiftUI
import SwiftyJSON
import SystemConfiguration
import UIKit
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public protocol ImageSlideshowDelegate {
  @objc optional func imageSlideshow(_ imageSlideshow: ShareTripSDK.ImageSlideshow, didChangeCurrentPageTo page: Swift.Int)
  @objc optional func imageSlideshowWillBeginDragging(_ imageSlideshow: ShareTripSDK.ImageSlideshow)
  @objc optional func imageSlideshowDidEndDecelerating(_ imageSlideshow: ShareTripSDK.ImageSlideshow)
}
public enum PageControlPosition {
  case hidden
  case insideScrollView
  case underScrollView
  case custom(padding: CoreFoundation.CGFloat)
}
public enum ImagePreload {
  case fixed(offset: Swift.Int)
  case all
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class ImageSlideshow : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) final public let scrollView: UIKit.UIScrollView
  @objc @available(*, deprecated, message: "Use pageIndicator.view instead")
  @_Concurrency.MainActor(unsafe) open var pageControl: UIKit.UIPageControl {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open var activityIndicator: (any ShareTripSDK.ActivityIndicatorFactory)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var pageIndicator: (any ShareTripSDK.PageIndicatorView)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var pageIndicatorPosition: ShareTripSDK.PageIndicatorPosition {
    get
    set
  }
  @available(*, deprecated, message: "Use pageIndicatorPosition instead")
  @_Concurrency.MainActor(unsafe) open var pageControlPosition: ShareTripSDK.PageControlPosition {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) open var currentPage: Swift.Int {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) weak open var delegate: (any ShareTripSDK.ImageSlideshowDelegate)?
  @objc @_Concurrency.MainActor(unsafe) open var currentPageChanged: ((_ page: Swift.Int) -> ())?
  @objc @_Concurrency.MainActor(unsafe) open var willBeginDragging: (() -> ())?
  @objc @_Concurrency.MainActor(unsafe) open var didEndDecelerating: (() -> ())?
  @objc @_Concurrency.MainActor(unsafe) open var currentSlideshowItem: ShareTripSDK.ImageSlideshowItem? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var scrollViewPage: Swift.Int {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var images: [any ShareTripSDK.InputSource] {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var slideshowItems: [ShareTripSDK.ImageSlideshowItem] {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var circular: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var draggingEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var zoomEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var maximumScale: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var slideshowInterval: Swift.Double {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var preload: ShareTripSDK.ImagePreload
  @objc @_Concurrency.MainActor(unsafe) open var contentScaleMode: ShareTripSDK.UIViewContentMode {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var slideshowTransitioningDelegate: ShareTripSDK.ZoomAnimatedTransitioningDelegate? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func removeFromSuperview()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) open func layoutPageControl()
  @objc @_Concurrency.MainActor(unsafe) open func setImageInputs(_ inputs: [any ShareTripSDK.InputSource])
  @objc @_Concurrency.MainActor(unsafe) open func setCurrentPage(_ newPage: Swift.Int, animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func setScrollViewPage(_ newScrollViewPage: Swift.Int, animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func pauseTimer()
  @objc @_Concurrency.MainActor(unsafe) open func unpauseTimer()
  @objc @available(*, deprecated, message: "use pauseTimer instead")
  @_Concurrency.MainActor(unsafe) open func pauseTimerIfNeeded()
  @objc @available(*, deprecated, message: "use unpauseTimer instead")
  @_Concurrency.MainActor(unsafe) open func unpauseTimerIfNeeded()
  @objc @_Concurrency.MainActor(unsafe) open func nextPage(animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func previousPage(animated: Swift.Bool)
  @objc @discardableResult
  @_Concurrency.MainActor(unsafe) open func presentFullScreenController(from controller: UIKit.UIViewController) -> ShareTripSDK.FullScreenSlideshowViewController
  @objc deinit
}
extension ShareTripSDK.ImageSlideshow : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndScrollingAnimation(_ scrollView: UIKit.UIScrollView)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class LeftRightInfoHeaderView : UIKit.UITableViewHeaderFooterView {
  @_Concurrency.MainActor(unsafe) public var labelContainerView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var leftLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var rightLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var bottomAnchorLC: UIKit.NSLayoutConstraint!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func setText(left: Swift.String, right: Swift.String?)
  @objc deinit
}
public struct InputTextSelectionCellData : ShareTripSDK.ConfigurableTableViewCellData {
  public let title: Swift.String
  public let text: Swift.String
  public let placeholder: Swift.String
  public let imageString: Swift.String
  public let pickerData: [Swift.String]
  public let selectedRow: Swift.Int?
  public var state: ShareTripSDK.ValidationState
  public init(title: Swift.String, text: Swift.String, placeholder: Swift.String, imageString: Swift.String, pickerData: [Swift.String], selectedRow: Swift.Int?, state: ShareTripSDK.ValidationState)
  public init(title: Swift.String, text: Swift.String, placeholder: Swift.String, imageString: Swift.String, pickerData: [Swift.String], selectedRow: Swift.Int?)
}
public protocol InputTextValidator : AnyObject {
  func validate(text: Swift.String?) -> Swift.Result<Swift.Void, ShareTripSDK.AppError>
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class InputTextFieldCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public var didChangeText: (Swift.String?) -> Swift.Void
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func validateOnInputEnd(with validator: any ShareTripSDK.InputTextValidator)
  @objc deinit
}
extension ShareTripSDK.InputTextFieldCell : ShareTripSDK.ConfigurableTableViewCellDataContainer {
  public typealias AccecptableViewModelType = ShareTripSDK.InputTextFieldCellData
}
extension ShareTripSDK.InputTextFieldCell : ShareTripSDK.ConfigurableTableViewCell {
  @_Concurrency.MainActor(unsafe) public func configure(viewModel: any ShareTripSDK.ConfigurableTableViewCellData)
}
extension ShareTripSDK.InputTextFieldCell : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ErrorView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var buttonCallback: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, imageName: Swift.String?, title: Swift.String, message: Swift.String, imageViewHeight: CoreFoundation.CGFloat = 256.0, imageViewWidth: CoreFoundation.CGFloat = 256.0, buttonTitle: Swift.String?, isBackgroundColorWhite: Swift.Bool = true)
  @objc deinit
}
public enum StarFillMode : Swift.Int {
  case full
  case half
  case precise
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct CosmosSettings {
  public static var `default`: ShareTripSDK.CosmosSettings {
    get
  }
  public init()
  public var emptyBorderColor: UIKit.UIColor
  public var emptyBorderWidth: Swift.Double
  public var filledBorderColor: UIKit.UIColor
  public var filledBorderWidth: Swift.Double
  public var emptyColor: UIKit.UIColor
  public var filledColor: UIKit.UIColor
  public var fillMode: ShareTripSDK.StarFillMode
  public var starMargin: Swift.Double
  public var starPoints: [CoreFoundation.CGPoint]
  public var starSize: Swift.Double
  public var totalStars: Swift.Int
  public var filledImage: UIKit.UIImage?
  public var emptyImage: UIKit.UIImage?
  public var textColor: UIKit.UIColor
  public var textFont: UIKit.UIFont
  public var textMargin: Swift.Double
  public var minTouchRating: Swift.Double
  public var passTouchesToSuperview: Swift.Bool
  public var updateOnTouch: Swift.Bool
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class CosmosView : UIKit.UIView {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var rating: Swift.Double {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var settings: ShareTripSDK.CosmosSettings {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) convenience public init(settings: ShareTripSDK.CosmosSettings = .default)
  @_Concurrency.MainActor(unsafe) @objc override convenience dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, settings: ShareTripSDK.CosmosSettings)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func update()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityIncrement()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityDecrement()
  @_Concurrency.MainActor(unsafe) open var didTouchCosmos: ((Swift.Double) -> ())?
  @_Concurrency.MainActor(unsafe) open var didFinishTouchingCosmos: ((Swift.Double) -> ())?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var totalStars: Swift.Int {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SingleInfoCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @objc deinit
}
extension ShareTripSDK.SingleInfoCell : ShareTripSDK.ConfigurableTableViewCellDataContainer {
  public typealias AccecptableViewModelType = ShareTripSDK.SingleInfoCellData
}
extension ShareTripSDK.SingleInfoCell : ShareTripSDK.ConfigurableTableViewCell {
  @_Concurrency.MainActor(unsafe) public func configure(viewModel: any ShareTripSDK.ConfigurableTableViewCellData)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class InfoUploadCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public var didSelectUpload: (ShareTripSDK.FileType) -> Swift.Void
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func resetProgressBarView(fileType: ShareTripSDK.FileType)
  @_Concurrency.MainActor(unsafe) public func updateProgressBarView(progress: Swift.Float, fileType: ShareTripSDK.FileType)
  @objc deinit
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension ShareTripSDK.InfoUploadCell : ShareTripSDK.ConfigurableTableViewCellDataContainer {
  public typealias AccecptableViewModelType = ShareTripSDK.InfoUploadCellData
}
extension ShareTripSDK.InfoUploadCell : ShareTripSDK.ConfigurableTableViewCell {
  @_Concurrency.MainActor(unsafe) public func configure(viewModel: any ShareTripSDK.ConfigurableTableViewCellData)
}
public class CityProperty : Swift.Codable {
  final public let id: Swift.String?
  final public let countryCode: Swift.String?
  final public let countryName: Swift.String?
  final public let center: ShareTripSDK.STLocation?
  final public let name: Swift.String?
  final public let type: Swift.String?
  public init(id: Swift.String, countryCode: Swift.String, countryName: Swift.String, center: ShareTripSDK.STLocation, name: Swift.String, type: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class TapticEngine {
  public static let impact: ShareTripSDK.TapticEngine.Impact
  public static let selection: ShareTripSDK.TapticEngine.Selection
  public static let notification: ShareTripSDK.TapticEngine.Notification
  @_hasMissingDesignatedInitializers open class Impact {
    public enum ImpactStyle {
      case light, medium, heavy
      public static func == (a: ShareTripSDK.TapticEngine.Impact.ImpactStyle, b: ShareTripSDK.TapticEngine.Impact.ImpactStyle) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func feedback(_ style: ShareTripSDK.TapticEngine.Impact.ImpactStyle)
    public func prepare(_ style: ShareTripSDK.TapticEngine.Impact.ImpactStyle)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class Selection {
    public func feedback()
    public func prepare()
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class Notification {
    public enum NotificationType {
      case success, warning, error
      public static func == (a: ShareTripSDK.TapticEngine.Notification.NotificationType, b: ShareTripSDK.TapticEngine.Notification.NotificationType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func feedback(_ type: ShareTripSDK.TapticEngine.Notification.NotificationType)
    public func prepare()
    @objc deinit
  }
  @objc deinit
}
public struct FlightNavTitleViewData {
  public let flightRouteType: ShareTripSDK.FlightRouteType
  public let firstText: Swift.String
  public let secondText: Swift.String
  public let firstDate: Foundation.Date?
  public let secondDate: Foundation.Date?
  public let travellerText: Swift.String
  public let showArrow: Swift.Bool
  public init(flightRouteType: ShareTripSDK.FlightRouteType, firstText: Swift.String, secondText: Swift.String, firstDate: Foundation.Date?, secondDate: Foundation.Date?, travellerText: Swift.String, showArrow: Swift.Bool)
}
public protocol Validatable {
  func validate() -> Swift.Result<Swift.Void, ShareTripSDK.AppError>
}
public protocol NibBased {
  static var bundle: Foundation.Bundle { get }
  static var nibName: Swift.String { get }
  static func instantiate() -> Self
}
extension ShareTripSDK.NibBased where Self : UIKit.UIView {
  public static var bundle: Foundation.Bundle {
    get
  }
  public static var nibName: Swift.String {
    get
  }
  public static func instantiate() -> Self
}
public protocol StoryboardBased {
  static var bundle: Foundation.Bundle { get }
  static var storyboardName: Swift.String { get }
  static var storyboardIdentifier: Swift.String { get }
  static func instantiate() -> Self
}
extension ShareTripSDK.StoryboardBased where Self : UIKit.UIViewController {
  public static var bundle: Foundation.Bundle {
    get
  }
  public static var storyboardName: Swift.String {
    get
  }
  public static var storyboardIdentifier: Swift.String {
    get
  }
  public static func instantiate() -> Self
}
public protocol ObservableProtocol {
  associatedtype T
  typealias Observer = (Self.T) -> Swift.Void
  var value: Self.T { get set }
  func bind(observer: @escaping Self.Observer)
  func bindAndFire(observer: @escaping Self.Observer)
}
extension Swift.Encodable {
  public var dictionary: [Swift.String : Any]? {
    get
  }
}
public enum Covid19TestOptionsRowType : Swift.CaseIterable {
  case testCharge
  case optionSelect
  case learnMore
  public var title: Swift.String {
    get
  }
  public var placeholder: Swift.String {
    get
  }
  public static func == (a: ShareTripSDK.Covid19TestOptionsRowType, b: ShareTripSDK.Covid19TestOptionsRowType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [ShareTripSDK.Covid19TestOptionsRowType]
  public static var allCases: [ShareTripSDK.Covid19TestOptionsRowType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public protocol InfoTextFieldCellDelegate : AnyObject {
  func infoChanged(text: Swift.String, indexPath: Foundation.IndexPath)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class InfoTextFieldCell : UIKit.UITableViewCell {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var typeImageView: UIKit.UIImageView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var titleLabel: UIKit.UILabel!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var infoTextField: UIKit.UITextField!
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any ShareTripSDK.InfoTextFieldCellDelegate)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(cellIndexpath: Foundation.IndexPath, delegate: (any ShareTripSDK.InfoTextFieldCellDelegate)?, title: Swift.String, placeholder: Swift.String, typeImage: Swift.String, keyboardType: UIKit.UIKeyboardType = .default, textContentType: UIKit.UITextContentType? = nil)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class AppVersion : Swift.Codable {
  final public let iOS: ShareTripSDK.VersionData?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class VersionData : Swift.Codable {
  final public let version: Swift.String?
  final public let isForceUpdate: Swift.Bool?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum BookingButtonType {
  case cancelBooking
  case retryBooking
  case resendVoucher
  public static func == (a: ShareTripSDK.BookingButtonType, b: ShareTripSDK.BookingButtonType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SingleButtonType {
  case searchButton
  case retryButton
  case bookingButton(type: ShareTripSDK.BookingButtonType)
  case addPerson
  case cancellBooking
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SingleButtonCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public let button: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func configure(indexPath: Foundation.IndexPath, buttonTitle: Swift.String, buttonType: ShareTripSDK.SingleButtonType, enabled: Swift.Bool = true, callbackClosure: ((_ cellIndexPath: Foundation.IndexPath) -> Swift.Void)?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PriceViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(priceStr: Swift.String, priceAfterDiscountStr: Swift.String?, discountPercentageStr: Swift.String?)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol ActivityIndicatorView {
  var view: UIKit.UIView { get }
  func show()
  func hide()
}
public protocol ActivityIndicatorFactory {
  func create() -> any ShareTripSDK.ActivityIndicatorView
}
extension UIKit.UIActivityIndicatorView : ShareTripSDK.ActivityIndicatorView {
  @_Concurrency.MainActor(unsafe) public var view: UIKit.UIView {
    get
  }
  @_Concurrency.MainActor(unsafe) public func show()
  @_Concurrency.MainActor(unsafe) public func hide()
}
@objcMembers open class DefaultActivityIndicator : ShareTripSDK.ActivityIndicatorFactory {
  @objc open var style: ShareTripSDK.UIActivityIndicatorViewStyle
  @objc open var color: UIKit.UIColor?
  @objc public init(style: ShareTripSDK.UIActivityIndicatorViewStyle = .white, color: UIKit.UIColor? = nil)
  open func create() -> any ShareTripSDK.ActivityIndicatorView
  @objc deinit
}
public struct FlightLegData {
  public let originName: Swift.String
  public let destinationName: Swift.String
  public let airplaneName: Swift.String
  public let airplaneLogo: Swift.String
  public let departureTime: Swift.String
  public let arrivalTime: Swift.String
  public let stop: Swift.Int
  public let dayCount: Swift.Int
  public let duration: Swift.String
}
public struct FlightRow {
  public let currency: Swift.String
  public let totalPrice: Swift.Double
  public let discountPrice: Swift.Double?
  public let discountPercentage: Swift.Double?
  public let earnPoint: Swift.Int
  public let sharePoint: Swift.Int
  public let flightLegDatas: [ShareTripSDK.FlightLegData]
  public var hasTechnicalStoppage: Swift.Bool
  public var isRefundable: Swift.String
  public var dealType: ShareTripSDK.FlightDealType?
  public let coupon: Swift.String?
  public var totalPriceText: Swift.String {
    get
  }
  public var discountPriceText: Swift.String? {
    get
  }
  public var earnPointText: Swift.String {
    get
  }
  public var sharePointText: Swift.String {
    get
  }
}
extension UIKit.UITapGestureRecognizer {
  @_Concurrency.MainActor(unsafe) public func didTapAttributedTextInLabel(label: UIKit.UILabel, inRange targetRange: Foundation.NSRange) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PaymentGatewayCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public func setCellSelection(selected: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(imageLink: Swift.String)
  @objc deinit
}
public enum GenderType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case male
  case female
  case other
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias AllCases = [ShareTripSDK.GenderType]
  public typealias RawValue = Swift.String
  public static var allCases: [ShareTripSDK.GenderType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum ValidationState {
  case normal
  case active
  case warning(Swift.String)
  public var color: UIKit.UIColor {
    get
  }
}
public struct PopupViewData {
  public init(title: Swift.String, subtitle: Swift.String, buttonTitle: Swift.String, imageName: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PopupView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var imageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, viewData: ShareTripSDK.PopupViewData, callbackClosure: ((Swift.Bool) -> Swift.Void)?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class NameCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(imageName: Swift.String, titleText: Swift.String, subTitleText: Swift.String)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct USDPaymentPopupViewData {
  public let imageName: Swift.String
  public let title: Swift.String
  public let subtitle: Swift.String
  public let moneyInUSD: Swift.String
  public let buttonTitle: Swift.String
  public init(imageName: Swift.String, title: Swift.String, subtitle: Swift.String, moneyInUSD: Swift.String, buttonTitle: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class USDPaymentPopupView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var callbackClosure: ((Swift.Bool) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var imageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, viewData: ShareTripSDK.USDPaymentPopupViewData, callbackClosure: ((Swift.Bool) -> Swift.Void)?)
  @objc deinit
}
public protocol FilterResetCellDelegate : AnyObject {
  func filterResetButtonTapped()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FilterResetCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(subtitle: Swift.String, delegate: any ShareTripSDK.FilterResetCellDelegate)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol KeyboardObserving : AnyObject {
  func keyboardWillShow(withSize size: CoreFoundation.CGSize)
  func keyboardWillHide()
}
extension ShareTripSDK.KeyboardObserving {
  public func addKeyboardObservers(to notificationCenter: Foundation.NotificationCenter)
  public func removeKeyboardObservers(from notificationCenter: Foundation.NotificationCenter)
}
public protocol ScrollViewKeyboardObserving : ShareTripSDK.KeyboardObserving {
  var keyboardObservingScrollView: UIKit.UIScrollView { get }
}
public struct SSRType : Swift.Codable {
  public let type: Swift.String
  public let ssr: [ShareTripSDK.SSR]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SSR : Swift.Codable {
  public let code: Swift.String, name: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension ShareTripSDK.TravellerClassViewModel {
  public enum Rows {
    case traveller(ShareTripSDK.TravellerType)
    case childrenAge
    case flightClass(ShareTripSDK.FlightClass)
  }
}
extension ShareTripSDK.TravellerClassViewModel {
  @_hasMissingDesignatedInitializers public class Callback {
    @objc deinit
  }
}
public class TravellerClassViewModel {
  public var travelDate: Foundation.Date?
  final public let callback: ShareTripSDK.TravellerClassViewModel.Callback
  public var totalTravelersCount: Swift.Int {
    get
  }
  public init()
  public func validateInputs()
  public func getChidrenAgeStrings() -> [Swift.String]
  public func updateTravellerCount(_ count: Swift.Int, for traveller: ShareTripSDK.TravellerType)
  public func getMaxNumber(for traveller: ShareTripSDK.TravellerType) -> Swift.Int
  public func getMinNumber(for traveller: ShareTripSDK.TravellerType) -> Swift.Int
  public func getDateSelectionCellViewModel(for indexPath: Foundation.IndexPath) -> any ShareTripSDK.ConfigurableTableViewCellData
  public func setFlightClass(_ selectedClass: ShareTripSDK.FlightClass)
  public func travellerCount(for travellerType: ShareTripSDK.TravellerType) -> Swift.Int
  public func getTravelerNumber(for traveler: ShareTripSDK.TravellerType) -> Swift.Int
  @objc deinit
}
public protocol PopupInputViewDelegate : AnyObject {
  func crossButtonTapped()
}
@objc @_Concurrency.MainActor(unsafe) open class PopupInputView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var containerView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var crossButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var height: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String, height: CoreFoundation.CGFloat = 550.0, delegate: (any ShareTripSDK.PopupInputViewDelegate)? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) public func show()
  @_Concurrency.MainActor(unsafe) public func hide()
  @objc @_Concurrency.MainActor(unsafe) public func crossButtonTapped(_ sender: UIKit.UIButton? = nil)
}
extension ShareTripSDK.PopupInputView : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
public protocol LastNameInputCellDelegate : AnyObject {
  func lastNameChanged(name: Swift.String, indexPath: Foundation.IndexPath)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class LastNameInputCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public var cellIndexPath: Foundation.IndexPath!
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any ShareTripSDK.LastNameInputCellDelegate)?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var titleLabel: UIKit.UILabel!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var lastNameTextField: UIKit.UITextField!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ProfileBarButtonItem : ObjectiveC.NSObject {
  public class func createWith(name: Swift.String, image: Swift.String?, status: Swift.String?, target: Any? = nil, action: ObjectiveC.Selector? = nil) -> UIKit.UIBarButtonItem
  public class func getStatusColorCode(status: Swift.String) -> Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ProfileBarView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(showStatus: Swift.Bool, hasAction: Swift.Bool)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class StatusLabelView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @objc deinit
}
public class STPassenger : Swift.Codable {
  public var code: Swift.String
  final public let titleName: ShareTripSDK.TitleType
  final public let givenName: Swift.String
  final public let surName: Swift.String
  final public let nationality: Swift.String
  final public let gender: ShareTripSDK.GenderType
  final public let dateOfBirth: Swift.String
  final public let passportNumber: Swift.String?
  final public let passportExpireDate: Swift.String?
  final public let frequentFlyerNumber: Swift.String?
  final public let passportCopy: Swift.String?
  final public let visaCopy: Swift.String?
  public var address1: Swift.String
  public var postCode: Swift.String
  public var email: Swift.String
  public var mobileNumber: Swift.String
  public var address2: Swift.String
  public var profession: Swift.String
  required public init(from decoder: any Swift.Decoder) throws
  public init(titleName: ShareTripSDK.TitleType, givenName: Swift.String, surName: Swift.String, nationality: Swift.String, dateOfBirth: Swift.String, gender: ShareTripSDK.GenderType, passportNumber: Swift.String?, passportExpireDate: Swift.String?, frequentFlyerNumber: Swift.String?, passportCopy: Swift.String?, visaCopy: Swift.String?)
  public func getAgeCount() -> Swift.Int?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
extension UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public func setBorder(cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat = 1.0)
  @_Concurrency.MainActor(unsafe) public func setButtonImageTintColor(_ color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setupButtonPerTheme(tintColor: UIKit.UIColor, imageEdgeInsets: UIKit.UIEdgeInsets?)
}
extension UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public func centerImageAndButton(_ gap: CoreFoundation.CGFloat, imageOnTop: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func leftImageCenterText(image: UIKit.UIImage, imagePadding: CoreFoundation.CGFloat, renderingMode: UIKit.UIImage.RenderingMode)
  @_Concurrency.MainActor(unsafe) public func leftImage(image: UIKit.UIImage, renderMode: UIKit.UIImage.RenderingMode)
  @_Concurrency.MainActor(unsafe) public func rightImage(image: UIKit.UIImage, renderMode: UIKit.UIImage.RenderingMode)
}
public struct JTCalendarDateViewData {
  public init(title: Swift.String, imageStr: Swift.String = "calander-mono", selectedDate: Foundation.Date? = nil)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class JTCalendarView : UIKit.UIView, ShareTripSDK.NibBased {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func configure(firstDateData: ShareTripSDK.JTCalendarDateViewData, secondDateData: ShareTripSDK.JTCalendarDateViewData? = nil)
  @_Concurrency.MainActor(unsafe) public func setApplyButtonStatus(_ enabled: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setDateText(firstDate: Foundation.Date, secondDate: Foundation.Date? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TripcoinParticleView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var particleImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var emitterPosition: CoreFoundation.CGPoint!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) convenience public init(emitterPosition: CoreFoundation.CGPoint)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func makeTripCoinEmmiterCell() -> QuartzCore.CAEmitterCell
  @objc deinit
}
public struct DoubleButtonData {
  public let typeImage: Swift.String
  public let firstTitle: Swift.String
  public let secondTitle: Swift.String
  public let firstEnabled: Swift.Bool
  public let secondEnabled: Swift.Bool
  public init(typeImage: Swift.String, firstTitle: Swift.String, secondTitle: Swift.String, firstEnabled: Swift.Bool, secondEnabled: Swift.Bool)
}
public protocol DoubleButtonCellDelegate : AnyObject {
  func firstButtonTapped(indexPath: Foundation.IndexPath)
  func secondButtonTapped(indexPath: Foundation.IndexPath)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class DoubleButtonCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func configure(buttonData: ShareTripSDK.DoubleButtonData, indexPath: Foundation.IndexPath, delegate: any ShareTripSDK.DoubleButtonCellDelegate)
  @objc deinit
}
public struct ScheduleFilterCellData {
  public let title: Swift.String
  public let titleImage: Swift.String
  public var selected: Swift.Bool
  public init(title: Swift.String, titleImage: Swift.String, selected: Swift.Bool)
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class JTDateCell : JTAppleCalendar.JTACDayCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func configure(cellState: JTAppleCalendar.CellState, valid: Swift.Bool, selectedPosition: JTAppleCalendar.SelectionRangePosition)
  @_Concurrency.MainActor(unsafe) public func showIndicatorView(cellState: JTAppleCalendar.CellState, indicator: ShareTripSDK.IndicatorType)
  @_Concurrency.MainActor(unsafe) public func hideIndicatorView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class NavigationController : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @available(iOS 5.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PopupAnimatedView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var callbackClosure: ((Swift.Bool) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var title: Swift.String?
  @_Concurrency.MainActor(unsafe) public var message: Swift.String?
  @_Concurrency.MainActor(unsafe) public var shouldAnimate: Swift.Bool
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, title: Swift.String, message: Swift.String, animation: Swift.Bool, callbackClosure: ((Swift.Bool) -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func updateConstraints()
  @objc deinit
}
public class TripCoinBarButtonItem {
  public init()
  public class func createWithText(_ text: Swift.String, target: Any? = nil, action: ObjectiveC.Selector? = nil) -> UIKit.UIBarButtonItem
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class TripCoinBarView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @objc deinit
}
public struct SingleInputData {
  public let inputTypeImage: Swift.String
  public let placeholder: Swift.String
  public let inputValue: Swift.String?
  public init(inputTypeImage: Swift.String, placeholder: Swift.String, inputValue: Swift.String?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SingleInputCell : UIKit.UITableViewCell {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var topDotsImageView: UIKit.UIImageView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var inputTypeImageView: UIKit.UIImageView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var crossButton: UIKit.UIButton!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var inputButton: UIKit.UIButton!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var underlineView: UIKit.UIView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var inputButtonWidthConstraint: UIKit.NSLayoutConstraint!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var inputButtonTrailingConstraint: UIKit.NSLayoutConstraint!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func configure(indexPath: Foundation.IndexPath, singleInputData: ShareTripSDK.SingleInputData, callbackClosure: ((_ cellIndexPath: Foundation.IndexPath) -> Swift.Void)?, crossCallbackClosure: ((_ cellIndexPath: Foundation.IndexPath) -> Swift.Void)? = nil)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct CouponsServiceExtraParams {
  public let flighCouponExtraParams: ShareTripSDK.FlightCouponsExtraParameters?
  public let hotelCouponExtraParams: ShareTripSDK.HotelCouponsExtraParameters?
  public let packageCouponExtraParams: ShareTripSDK.PackageCouponsExtraParams?
  public init(flighCouponExtraParams: ShareTripSDK.FlightCouponsExtraParameters?, hotelCouponExtraParams: ShareTripSDK.HotelCouponsExtraParameters?, packageCouponExtraParams: ShareTripSDK.PackageCouponsExtraParams?)
}
public struct FlightCouponsExtraParameters {
  public let searchId: Swift.String?
  public let sequenceCode: Swift.String?
  public init(searchId: Swift.String?, sequenceCode: Swift.String?)
  public var requestParams: [Swift.String : Any] {
    get
  }
}
public struct HotelCouponsExtraParameters {
  public let searchId: Swift.String
  public var propertyCode: Swift.String
  public let providerCode: Swift.String
  public let rooms: [Swift.Int]
  public let roomsSearchCode: Swift.String
  public let propertyRoomId: Swift.String
  public init(searchId: Swift.String, propertyCode: Swift.String, providerCode: Swift.String, rooms: [Swift.Int], roomsSearchCode: Swift.String, propertyRoomId: Swift.String)
  public var requestParams: [Swift.String : Any] {
    get
  }
}
public struct PackageCouponsExtraParams {
  public let productCode: Swift.String?
  public init(productCode: Swift.String?)
  public var requestParams: [Swift.String : Any] {
    get
  }
}
public struct PackageCouponParams {
  public let coupon: Swift.String
  public let serviceType: Swift.String
  public let deviceType: Swift.String
  public let extraParams: [Swift.String : Any]
  public init(coupon: Swift.String, serviceType: Swift.String, deviceType: Swift.String, extraParams: [Swift.String : Any])
  public var params: [Swift.String : Any] {
    get
  }
}
public protocol InputTextFilterCellDelegate : AnyObject {
  func inputTextDidChange(_ text: Swift.String?, indexPath: Foundation.IndexPath?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class InputTextFilterCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func configure(title: Swift.String, text: Swift.String?, placeholder: Swift.String, indexPath: Foundation.IndexPath, delegate: any ShareTripSDK.InputTextFilterCellDelegate)
  @objc deinit
}
extension ShareTripSDK.InputTextFilterCell : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
}
public class FlightRuleResponse : Swift.Codable {
  final public let refundPolicies: [ShareTripSDK.RefundPolicy?]?
  final public let baggages: [ShareTripSDK.FlightBaggage]?
  final public let fareDetails: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class RefundPolicy : Swift.Codable {
  final public let type: Swift.String
  final public let rules: [ShareTripSDK.RefundPolicyRule]
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class RefundPolicyRule : Swift.Codable {
  final public let type: Swift.String, text: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class FlightBaggage : Swift.Codable {
  final public let type: Swift.String
  final public let adult: Swift.String?
  final public let child: Swift.String?, infant: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CheckboxCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public var didTapCheckbox: (Swift.Bool) -> Swift.Void
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func configure(title: Swift.String, checkboxChecked: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func selectCheckbox()
  @objc deinit
}
extension ShareTripSDK.CheckboxCell : ShareTripSDK.ConfigurableTableViewCellDataContainer {
  public typealias AccecptableViewModelType = ShareTripSDK.CheckboxCellData
}
extension ShareTripSDK.CheckboxCell : ShareTripSDK.ConfigurableTableViewCell {
  @_Concurrency.MainActor(unsafe) public func configure(viewModel: any ShareTripSDK.ConfigurableTableViewCellData)
}
public typealias UIViewContentMode = UIKit.UIView.ContentMode
public typealias UIActivityIndicatorViewStyle = UIKit.UIActivityIndicatorView.Style
public struct TravelInsuranceServiceDetailResponse : Swift.Codable {
  public let code: Swift.String, name: Swift.String
  public let logo: Swift.String
  public let description: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FlightPromotions : Swift.Codable {
  public let uid: Swift.String?
  public let image: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SingleInputTitleData {
  public let titleLabel: Swift.String
  public let inputTypeImage: Swift.String
  public let placeholder: Swift.String
  public let inputValue: Swift.String?
  public init(titleLabel: Swift.String, inputTypeImage: Swift.String, placeholder: Swift.String, inputValue: Swift.String?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SingleInputTitleCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func configure(indexPath: Foundation.IndexPath, singleInputData: ShareTripSDK.SingleInputTitleData, callbackClosure: ((_ cellIndexPath: Foundation.IndexPath) -> Swift.Void)?, crossCallbackClosure: ((_ cellIndexPath: Foundation.IndexPath) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func setCellAttributeColor()
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct Constants {
  public static var baseURL: Swift.String {
    get
  }
  public static var stAccess: Swift.String {
    get
  }
  public static var clientId: Swift.String
  public static var platform: Swift.String
  public struct App {
    public static let minLoadingAnimationTime: Swift.Double
    public static let totalStars: Swift.Int
    public static let minCostForPlayingWheel: Swift.Int
    public static let hasLaunchedOnce: Swift.String
    public static let updateAppAlertDate: Swift.String
    public static let treasureBoxWaitTime: Swift.String
    public static let treasureBoxEarnTime: Swift.String
    public static let dateFormat: Swift.String
    public static let timeFormat: Swift.String
    public static let dateTimeFormat: Swift.String
    public static let supportMail: Swift.String
    public static let supportPhone: Swift.String
    public static let officeName: Swift.String
    public static let officialSlogan: Swift.String
    public static let officeLat: Swift.Double
    public static let officeLong: Swift.Double
    public static let edgeConstant: CoreFoundation.CGFloat
    public static let alertWidthMaxConstant: CoreFoundation.CGFloat
    public static let appStoreURL: Swift.String
    public static let loyaltyTabIndex: Swift.Int
    public static let accountTabIndex: Swift.Int
    public static let appShortURL: Swift.String
    public static let appStoreShortURL: Swift.String
    public static let playStoreShortURL: Swift.String
    public static let bundleShortVersionString: Swift.String
    public static let ciriumAppID: Swift.String
    public static let ciriumAppKey: Swift.String
    public static let crispWebsiteID: Swift.String
    public static let googleClientID: Swift.String
    public static func getReferralMessage(referralCode: Swift.String) -> Swift.String
    public static func getShareMessage() -> Swift.String
    public static func getQuizScoreShareMessage(score: Swift.Double) -> Swift.String
    public static let bankDiscountPromoGenericText: Swift.String
  }
  public struct RemoteConfigKey {
    public static let plist_file_name: Swift.String
    public static let ios_force_update_enabled: Swift.String
    public static let ios_app_version: Swift.String
    public static let app_update_alert_hour: Swift.String
    public static let app_loyalty: Swift.String
    public static let flight_discount_offer_bank_list: Swift.String
    public static let flight_discount_options: Swift.String
    public static let hotel_discount_options: Swift.String
    public static let flight_search_threshold_time: Swift.String
    public static let hotel_discount_offer_bank_list: Swift.String
    public static let quiz_homepage_promotion_text: Swift.String
    public static let quiz_termAndConditions: Swift.String
    public static let cirium_appId: Swift.String
    public static let cirium_appKey: Swift.String
    public static let travelAdvice_termAndConditions: Swift.String
    public static let dealsUrlFromRemoteConfig: Swift.String
    public static let success_urls: Swift.String
    public static let crisp_websiteID: Swift.String
  }
  public struct APIParameterKey {
    public static let keyword: Swift.String
    public static let name: Swift.String
    public static let limit: Swift.String
    public static let offset: Swift.String
    public static let currency: Swift.String
    public static let nationality: Swift.String
    public static let cityCodes: Swift.String
    public static let filterBy: Swift.String
    public static let userID: Swift.String
    public static let city: Swift.String
    public static let checkin: Swift.String
    public static let checkout: Swift.String
    public static let rooms: Swift.String
    public static let propertyCode: Swift.String
    public static let searchCode: Swift.String
    public static let roomSearchCode: Swift.String
    public static let propertyRoomId: Swift.String
    public static let sort: Swift.String
    public static let hotelName: Swift.String
    public static let location: Swift.String
    public static let distance: Swift.String
    public static let priceRange: Swift.String
    public static let rating: Swift.String
    public static let starRating: Swift.String
    public static let propertyType: Swift.String
    public static let meals: Swift.String
    public static let amenities: Swift.String
    public static let neighborhood: Swift.String
    public static let pointOfInterest: Swift.String
    public static let hotelId: Swift.String
    public static let roomIds: Swift.String
    public static let token: Swift.String
    public static let facebookToken: Swift.String
    public static let appleToken: Swift.String
    public static let password: Swift.String
    public static let oldPassword: Swift.String
    public static let newPassword: Swift.String
    public static let email: Swift.String
    public static let mobileNumber: Swift.String
    public static let referralCode: Swift.String
    public static let titleName: Swift.String
    public static let givenName: Swift.String
    public static let surName: Swift.String
    public static let address1: Swift.String
    public static let postCode: Swift.String
    public static let gender: Swift.String
    public static let dateOfBirth: Swift.String
    public static let passportExpireDate: Swift.String
    public static let passportNumber: Swift.String
    public static let country: Swift.String
    public static let passportCopy: Swift.String
    public static let visaCopy: Swift.String
    public static let frequentFlyerNumber: Swift.String
    public static let mealPreference: Swift.String
    public static let wheelChair: Swift.String
    public static let quickPick: Swift.String
    public static let uploadFile: Swift.String
    public static let cityCode: Swift.String
    public static let wantToVisit: Swift.String
    public static let bookingCode: Swift.String
    public static let type: Swift.String
    public static let value: Swift.String
    public static let code: Swift.String
    public static let voucherId: Swift.String
    public static let tripType: Swift.String
    public static let adult: Swift.String
    public static let child: Swift.String
    public static let infant: Swift.String
    public static let flightClass: Swift.String
    public static let origin: Swift.String
    public static let destination: Swift.String
    public static let depart: Swift.String
    public static let query: Swift.String
    public static let filter: Swift.String
    public static let page: Swift.String
    public static let searchId: Swift.String
    public static let sequenceCode: Swift.String
    public static let extraParams: Swift.String
    public static let providerCode: Swift.String
    public static let coupon: Swift.String
    public static let serviceType: Swift.String
    public static let deviceType: Swift.String
    public static let service: Swift.String
    public static let productCode: Swift.String
    public static let ciriumAppIDParameter: Swift.String
    public static let ciriumAppKeyParameter: Swift.String
    public static let maxPositionParameter: Swift.String
  }
  public struct APIConstants {
    public static let adult: Swift.String
    public static let limit: Swift.String
    public static let offset: Swift.String
  }
  public struct FlightConstants {
    public static let flightSearchingDateOffset: Swift.Int
    public static let thresholdTimeInMinute: Swift.Int
  }
  public struct HotelRoom {
    public static let maxRoom: Swift.Int
    public static let maxPersonPerRoom: Swift.Int
    public static let maxAdultPerRoom: Swift.Int
    public static let maxChildrenPerRoom: Swift.Int
    public static let minPersonPerRoom: Swift.Int
    public static let minAdultPerRoom: Swift.Int
    public static let minChildrenPerRoom: Swift.Int
  }
  public struct PaymentConstants {
    public static let successUrl: Swift.String
    public static let failedUrl: Swift.String
  }
  public struct UserDefaultKey {
    public static let lastQuizOpeningTime: Swift.String
  }
}
public enum HTTPHeaderField : Swift.String {
  case authentication
  case contentType
  case acceptType
  case acceptEncoding
  case accessToken
  case userAgent
  case stAccess
  case clientId
  case platform
  case travelAdviceAPIAccessToken
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ContentType : Swift.String {
  case json
  case multipartFormData
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum APIResponseCode : Swift.String, Swift.Codable {
  case success
  case emptyToken
  case invalidToken
  case expiredToken
  case error_validation
  case not_found
  case coin_not_available
  case unknown
  case FLIGHT_PRICE_CHANGE
  case FLIGHT_ITINERARY_CHANGE
  case FLIGHT_RE_ITINERARY_CHANGE
  case FLIGHT_RE_VALIDATION_CHANGE
  public init(from decoder: any Swift.Decoder) throws
  public init(stringValue: Swift.String)
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AppError : Swift.Error {
  case validationError(Swift.String)
}
public enum SDKConsumers {
  case sharetrip
  case banglalink
  public static func == (a: ShareTripSDK.SDKConsumers, b: ShareTripSDK.SDKConsumers) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol STSDKDelegate : AnyObject {
  func didSuccessTokenValidation()
  func didFailed(error: Swift.String)
}
public protocol HomeScreenDelegate : AnyObject {
  func openHomeScreen()
}
@_hasMissingDesignatedInitializers final public class STSDK {
  public static let shared: ShareTripSDK.STSDK
  weak final public var delegate: (any ShareTripSDK.STSDKDelegate)?
  final public var environment: ShareTripSDK.Environment
  final public var consumer: ShareTripSDK.SDKConsumers
  weak final public var homeScreenDelegate: (any ShareTripSDK.HomeScreenDelegate)?
  final public var accessToken: Swift.String {
    get
    set
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class WhitishNavigationController : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @available(iOS 5.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct CovidTestCenterDetailsResponse : Swift.Codable {
  public let code: Swift.String?, name: Swift.String?, description: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class RoundedCornerView : UIKit.UIView {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var cornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var topLeft: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var topRight: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var bottomLeft: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var bottomRight: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) public func addDoneToolbar()
  @_Concurrency.MainActor(unsafe) public func setRightImageView(imageLink: Swift.String, tintColor: UIKit.UIColor, frame: CoreFoundation.CGRect? = nil)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class RangeSeekSlider : UIKit.UIControl {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) convenience public init(frame: CoreFoundation.CGRect = .zero, completion: ((ShareTripSDK.RangeSeekSlider) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) weak open var delegate: (any ShareTripSDK.RangeSeekSliderDelegate)?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var minValue: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var maxValue: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var selectedMinValue: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var selectedMaxValue: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var minLabelFont: UIKit.UIFont {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var maxLabelFont: UIKit.UIFont {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var numberFormatter: Foundation.NumberFormatter
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var hideLabels: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var labelsFixed: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var minDistance: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var maxDistance: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var minLabelColor: UIKit.UIColor?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var maxLabelColor: UIKit.UIColor?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var handleColor: UIKit.UIColor?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var handleBorderColor: UIKit.UIColor?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var colorBetweenHandles: UIKit.UIColor?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var initialColor: UIKit.UIColor?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var disableRange: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var enableStep: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var step: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var handleImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var handleDiameter: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var selectedHandleDiameterMultiplier: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var lineHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var handleBorderWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var labelPadding: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var minLabelAccessibilityLabel: Swift.String?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var maxLabelAccessibilityLabel: Swift.String?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var minLabelAccessibilityHint: Swift.String?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var maxLabelAccessibilityHint: Swift.String?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func continueTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElement(at index: Swift.Int) -> Any?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func index(ofAccessibilityElement element: Any) -> Swift.Int
  @_Concurrency.MainActor(unsafe) open func setupStyle()
  @objc deinit
}
public enum PaymentConfirmationEvents : ShareTripSDK.STAnalyticsEvent {
  case paymentCompleteVisa
  case paymentCompleteFlight
  case paymentCompleteHotel
  case paymentCompleteHoliday
  case paymentFailedVisa
  case paymentFailedFlight
  case paymentFailedHotel
  case paymentFailedHoliday
  public var name: Swift.String {
    get
  }
  public var payload: ShareTripSDK.PaymentConfirmationEvents.Payload? {
    get
  }
  public static func == (a: ShareTripSDK.PaymentConfirmationEvents, b: ShareTripSDK.PaymentConfirmationEvents) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CheckboxCellData : ShareTripSDK.ConfigurableTableViewCellData {
  public let title: Swift.String
  public let checkboxChecked: Swift.Bool
  public let enabled: Swift.Bool
  public init(title: Swift.String, checkboxChecked: Swift.Bool, enabled: Swift.Bool)
}
public enum FlightDealType : Swift.String, Swift.Codable {
  case preferred
  case best
  case none
  public var title: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class TripCoinCardCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(earnedTripCoin: Swift.Int, redeemedTripCoin: Swift.Int)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class LeftInfoHeaderView : UIKit.UITableViewHeaderFooterView {
  @_Concurrency.MainActor(unsafe) final public let customLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let bottomLineView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @objc deinit
}
extension Swift.Double {
  public func asString(style: Foundation.DateComponentsFormatter.UnitsStyle) -> Swift.String
  public var clean: Swift.String {
    get
  }
  public func rounded(toPlaces places: Swift.Int) -> Swift.Double
  public func getStringDate() -> Swift.String
  public func withCommasAndCurrency(_ currency: Swift.String, _ sign: Swift.String = "+") -> Swift.String
  public func withTwoFractionalCommasAndCurrency(_ currency: Swift.String = "BDT", _ sign: Swift.String = "") -> Swift.String
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class DiscountOptionsCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public var callbackClosure: (() -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(discountOptionsView: UIKit.UIView)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol SliderCellDelegate : AnyObject {
  func sliderDidChange(_ value: Swift.Float, cellType: ShareTripSDK.SliderCellType)
}
public enum SliderCellType {
  case locationRange
  case guestRating
  public static func == (a: ShareTripSDK.SliderCellType, b: ShareTripSDK.SliderCellType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SliderCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @objc deinit
}
public protocol PageIndicatorView : AnyObject {
  var view: UIKit.UIView { get }
  var page: Swift.Int { get set }
  var numberOfPages: Swift.Int { get set }
}
extension UIKit.UIPageControl : ShareTripSDK.PageIndicatorView {
  @_Concurrency.MainActor(unsafe) public var view: UIKit.UIView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var page: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func sizeToFit()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class LabelPageIndicator : UIKit.UILabel, ShareTripSDK.PageIndicatorView {
  @_Concurrency.MainActor(unsafe) public var view: UIKit.UIView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var numberOfPages: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var page: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func sizeToFit()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CustomLabelPageIndicator : UIKit.UILabel, ShareTripSDK.PageIndicatorView {
  @_Concurrency.MainActor(unsafe) public var view: UIKit.UIView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var numberOfPages: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var page: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func sizeToFit()
  @objc deinit
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func setupNavigationItems(withTitle title: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setupNavWithoutRightBarItem(withTitle title: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setupPowredByView(parentView: UIKit.UIView)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PlaceholderView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func updateConstraints()
  @objc deinit
}
extension ShareTripSDK.PlaceholderView : Kingfisher.Placeholder {
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) public var previousViewController: UIKit.UIViewController? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var childForStatusBarStyle: UIKit.UIViewController? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var childForStatusBarHidden: UIKit.UIViewController? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public func popToViewController(ofClass: Swift.AnyClass, animated: Swift.Bool = true)
}
public struct TowColGivenNameInputCellData {
  public let imageString: Swift.String
  public let titleNameTitle: Swift.String
  public let titleNameText: Swift.String
  public let givenNameTitle: Swift.String
  public let givenNameText: Swift.String
  public let pickerData: [Swift.String]
  public let titleNameState: ShareTripSDK.ValidationState
  public let givenNameState: ShareTripSDK.ValidationState
  public let indexPath: Foundation.IndexPath?
  public let delegate: (any ShareTripSDK.TowColGivenNameInputCellDelegate)?
  public init(imageString: Swift.String, titleNameTitle: Swift.String, titleNameText: Swift.String, givenNameTitle: Swift.String, givenNameText: Swift.String, pickerData: [Swift.String], titleNameState: ShareTripSDK.ValidationState = .normal, givenNameState: ShareTripSDK.ValidationState = .normal, indexPath: Foundation.IndexPath? = nil, delegate: (any ShareTripSDK.TowColGivenNameInputCellDelegate)? = nil)
}
public protocol TowColGivenNameInputCellDelegate : AnyObject {
  func titleNameChanged(for indexPath: Foundation.IndexPath?, text: Swift.String, selectedRow: Swift.Int)
  func givenNameChanged(for indexPath: Foundation.IndexPath?, text: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class TowColGivenNameInputCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(_ data: ShareTripSDK.TowColGivenNameInputCellData)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ShareTripSDK.TowColGivenNameInputCell : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FilterPriceRangeCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any ShareTripSDK.PriceRangeCellDelegate)?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var minPriceLabel: UIKit.UILabel!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var maxPriceLabel: UIKit.UILabel!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var rangeSeekSlider: ShareTripSDK.RangeSeekSlider!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var cellContainerView: UIKit.UIView!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func setupView()
  @_Concurrency.MainActor(unsafe) public func configure(priceRange: ShareTripSDK.FilterPriceRange, delegate: any ShareTripSDK.PriceRangeCellDelegate)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ShareTripSDK.FilterPriceRangeCell : ShareTripSDK.RangeSeekSliderDelegate {
  @_Concurrency.MainActor(unsafe) public func rangeSeekSlider(_ slider: ShareTripSDK.RangeSeekSlider, didChange minValue: CoreFoundation.CGFloat, maxValue: CoreFoundation.CGFloat)
}
public protocol ConfigurableTableViewCellData {
  static var reuseableIDForContainer: Swift.String { get }
}
extension ShareTripSDK.ConfigurableTableViewCellData {
  public static var reuseableIDForContainer: Swift.String {
    get
  }
}
public protocol ConfigurableTableViewCellDataContainer {
  associatedtype AccecptableViewModelType : ShareTripSDK.ConfigurableTableViewCellData
  static var reuseableContainerID: Swift.String { get }
}
extension ShareTripSDK.ConfigurableTableViewCellDataContainer {
  public static var reuseableContainerID: Swift.String {
    get
  }
}
public protocol ConfigurableTableViewCell : UIKit.UITableViewCell {
  func configure(viewModel: any ShareTripSDK.ConfigurableTableViewCellData)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class AmenityRowView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public let firstItemView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public let firstItemImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) final public let firstItemLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let secondItemView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public let secondItemImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) final public let secondItemLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func updateConstraints()
  @objc deinit
}
public protocol CollapsibleHeaderViewDelegate : AnyObject {
  func toggleSection(_ section: Swift.Int)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CollapsibleHeaderView : UIKit.UITableViewHeaderFooterView {
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any ShareTripSDK.CollapsibleHeaderViewDelegate)?
  @_Concurrency.MainActor(unsafe) public var section: Swift.Int
  @_Concurrency.MainActor(unsafe) final public let titleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let arrowImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) final public let horizontalLineView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func setCollapsed(_ collapsed: Swift.Bool)
  @objc deinit
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func delay(_ delay: Swift.Double, closure: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func showAlert(message: Swift.String, withTitle title: Swift.String? = nil, buttonTitle: Swift.String = "OK", handler: ((UIKit.UIAlertAction) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func showError(error: Foundation.NSError)
  @_Concurrency.MainActor(unsafe) public var isModal: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var topbarHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public var statusBarHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public var navigationBarHeight: CoreFoundation.CGFloat {
    get
  }
}
public enum TravellerType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case adult
  case child
  case infant
  public var requiredInfo: Swift.String {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public init(intValue: Swift.Int)
  public static func getTravellerType(from dateOfBirth: Foundation.Date) -> ShareTripSDK.TravellerType
  public init?(rawValue: Swift.String)
  public typealias AllCases = [ShareTripSDK.TravellerType]
  public typealias RawValue = Swift.String
  public static var allCases: [ShareTripSDK.TravellerType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UICollectionView {
  @_Concurrency.MainActor(unsafe) public func registerCell<T>(_ cellClass: T.Type) where T : UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) public func registerNibCell<T>(_ cellClass: T.Type, nibName: Swift.String = T.reuseID) where T : UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) public func dequeueReusableCell<T>(forIndexPath indexPath: Foundation.IndexPath) -> T where T : UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) public func addTopBackgroundView(viewColor: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func scrollToNearestVisibleCollectionViewCell()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class DataPickerView : UIKit.UIPickerView, UIKit.UIPickerViewDataSource, UIKit.UIPickerViewDelegate {
  @_Concurrency.MainActor(unsafe) public var data: [Swift.String]? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var selectedValue: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var selectedRow: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc public func numberOfComponents(in pickerView: UIKit.UIPickerView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func pickerView(_ pickerView: UIKit.UIPickerView, numberOfRowsInComponent component: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func pickerView(_ pickerView: UIKit.UIPickerView, titleForRow row: Swift.Int, forComponent component: Swift.Int) -> Swift.String?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct LoginCardViewData {
  public let title: Swift.String
  public let subtitle: Swift.String
  public let imageName: Swift.String
  public let gradientBackground: Swift.Bool
  public init(title: Swift.String, subtitle: Swift.String, imageName: Swift.String, gradientBackground: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class LoginCardView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var callbackClosure: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, viewData: ShareTripSDK.LoginCardViewData, callbackClosure: (() -> Swift.Void)?)
  @objc deinit
}
public struct NameInputGuideCellData : ShareTripSDK.ConfigurableTableViewCellData {
  public let instructions: Swift.String
  public init(instructions: Swift.String)
  public static var flightInstruction: ShareTripSDK.NameInputGuideCellData {
    get
  }
}
public protocol FirstNameInputCellDelegate : AnyObject {
  func titleChanged(titleType: ShareTripSDK.TitleType, indexPath: Foundation.IndexPath)
  func firstNameChanged(name: Swift.String, indexPath: Foundation.IndexPath)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FirstNameInputCell : UIKit.UITableViewCell {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var titleTextField: ShareTripSDK.NoSelectTextField!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var firstNameTextField: UIKit.UITextField!
  @_Concurrency.MainActor(unsafe) public var cellIndexPath: Foundation.IndexPath!
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any ShareTripSDK.FirstNameInputCellDelegate)?
  @_Concurrency.MainActor(unsafe) public var picker: ShareTripSDK.DataPickerView?
  @_Concurrency.MainActor(unsafe) public var pickerAccessory: UIKit.UIToolbar?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func cancelBtnClicked(_ button: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) public func doneBtnClicked(_ button: UIKit.UIBarButtonItem?)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum ClassType : Swift.String, Swift.Codable {
  case economy
  case premiumEconomy
  case business
  case firstClass
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TripType : Swift.String, Swift.Codable {
  case oneWay
  case roundTrip
  case multiCity
  public static var allCases: [ShareTripSDK.TripType] {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class DateTime : Swift.Codable {
  final public let date: Swift.String
  final public let time: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class FlightPriceBreakdownDetail : Swift.Codable {
  final public let type: ShareTripSDK.TravellerType
  final public let baseFare: Swift.Double, tax: Swift.Double, total: Swift.Double
  final public let currency: Swift.String
  final public let numberPaxes: Swift.Int
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class ImageSlideshowItem : UIKit.UIScrollView, UIKit.UIScrollViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) final public let imageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) final public let activityIndicator: (any ShareTripSDK.ActivityIndicatorView)?
  @objc @_Concurrency.MainActor(unsafe) final public let image: any ShareTripSDK.InputSource
  @objc @_Concurrency.MainActor(unsafe) open var gestureRecognizer: UIKit.UITapGestureRecognizer?
  @objc @_Concurrency.MainActor(unsafe) final public let zoomEnabled: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var zoomInInitially: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var maximumScale: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) public func loadImage()
  @objc @_Concurrency.MainActor(unsafe) public func cancelPendingLoad()
  @_Concurrency.MainActor(unsafe) @objc open func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc open func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @objc deinit
}
public class STCity : Swift.Codable {
  final public let name: Swift.String?
  final public let cityCode: Swift.String?
  final public let countryCode: Swift.String?
  final public let countryName: Swift.String?
  final public let image: Swift.String?
  final public let cityName: Swift.String?
  final public let minPrice: Swift.Int?
  final public let currency: Swift.String?
  final public let count: Swift.Int?
  public var commonCityName: Swift.String? {
    get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class TripCoinViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(earnedTripCoin: Swift.Int, redeemedTripCoin: Swift.Int)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FlightSearchVC : ShareTripSDK.ViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepare(for segue: UIKit.UIStoryboardSegue, sender: Any?)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension ShareTripSDK.FlightSearchVC : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
}
extension ShareTripSDK.FlightSearchVC : ShareTripSDK.StoryboardBased {
  @_Concurrency.MainActor(unsafe) public static var storyboardName: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class NoSelectTextField : UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SharePostTVCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setHighlighted(_ highlighted: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configureCell(with buttonTitle: Swift.String = "SHARE POST")
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SingleButtonCardCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public var callBack: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func configure(title: Swift.String, titleColor: UIKit.UIColor, backgroundColor: UIKit.UIColor)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct EmptyBookingMessage {
  public static func getMessage(for serviceType: ShareTripSDK.ServiceType) -> Swift.String
}
public struct FlightPriceIndicatorResponse : Swift.Codable {
  public let max: ShareTripSDK.MinMaxFlightPriceIndicator?, min: ShareTripSDK.MinMaxFlightPriceIndicator?
  public let fare: [ShareTripSDK.DateFlightPriceIndicator]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DateFlightPriceIndicator : Swift.Codable {
  public let date: Swift.String
  public let direct: Swift.Double, nonDirect: Swift.Double
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MinMaxFlightPriceIndicator : Swift.Codable {
  public let direct: Swift.Double, nonDirect: Swift.Double
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum AccountCellInfo {
  case login
  case editProfile
  case quickPick
  case referEarn
  case leaderboard
  case changePassword
  case savedCards
  case visaTrack
  case logout
  case manageData
  case writeReview
  case faq
  case support
  case terms
  case privacy
  case contact
  public var title: Swift.String {
    get
  }
  public static var topSection: [ShareTripSDK.AccountCellInfo] {
    get
  }
  public static var bottomSecion: [ShareTripSDK.AccountCellInfo] {
    get
  }
  public static func == (a: ShareTripSDK.AccountCellInfo, b: ShareTripSDK.AccountCellInfo) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FullScreenSlideshowViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) open var slideshow: ShareTripSDK.ImageSlideshow
  @objc @_Concurrency.MainActor(unsafe) open var closeButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) open var closeButtonFrame: CoreFoundation.CGRect?
  @objc @_Concurrency.MainActor(unsafe) open var pageSelected: ((_ page: Swift.Int) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) open var initialPage: Swift.Int
  @objc @_Concurrency.MainActor(unsafe) open var inputs: [any ShareTripSDK.InputSource]?
  @objc @_Concurrency.MainActor(unsafe) open var backgroundColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) open var zoomEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Swift.String {
  public var localizedString: Swift.String {
    get
  }
  public func trim(newLine: Swift.Bool = false) -> Swift.String
  public func getPlural(_ yes: Swift.Bool) -> Swift.String
  public func getPlural(count: Swift.Int) -> Swift.String
  public func validateEmailStandard() -> Swift.Bool
  public func validateForEmail() -> Swift.Result<Swift.Void, ShareTripSDK.AppError>
  public func validateForName(nameType: Swift.String = "Given Name") -> Swift.Result<Swift.Void, ShareTripSDK.AppError>
  public func validateForMobileNumber() -> Swift.Result<Swift.Void, ShareTripSDK.AppError>
  public func validateEmailBetter() -> Swift.Bool
  public var isValidPassword: Swift.Bool {
    get
  }
  public func isValidEmail() -> Swift.Bool
  public var htmlToAttributedString: Foundation.NSAttributedString? {
    get
  }
  public var htmlToString: Swift.String {
    get
  }
  public func convertToAMPM() -> Swift.String
}
extension Foundation.Data {
  public func toString() -> Swift.String?
}
extension Swift.String {
  public var isReallyEmpty: Swift.Bool {
    get
  }
  public var boolValue: Swift.Bool {
    get
  }
  public func toDate() -> Foundation.Date?
  public func containsWhitespaceAndNewlines() -> Swift.Bool
  public func capitalizingFirstLetter() -> Swift.String
  public mutating func capitalizeFirstLetter()
  public func isValidPhoneNumber() -> Swift.Bool
  public func isValidNumeric() -> Swift.Bool
  public func isValidAlphaNumeric() -> Swift.Bool
  public func isValidAlpha() -> Swift.Bool
  public func strikeThrough() -> Foundation.NSAttributedString
}
extension ShareTripSDK.FlightBookingHistoryListVC : ShareTripSDK.StoryboardBased {
  @_Concurrency.MainActor(unsafe) public static var storyboardName: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FlightBookingHistoryListVC : UIKit.UIViewController, UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SingleCellTripCoinView : UIKit.UIView, ShareTripSDK.NibBased {
  @_Concurrency.MainActor(unsafe) public func configure(earnedTripCoin: Swift.Int, redeemedTripCoin: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol PassportVisaCellDelegate : AnyObject {
  func passportViewTapped(cellIndexPath: Foundation.IndexPath)
  func visaViewTapped(cellIndexPath: Foundation.IndexPath)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PassportVisaCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public var count: Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(passportUrl: Swift.String, visaUrl: Swift.String, cellIndexPath: Foundation.IndexPath, delegate: any ShareTripSDK.PassportVisaCellDelegate)
  @_Concurrency.MainActor(unsafe) public func configCell(cellIndexPath: Foundation.IndexPath, delegate: any ShareTripSDK.PassportVisaCellDelegate)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIColor {
  convenience public init(redInt: Swift.Int, greenInt: Swift.Int, blueInt: Swift.Int, alpha: CoreFoundation.CGFloat = 1.0)
  convenience public init(hex: Swift.Int, alpha: CoreFoundation.CGFloat = 1.0)
  public static let secondarySeparatorColor: UIKit.UIColor
  public static var appPrimary: UIKit.UIColor {
    get
  }
  public static var appPrimaryLight: UIKit.UIColor {
    get
  }
  public static var appPrimaryDark: UIKit.UIColor {
    get
  }
  public static var appGradiantStartColor: UIKit.UIColor {
    get
  }
  public static var appGradiantEndColor: UIKit.UIColor {
    get
  }
  @nonobjc public class var clearBlue: UIKit.UIColor {
    get
  }
  @nonobjc public class var skyBlue: UIKit.UIColor {
    get
  }
  @nonobjc public class var clearBlueTwo: UIKit.UIColor {
    get
  }
  @nonobjc public class var blueBlue: UIKit.UIColor {
    get
  }
  public static var appSecondary: UIKit.UIColor {
    get
  }
  public static var appSecondaryLight: UIKit.UIColor {
    get
  }
  public static var appSecondaryDark: UIKit.UIColor {
    get
  }
  public static var templateGray: UIKit.UIColor {
    get
  }
  public static var silver: UIKit.UIColor {
    get
  }
  public static var yellowOrange: UIKit.UIColor {
    get
  }
  public static var midYellowOrange: UIKit.UIColor {
    get
  }
  public static var midOrrange: UIKit.UIColor {
    get
  }
  public static var dealsRed: UIKit.UIColor {
    get
  }
  public static var starYellow: UIKit.UIColor {
    get
  }
  public static var platinum: UIKit.UIColor {
    get
  }
  public static var iceBlue: UIKit.UIColor {
    get
  }
  @nonobjc public class var offWhite: UIKit.UIColor {
    get
  }
  @nonobjc public class var offWhiteLight: UIKit.UIColor {
    get
  }
  @nonobjc public class var paleGray: UIKit.UIColor {
    get
  }
  @nonobjc public class var paleGrayTwo: UIKit.UIColor {
    get
  }
  @nonobjc public class var paleGrayThree: UIKit.UIColor {
    get
  }
  @nonobjc public class var brownishGray: UIKit.UIColor {
    get
  }
  @nonobjc public class var greyishBrown: UIKit.UIColor {
    get
  }
  @nonobjc public class var charcoalGray: UIKit.UIColor {
    get
  }
  @nonobjc public class var paleLilac: UIKit.UIColor {
    get
  }
  @nonobjc public class var whitishGray: UIKit.UIColor {
    get
  }
  @nonobjc public class var lightBlueGray: UIKit.UIColor {
    get
  }
  @nonobjc public class var lightBlueGrayTwo: UIKit.UIColor {
    get
  }
  @nonobjc public class var blueGray: UIKit.UIColor {
    get
  }
  @nonobjc public class var tintGray: UIKit.UIColor {
    get
  }
  @nonobjc public class var orangeyRed: UIKit.UIColor {
    get
  }
  @nonobjc public class var tangerine: UIKit.UIColor {
    get
  }
  @nonobjc public class var marigold: UIKit.UIColor {
    get
  }
  @nonobjc public class var marigoldTwo: UIKit.UIColor {
    get
  }
  @nonobjc public class var weirdGreen: UIKit.UIColor {
    get
  }
  @nonobjc public class var midGreen: UIKit.UIColor {
    get
  }
  @nonobjc public class var midGreenTwo: UIKit.UIColor {
    get
  }
  @nonobjc public class var robinSEgg: UIKit.UIColor {
    get
  }
  @nonobjc public class var deepSkyBlue: UIKit.UIColor {
    get
  }
  @nonobjc public class var warmBlue: UIKit.UIColor {
    get
  }
  @nonobjc public class var reddish: UIKit.UIColor {
    get
  }
  @nonobjc public class var reddishPink: UIKit.UIColor {
    get
  }
  @nonobjc public class var veryLightPink: UIKit.UIColor {
    get
  }
}
extension UIKit.UIImage {
  public func tint(with fillColor: UIKit.UIColor) -> UIKit.UIImage?
  public static func image(named: Swift.String) -> UIKit.UIImage?
}
extension UIKit.UIImage {
  public static func imageWithGradient(from beginColor: UIKit.UIColor, to endColor: UIKit.UIColor, with frame: CoreFoundation.CGRect) -> UIKit.UIImage?
}
extension UIKit.UIImage {
  public enum JPEGQuality : CoreFoundation.CGFloat {
    case lowest
    case low
    case medium
    case high
    case highest
    public init?(rawValue: CoreFoundation.CGFloat)
    public typealias RawValue = CoreFoundation.CGFloat
    public var rawValue: CoreFoundation.CGFloat {
      get
    }
  }
  public func jpeg(_ jpegQuality: UIKit.UIImage.JPEGQuality) -> Foundation.Data?
  public func getResizedImage(maxSize: CoreFoundation.CGSize = CGSize(width: 500.0, height: 500.0)) -> UIKit.UIImage
  public func getResizedImageData(maxSize: CoreFoundation.CGSize = CGSize(width: 800.0, height: 800.0)) -> Foundation.Data?
  public func resized(withPercentage percentage: CoreFoundation.CGFloat) -> UIKit.UIImage?
  public func resized(toWidth width: CoreFoundation.CGFloat) -> UIKit.UIImage?
  public func resizedTo1MB() -> UIKit.UIImage?
  public func getResizedDataTo1MB() -> Foundation.Data?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BriefInfoCardCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public func configure(countryName: Swift.String, duration: Swift.String, title: Swift.String, description: Swift.String)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PostCardCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func configure(postCardCellData: ShareTripSDK.PostCardCell.PostCardCellData)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ShareTripSDK.PostCardCell {
  public struct PostCardCellData {
    public let imageUrl: Swift.String?
    public let title: Swift.String?
    public let text: Swift.String?
    public init(imageUrl: Swift.String?, title: Swift.String?, text: Swift.String?)
  }
}
@_hasMissingDesignatedInitializers public class LocalNotifier {
  public func scheduleNotification(title: Swift.String, subtitle: Swift.String, dateComponent: Foundation.DateComponents, repeats: Swift.Bool = false)
  public func scheduleNotification(title: Swift.String, subtitle: Swift.String, timeInterval: Foundation.TimeInterval, repeats: Swift.Bool = false)
  @objc deinit
}
extension UIKit.UIToolbar {
  @_Concurrency.MainActor(unsafe) public static func toolbarPicker(title: Swift.String, tag: Swift.Int, target: Any?, doneSelector: ObjectiveC.Selector?, cancelSelector: ObjectiveC.Selector?) -> UIKit.UIToolbar
  @_Concurrency.MainActor(unsafe) public static func toolbarPicker2(title: Swift.String, tag: Swift.Int, target: Any?, doneSelector: ObjectiveC.Selector?, cancelSelector: ObjectiveC.Selector?) -> UIKit.UIToolbar
  @_Concurrency.MainActor(unsafe) public static func toolbarPicker(title: Swift.String, target: Any?, doneAction: ObjectiveC.Selector?) -> UIKit.UIToolbar
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class HorizontalLineCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func configure(lineHeight: CoreFoundation.CGFloat)
  @objc deinit
}
public class Country : Swift.Codable {
  final public let code: Swift.String
  final public let name: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public protocol InputTextCellDelegate : AnyObject {
  func inputTextDidChange(_ text: Swift.String?, indexPath: Foundation.IndexPath?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class InputTextCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public let inputTextField: UIKit.UITextField
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any ShareTripSDK.InputTextCellDelegate)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func configure(text: Swift.String?, placeholder: Swift.String, indexPath: Foundation.IndexPath, delegate: any ShareTripSDK.InputTextCellDelegate)
  @objc deinit
}
extension ShareTripSDK.InputTextCell : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FareCardSingleLineCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(currency: Swift.String, orginPrice: Swift.Double, discountPrice: Swift.Double, discount: Swift.Double, refundable: Swift.String)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Foundation.Data {
  public var prettyPrintedJSONString: Foundation.NSString? {
    get
  }
}
extension UIKit.UITableViewCell : ShareTripSDK.ReusableView {
}
extension UIKit.UICollectionViewCell : ShareTripSDK.ReusableView {
}
extension UIKit.UITableViewHeaderFooterView : ShareTripSDK.ReusableView {
}
public enum TitleType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case mr
  case ms
  case master
  case miss
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias AllCases = [ShareTripSDK.TitleType]
  public typealias RawValue = Swift.String
  public static var allCases: [ShareTripSDK.TitleType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) public func addCharacterSpacing(kernValue: Swift.Double = 1.15)
}
@objc public protocol InputSource {
  @objc func load(to imageView: UIKit.UIImageView, with callback: @escaping (_ image: UIKit.UIImage?) -> Swift.Void)
  @objc optional func cancelLoad(on imageView: UIKit.UIImageView)
}
@objc @objcMembers open class ImageSource : ObjectiveC.NSObject, ShareTripSDK.InputSource {
  @objc public init(image: UIKit.UIImage)
  @objc @available(*, deprecated, message: "Use `BundleImageSource` instead")
  public init?(imageString: Swift.String)
  @objc public func load(to imageView: UIKit.UIImageView, with callback: @escaping (UIKit.UIImage?) -> Swift.Void)
  @objc deinit
}
@objc @objcMembers open class BundleImageSource : ObjectiveC.NSObject, ShareTripSDK.InputSource {
  @objc public init(imageString: Swift.String)
  @objc public func load(to imageView: UIKit.UIImageView, with callback: @escaping (UIKit.UIImage?) -> Swift.Void)
  @objc deinit
}
@objc @objcMembers open class FileImageSource : ObjectiveC.NSObject, ShareTripSDK.InputSource {
  @objc public init(path: Swift.String)
  @objc public func load(to imageView: UIKit.UIImageView, with callback: @escaping (UIKit.UIImage?) -> Swift.Void)
  @objc deinit
}
@objc public class KingfisherSource : ObjectiveC.NSObject, ShareTripSDK.InputSource {
  public var url: Foundation.URL
  public var placeholder: UIKit.UIImage?
  public var options: Kingfisher.KingfisherOptionsInfo?
  public init(url: Foundation.URL, placeholder: UIKit.UIImage? = nil, options: Kingfisher.KingfisherOptionsInfo? = nil)
  public init?(urlString: Swift.String, placeholder: UIKit.UIImage? = nil, options: Kingfisher.KingfisherOptionsInfo? = nil)
  @objc public func load(to imageView: UIKit.UIImageView, with callback: @escaping (UIKit.UIImage?) -> Swift.Void)
  @objc public func cancelLoad(on imageView: UIKit.UIImageView)
  @objc deinit
}
public struct GPStarPhoneCheckResponse : Swift.Codable {
  public let loyaltyStatus: Swift.String?
  public let success: Swift.Bool?
  public let otpExpirationInMin: Swift.Double?
  public init(loyaltyStatus: Swift.String?, success: Swift.Bool?, otpExpirationInMin: Swift.Double?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GPStarOTPCheckResponse : Swift.Codable {
  public let success: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class GradientView : UIKit.UIView {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var startColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var endColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var startLocation: Swift.Double {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var endLocation: Swift.Double {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var horizontalMode: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var diagonalMode: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
public protocol ItemShareable {
  func share(for serviceType: ShareTripSDK.ServiceType)
}
extension ShareTripSDK.ItemShareable where Self : UIKit.UIViewController {
  public func share(for serviceType: ShareTripSDK.ServiceType)
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (ShareTripSDK.Reachability) -> ()
  public typealias NetworkUnreachable = (ShareTripSDK.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: ShareTripSDK.Reachability.NetworkStatus, b: ShareTripSDK.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    @available(*, deprecated, renamed: "unavailable")
    case none
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: ShareTripSDK.Reachability.Connection, b: ShareTripSDK.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: ShareTripSDK.Reachability.NetworkReachable?
  public var whenUnreachable: ShareTripSDK.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: ShareTripSDK.Reachability.Connection {
    get
  }
  public var connection: ShareTripSDK.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension ShareTripSDK.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
public enum FlightSearchRows : Swift.Equatable {
  case flightSearch
  case exploreDestinations
  case promotionalBanners
  case offersAndHistory
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ShareTripSDK.FlightSearchRows, b: ShareTripSDK.FlightSearchRows) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct FlightSearchInfo {
}
public enum FlightRouteType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case round
  case oneWay
  case multiCity
  public init(stringValue: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public init(intValue: Swift.Int)
  public var intValue: Swift.Int {
    get
  }
  public var title: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [ShareTripSDK.FlightRouteType]
  public typealias RawValue = Swift.String
  public static var allCases: [ShareTripSDK.FlightRouteType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum FlightScheduledType : Swift.Int {
  case departure
  case arrival
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum FlightClass : Swift.String, Swift.Codable, Swift.CaseIterable {
  case economy
  case premiumEconomy
  case business
  case firstClass
  public init(from decoder: any Swift.Decoder) throws
  public init(intValue: Swift.Int)
  public var intValue: Swift.Int {
    get
  }
  public var title: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [ShareTripSDK.FlightClass]
  public typealias RawValue = Swift.String
  public static var allCases: [ShareTripSDK.FlightClass] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct FlightFilterData : Swift.Encodable {
  public var price: ShareTripSDK.FlightPriceRange?
  public var airlines: [Swift.String]?
  public var stoppage: [Swift.Int]?
  public var layover: [Swift.String]?
  public var weight: [Swift.Int]?
  public var departTimeSlot: Swift.String?
  public var returnTimeSlot: Swift.String?
  public var isRefundable: [Swift.Int]?
  public var sort: Swift.String?
  public init()
  public init(airlines: [Swift.String]?)
  public func encode(to encoder: any Swift.Encoder) throws
  public func hasAtleastOneFilter() -> Swift.Bool
  public mutating func reset()
}
public protocol PriceRangeCellDelegate : AnyObject {
  func rangeSeekSliderDidChange(minValue: CoreFoundation.CGFloat, maxValue: CoreFoundation.CGFloat)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PriceRangeCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any ShareTripSDK.PriceRangeCellDelegate)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setupView()
  @_Concurrency.MainActor(unsafe) public func configure(priceRange: ShareTripSDK.FilterPriceRange)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ShareTripSDK.PriceRangeCell : ShareTripSDK.RangeSeekSliderDelegate {
  @_Concurrency.MainActor(unsafe) public func rangeSeekSlider(_ slider: ShareTripSDK.RangeSeekSlider, didChange minValue: CoreFoundation.CGFloat, maxValue: CoreFoundation.CGFloat)
}
public struct TNC : Swift.Codable {
  public let common: ShareTripSDK.TOSBodyData, loyalty: ShareTripSDK.TOSBodyData, spin: ShareTripSDK.TOSBodyData
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FAQ : Swift.Codable {
  public let commonOverview: ShareTripSDK.TOSBodyData, flight: ShareTripSDK.TOSBodyData, holiday: ShareTripSDK.TOSBodyData, hotel: ShareTripSDK.TOSBodyData
  public let tour: ShareTripSDK.TOSBodyData, transfer: ShareTripSDK.TOSBodyData, tripCoin: ShareTripSDK.TOSBodyData
  public init(commonOverview: ShareTripSDK.TOSBodyData, flight: ShareTripSDK.TOSBodyData, holiday: ShareTripSDK.TOSBodyData, hotel: ShareTripSDK.TOSBodyData, tour: ShareTripSDK.TOSBodyData, transfer: ShareTripSDK.TOSBodyData, tripCoin: ShareTripSDK.TOSBodyData)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TOSBodyData : Swift.Codable {
  public let body: Swift.String, flag: Swift.String, title: Swift.String
  public init(body: Swift.String, flag: Swift.String, title: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SingleLineInfoCardCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setHighlighted(_ highlighted: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(title: Swift.String)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Swift.Int {
  public var boolValue: Swift.Bool {
    get
  }
  public func withCommas() -> Swift.String
}
extension Swift.Int64 {
  public func withCommas() -> Swift.String
}
extension Swift.Double {
  public func withCommas() -> Swift.String
}
public struct FlightsRequiredData {
  public var searchId: Swift.String
  public var sessionId: Swift.String
  public var sequenceCode: Swift.String
  public var currencyType: Swift.String
  public var lastAirportIata: Swift.String
  public var firstAirportIata: Swift.String
  public var shareTripCoin: Swift.Int
  public var earningTripCoin: Swift.Int
}
public class TreasureBoxCoin : Swift.Codable {
  final public let passed: Swift.String
  final public let remaining: Swift.String
  final public let format: Swift.String
  final public let status: Swift.String
  public func totalWaitTime() -> Swift.Double
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class CoinSettings : Swift.Codable {
  final public let registrationEarnCoin: Swift.Int
  final public let referCoin: Swift.Int
  final public let treasureBoxCoin: Swift.Int
  final public let minCostPlayWheel: Swift.Int
  final public let maxTripCoinValue: Swift.Int
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public class CustomFloatingLayout : FloatingPanel.FloatingPanelLayout {
  public init()
  @objc public var position: FloatingPanel.FloatingPanelPosition {
    @objc get
  }
  @objc public var initialState: FloatingPanel.FloatingPanelState {
    @objc get
  }
  @objc public var anchors: [FloatingPanel.FloatingPanelState : any FloatingPanel.FloatingPanelLayoutAnchoring] {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class LeftRightPriceInfoCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public func configure(title: Swift.String, amount: Swift.Double)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class STLog {
  public static var dateFormat: Swift.String
  public static var dateFormatter: Foundation.DateFormatter {
    get
  }
  public enum LogEvent : Swift.String {
    case error
    case info
    case debug
    case warn
    case severe
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public class func error(_ object: Any, fileName: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column, functionName: Swift.String = #function)
  public class func info(_ object: Any, fileName: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column, functionName: Swift.String = #function)
  public class func debug(_ object: Any, fileName: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column, functionName: Swift.String = #function)
  public class func warn(_ object: Any, fileName: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column, functionName: Swift.String = #function)
  public class func severe(_ object: Any, fileName: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column, functionName: Swift.String = #function)
  @objc deinit
}
extension Foundation.Date {
  public func toString() -> Swift.String
}
public struct InfoUploadCellData : ShareTripSDK.ConfigurableTableViewCellData {
  public let hasPassportCopy: Swift.Bool
  public let hasVisaCopy: Swift.Bool
  public let passportHidden: Swift.Bool
  public let visaHidden: Swift.Bool
  public init(hasPassportCopy: Swift.Bool, hasVisaCopy: Swift.Bool, passportHidden: Swift.Bool, visaHidden: Swift.Bool)
  public init(hasPassportCopy: Swift.Bool, hasVisaCopy: Swift.Bool)
  public init(hasPassportCopy: Swift.Bool, hasVisaCopy: Swift.Bool, passportHidden: Swift.Bool)
  public init(hasPassportCopy: Swift.Bool, hasVisaCopy: Swift.Bool, visaHidden: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SearchCountryTVCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configureCell(with countryName: Swift.String, _ visaRequirement: Swift.String, and indexPath: Swift.Int)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SingleLabelInfoTVCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func config(labelText: Foundation.NSAttributedString, backgroundColor: UIKit.UIColor)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum IndicatorType {
  case green, yellow, red, unknown
  public var color: UIKit.UIColor {
    get
  }
  public static func == (a: ShareTripSDK.IndicatorType, b: ShareTripSDK.IndicatorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class Point : Swift.Codable {
  final public let shared: Swift.Int
  final public let shareLink: Swift.String
  final public let earning: Swift.Int
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum ServiceType : Swift.String, Swift.Codable {
  case hotel
  case flight
  case tour
  case transfer
  case package
  case visa
  case bus
  public var title: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class RetryInfoCardCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(title: Swift.String)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SearchBar : UIKit.UISearchBar {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ShareTripSDK.SDDateSelectionCell {
  @_hasMissingDesignatedInitializers public class Callback {
    public var didSelectedDate: (Foundation.Date) -> Swift.Void
    @objc deinit
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SDDateSelectionCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public let callback: ShareTripSDK.SDDateSelectionCell.Callback
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
extension ShareTripSDK.SDDateSelectionCell : ShareTripSDK.ConfigurableTableViewCellDataContainer {
  public typealias AccecptableViewModelType = ShareTripSDK.SDDateSelectionCellViewModel
}
extension ShareTripSDK.SDDateSelectionCell : ShareTripSDK.ConfigurableTableViewCell {
  @_Concurrency.MainActor(unsafe) public func configure(viewModel: any ShareTripSDK.ConfigurableTableViewCellData)
}
extension ShareTripSDK.SDDateSelectionCell : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
}
public struct Period : Swift.Codable {
  public let departureTime: Swift.String
  public let triplePerPax: Swift.Int?, doublePerPax: Swift.Int?
  public let periodFrom: Swift.String?
  public let id: Swift.Int?
  public let specificDays: Swift.String?
  public let category: Swift.String?
  public let singlePerPax: Swift.Int?
  public let departs: ShareTripSDK.Period.Departs?
  public let child7To12: Swift.Int?, quadPerPax: Swift.Int?
  public let periodTo: Swift.String?
  public let child3To6: Swift.Int?, infant: Swift.Int?, twinPerPax: Swift.Int?
  public let package_periods_hotels: [ShareTripSDK.PeriodHotel]
  public let currency: Swift.String?
  public let singlePerPaxDiscountPrice: Swift.Int?, triplePerPaxDiscountPrice: Swift.Int?
  public let quadPerPaxDiscountPrice: Swift.Int?, infantDiscountPrice: Swift.Int?
  public let twinPerPaxDiscountPrice: Swift.Int?, doublePerPaxDiscountPrice: Swift.Int?, child3To6DiscountPrice: Swift.Int?, child7To12DiscountPrice: Swift.Int?
  public init(departureTime: Swift.String, triplePerPax: Swift.Int?, doublePerPax: Swift.Int?, periodFrom: Swift.String?, id: Swift.Int?, specificDays: Swift.String?, category: Swift.String?, singlePerPax: Swift.Int?, departs: ShareTripSDK.Period.Departs?, child7To12: Swift.Int?, quadPerPax: Swift.Int?, periodTo: Swift.String?, child3To6: Swift.Int?, infant: Swift.Int?, twinPerPax: Swift.Int?, package_periods_hotels: [ShareTripSDK.PeriodHotel], currency: Swift.String?, singlePerPaxDiscountPrice: Swift.Int?, triplePerPaxDiscountPrice: Swift.Int?, quadPerPaxDiscountPrice: Swift.Int?, infantDiscountPrice: Swift.Int?, twinPerPaxDiscountPrice: Swift.Int?, doublePerPaxDiscountPrice: Swift.Int?, child3To6DiscountPrice: Swift.Int?, child7To12DiscountPrice: Swift.Int?)
  public enum Departs : Swift.String, Swift.Codable {
    case everyDay
    case specificDay
    case unknown
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PeriodHotel : Swift.Codable {
  public let cityName: Swift.String
  public let id: Swift.Int
  public let hotelName: Swift.String, hotelId: Swift.String
  public init(cityName: Swift.String, id: Swift.Int, hotelName: Swift.String, hotelId: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class STLocation : Swift.Codable {
  final public let lat: Swift.Double
  final public let lon: Swift.Double
  public init(lat: Swift.Double, lon: Swift.Double)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public protocol STAnalyticsType {
}
public protocol STAnalyticsEvent {
  typealias Payload = [Swift.String : any ShareTripSDK.STAnalyticsType]
  var name: Swift.String { get }
  var payload: Self.Payload? { get }
}
public protocol STAnalyticsEngine {
  func log(_ event: any ShareTripSDK.STAnalyticsEvent)
}
public class FirebaseAnalyticsEngine : ShareTripSDK.STAnalyticsEngine {
  public init()
  public func log(_ event: any ShareTripSDK.STAnalyticsEvent)
  @objc deinit
}
open class AnalyticsManager {
  public init(_ engines: [any ShareTripSDK.STAnalyticsEngine])
  public func log(_ event: any ShareTripSDK.STAnalyticsEvent)
  @objc deinit
}
extension Swift.String : ShareTripSDK.STAnalyticsType {
}
extension Swift.Int : ShareTripSDK.STAnalyticsType {
}
extension Swift.UInt : ShareTripSDK.STAnalyticsType {
}
extension Swift.Double : ShareTripSDK.STAnalyticsType {
}
extension Swift.Float : ShareTripSDK.STAnalyticsType {
}
extension Swift.Bool : ShareTripSDK.STAnalyticsType {
}
extension Foundation.Date : ShareTripSDK.STAnalyticsType {
}
extension Foundation.URL : ShareTripSDK.STAnalyticsType {
}
extension Foundation.NSNull : ShareTripSDK.STAnalyticsType {
}
extension Swift.Array : ShareTripSDK.STAnalyticsType {
}
extension Swift.Dictionary : ShareTripSDK.STAnalyticsType {
}
@objc @_inheritsConvenienceInitializers public class BackButton : ObjectiveC.NSObject {
  public class func createWithText(_ text: Swift.String, color: UIKit.UIColor, target: Swift.AnyObject?, action: ObjectiveC.Selector) -> [UIKit.UIBarButtonItem]
  public class func createWithImage(_ image: UIKit.UIImage, color: UIKit.UIColor, target: Swift.AnyObject?, action: ObjectiveC.Selector) -> [UIKit.UIBarButtonItem]
  @objc override dynamic public init()
  @objc deinit
}
public protocol SelectedCountryVCDelegate : AnyObject {
  func userSelectedCountry(selectedCountry: ShareTripSDK.Country)
}
public struct FlightDetailsRequest : Swift.Encodable {
  public let searchId: Swift.String
  public let sessionId: Swift.String
  public let sequenceCode: Swift.String
  public init(searchId: Swift.String, sessionId: Swift.String, sequenceCode: Swift.String)
  public var params: [Swift.String : Any] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum Environment {
  case live
  case staging
  public static func == (a: ShareTripSDK.Environment, b: ShareTripSDK.Environment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PriceBreakdownFareCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(title: Swift.String, fare: Swift.Double)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum FileType {
  case passport
  case visa
  public static func == (a: ShareTripSDK.FileType, b: ShareTripSDK.FileType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class InputTextSelectionCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public var didSelectText: (Swift.String?, Swift.Int) -> Swift.Void
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
extension ShareTripSDK.InputTextSelectionCell : ShareTripSDK.ConfigurableTableViewCellDataContainer {
  public typealias AccecptableViewModelType = ShareTripSDK.InputTextSelectionCellData
}
extension ShareTripSDK.InputTextSelectionCell : ShareTripSDK.ConfigurableTableViewCell {
  @_Concurrency.MainActor(unsafe) public func configure(viewModel: any ShareTripSDK.ConfigurableTableViewCellData)
}
extension ShareTripSDK.InputTextSelectionCell : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
}
public protocol ReusableView {
  static var reuseID: Swift.String { get }
}
extension ShareTripSDK.ReusableView {
  public static var reuseID: Swift.String {
    get
  }
}
public class Airport : Swift.Codable, Swift.Equatable {
  final public let iata: Swift.String
  final public let name: Swift.String
  final public let city: Swift.String?
  required public init(from decoder: any Swift.Decoder) throws
  public static func == (lhs: ShareTripSDK.Airport, rhs: ShareTripSDK.Airport) -> Swift.Bool
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct RevalidatePrice {
  public struct Request : Swift.Codable {
    public var searchId: Swift.String
    public var sequenceCode: Swift.String
    public var sessionId: Swift.String
    public var params: [Swift.String : Any] {
      get
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Response : Swift.Codable {
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct GPStarRequest : Swift.Encodable {
  public let mobileNumber: Swift.String
  public let otp: Swift.String?
  public init(mobileNumber: Swift.String, otp: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class LeftRightInfoCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public let leftLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any ShareTripSDK.SliderCellDelegate)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(leftValue: Swift.String, rightValue: Swift.String)
  @objc deinit
}
public enum paymentGatewayType : Swift.String {
  case visa
  case flight
  case hotel
  case transfer
  case tour
  case holiday
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum paymentGatewayCurrency : Swift.String, Swift.Codable {
  case all
  case usd
  case bdt
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct CovidTestInfo : Swift.Codable {
  public let code: Swift.String
  public let optionsCode: Swift.String
  public var address: Swift.String
  public var selfTest: Swift.Bool
  public init()
  public init(code: Swift.String, optionsCode: Swift.String, address: Swift.String, selfTest: Swift.Bool)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class EditableContactCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setupView()
  @_Concurrency.MainActor(unsafe) public func configure(imageName: Swift.String, titleText: Swift.String, subTitleText: Swift.String?, editingMode: Swift.Bool, cellIndexPath: Foundation.IndexPath, callbackClosure: ((_ cellIndexPath: Foundation.IndexPath, _ value: Swift.String?) -> Swift.Void)?)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol SliderFilterCellDelegate : AnyObject {
  func sliderDidChange(_ value: Swift.Float, indexPath: Foundation.IndexPath)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SliderFilterCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func configure(currentValue: Swift.Float?, indexPath: Foundation.IndexPath, delegate: any ShareTripSDK.SliderFilterCellDelegate)
  @objc deinit
}
public class FlightPriceRange : Swift.Codable {
  final public let max: Swift.Int, min: Swift.Int
  public init(min: Swift.Int, max: Swift.Int)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class BaseResponse : Swift.Codable {
  final public let code: ShareTripSDK.APIResponseCode
  final public let message: Swift.String
  final public let errors: [Swift.String]?
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@_inheritsConvenienceInitializers public class Response<T> : ShareTripSDK.BaseResponse where T : Swift.Decodable {
  final public let response: T?
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers public class ResponseList<T> : ShareTripSDK.BaseResponse where T : Swift.Decodable, T : Swift.Encodable {
  final public let response: [T]?
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public class PackageBookingResponse : Swift.Codable {
  final public let url: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers public class FlightBookingResponse : ShareTripSDK.BaseResponse {
  public var response: Swift.String?
  public var newResponse: ShareTripSDK.BookingUrlResponse?
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public struct BookingUrlResponse : Swift.Decodable {
  public let paymentUrl: Swift.String?, successUrl: Swift.String?, cancelUrl: Swift.String?, declineUrl: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
public class UploadFileResponse : Swift.Codable {
  final public let path: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers public class ShareResponse : ShareTripSDK.BaseResponse {
  final public let response: Swift.String
  required public init(from decoder: any Swift.Decoder) throws
  public var earnedCoin: Swift.Int {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class GDCheckbox : UIKit.UIControl {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var containerWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var containerCornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var containerColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var containerFillColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var checkWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var checkColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var shouldFillContainer: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var shouldAnimate: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var isOn: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var isSquare: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var isRadiobox: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var isCircular: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc deinit
}
extension Foundation.Date {
  public init?(fromString string: Swift.String, format: ShareTripSDK.DateFormatType, timeZone: ShareTripSDK.TimeZoneType = .local, locale: Foundation.Locale = Foundation.Locale.current)
  public func toString(style: ShareTripSDK.DateStyleType = .short) -> Swift.String
  public func toString(format: ShareTripSDK.DateFormatType, timeZone: ShareTripSDK.TimeZoneType = .local, locale: Foundation.Locale = Locale.current) -> Swift.String
  public func toString(dateStyle: Foundation.DateFormatter.Style, timeStyle: Foundation.DateFormatter.Style, isRelative: Swift.Bool = false, timeZone: Foundation.TimeZone = Foundation.NSTimeZone.local, locale: Foundation.Locale = Locale.current) -> Swift.String
  public func toStringWithRelativeTime(strings: [ShareTripSDK.RelativeTimeStringType : Swift.String]? = nil) -> Swift.String
  public func compare(_ comparison: ShareTripSDK.DateComparisonType) -> Swift.Bool
  public func adjust(_ component: ShareTripSDK.DateComponentType, offset: Swift.Int) -> Foundation.Date
  public func adjust(hour: Swift.Int?, minute: Swift.Int?, second: Swift.Int?, day: Swift.Int? = nil, month: Swift.Int? = nil) -> Foundation.Date
  public func dateFor(_ type: ShareTripSDK.DateForType, calendar: Foundation.Calendar = Calendar(identifier: .gregorian)) -> Foundation.Date
  public func since(_ date: Foundation.Date, in component: ShareTripSDK.DateComponentType) -> Swift.Int64
  public func component(_ component: ShareTripSDK.DateComponentType) -> Swift.Int?
  public func numberOfDaysInMonth() -> Swift.Int
  public func firstDayOfWeek() -> Swift.Int
  public func lastDayOfWeek() -> Swift.Int
}
public enum DateFormatType : Swift.CaseIterable {
  public static var allCases: [ShareTripSDK.DateFormatType] {
    get
  }
  public typealias AllCases = [ShareTripSDK.DateFormatType]
  case isoYear
  case isoYearMonth
  case isoDateWithSlash
  case isoDate
  case isoDateTime
  case isoDateTimeSec
  case isoDateTimeMilliSec
  case isoDateCustomTimeMilliSec
  case dotNet
  case rss
  case altRSS
  case httpHeader
  case standard
  case shortDate
  case shortDateWithdatequote
  case shortDateFullYear
  case isoDateTimeWithoutOffset
  case timeIn12Hr
  case custom(Swift.String)
  public var stringFormat: Swift.String {
    get
  }
}
extension ShareTripSDK.DateFormatType : Swift.Equatable {
  public static func == (lhs: ShareTripSDK.DateFormatType, rhs: ShareTripSDK.DateFormatType) -> Swift.Bool
}
public enum TimeZoneType {
  case local, `default`, utc, custom(Swift.Int)
}
public enum RelativeTimeStringType {
  case nowPast, nowFuture, secondsPast, secondsFuture, oneMinutePast, oneMinuteFuture, minutesPast, minutesFuture, oneHourPast, oneHourFuture, hoursPast, hoursFuture, oneDayPast, oneDayFuture, daysPast, daysFuture, oneWeekPast, oneWeekFuture, weeksPast, weeksFuture, oneMonthPast, oneMonthFuture, monthsPast, monthsFuture, oneYearPast, oneYearFuture, yearsPast, yearsFuture
  public static func == (a: ShareTripSDK.RelativeTimeStringType, b: ShareTripSDK.RelativeTimeStringType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DateComparisonType {
  case isToday
  case isTomorrow
  case isYesterday
  case isSameDay(as: Foundation.Date)
  case isThisWeek
  case isNextWeek
  case isLastWeek
  case isSameWeek(as: Foundation.Date)
  case isThisMonth
  case isNextMonth
  case isLastMonth
  case isSameMonth(as: Foundation.Date)
  case isThisYear
  case isNextYear
  case isLastYear
  case isSameYear(as: Foundation.Date)
  case isInTheFuture
  case isInThePast
  case isEarlier(than: Foundation.Date)
  case isLater(than: Foundation.Date)
  case isWeekday
  case isWeekend
}
public enum DateComponentType {
  case second, minute, hour, day, weekday, nthWeekday, week, month, year
  public static func == (a: ShareTripSDK.DateComponentType, b: ShareTripSDK.DateComponentType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DateForType {
  case startOfDay, endOfDay, startOfWeek, endOfWeek, startOfMonth, endOfMonth, tomorrow, yesterday, nearestMinute(minute: Swift.Int), nearestHour(hour: Swift.Int)
}
public enum DateStyleType {
  case short
  case medium
  case long
  case full
  case ordinalDay
  case weekday
  case shortWeekday
  case veryShortWeekday
  case month
  case shortMonth
  case veryShortMonth
  public static func == (a: ShareTripSDK.DateStyleType, b: ShareTripSDK.DateStyleType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Foundation.Date {
  public static func validateDateOfBirth(_ dob: Foundation.Date, tillDate: Foundation.Date, of travellerType: ShareTripSDK.TravellerType) -> Swift.Result<Swift.Void, ShareTripSDK.AppError>
}
public protocol InfoSelectionCellDelegate : AnyObject {
  func infoSelectionChanged(selectedIndex: Swift.Int, selectedValue: Swift.String, indexPath: Foundation.IndexPath)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class InfoSelectionCell : UIKit.UITableViewCell {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var typeImageView: UIKit.UIImageView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var titleLabel: UIKit.UILabel!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var infoTextField: ShareTripSDK.NoSelectTextField!
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any ShareTripSDK.InfoSelectionCellDelegate)?
  @_Concurrency.MainActor(unsafe) public var selectedPickerIndex: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var pickerData: [Swift.String] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setupCell()
  @_Concurrency.MainActor(unsafe) public func configure(indexPath: Foundation.IndexPath)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum AppStoreReviewManager {
  public static let productURL: Foundation.URL
  public static let minimumReviewWorthyActionCount: Swift.Int
  public static func requestReviewIfAppropriate(host: UIKit.UIViewController?, force: Swift.Bool = false)
  public static func rateAppWithAppStore()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class RightButtonHeaderView : UIKit.UITableViewHeaderFooterView {
  @_Concurrency.MainActor(unsafe) final public let titleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let rightButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @objc deinit
}
extension Foundation.UserDefaults {
  public enum Key : Swift.String {
    case reviewWorthyActionCount
    case lastReviewRequestAppVersion
    case reviewRequestShownCount
    case reviewRequestFirstShown
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func integer(forKey key: Foundation.UserDefaults.Key) -> Swift.Int
  public func string(forKey key: Foundation.UserDefaults.Key) -> Swift.String?
  public func date(forKey key: Foundation.UserDefaults.Key) -> Foundation.Date?
  public func set(_ integer: Swift.Int, forKey key: Foundation.UserDefaults.Key)
  public func set(_ object: Any?, forKey key: Foundation.UserDefaults.Key)
}
public struct VerifyInfoData {
  public var title: Swift.String
  public var subTitle: Swift.String
  public var image: Swift.String
  public init(title: Swift.String, subTitle: Swift.String, image: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class InfoDetailCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(infoDataOne: ShareTripSDK.VerifyInfoData?, infoDataTwo: ShareTripSDK.VerifyInfoData?)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor(unsafe) public class var topViewController: UIKit.UIViewController? {
    get
  }
}
public struct SingleInfoCellData : ShareTripSDK.ConfigurableTableViewCellData {
  public var titlte: Swift.String
  public var isValid: Swift.Bool
  public init(titlte: Swift.String, isValid: Swift.Bool)
}
public enum PriceRangeType {
  case cheap, moderate, expensive, unknown
  public var title: Swift.String {
    get
  }
  public static func == (a: ShareTripSDK.PriceRangeType, b: ShareTripSDK.PriceRangeType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class FlightPriceIndicatorViewModel {
  public var isLoading: ShareTripSDK.Observable<Swift.Bool> {
    get
  }
  public init(srcCode: Swift.String, destCode: Swift.String, routeType: ShareTripSDK.FlightRouteType)
  public var searchingDateOffset: Swift.Int {
    get
  }
  public typealias PriceRangeLoadCallBack = () -> Swift.Void
  public func loadPriceIndicator(onCompletion: ShareTripSDK.FlightPriceIndicatorViewModel.PriceRangeLoadCallBack?)
  public func priceRange(for rangeType: ShareTripSDK.PriceRangeType) -> (Swift.Double, Swift.Double)?
  public func priceRangeType(for date: Foundation.Date) -> ShareTripSDK.PriceRangeType?
  public func filter(_ apply: Swift.Bool)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Helpers {
  public class func generateHtml(content: Swift.String, style: Swift.String = "body {text-align: justify; margin: 6px 12px 6px 12px;}") -> Swift.String
  public class func generateHtml(content: Swift.String, header: Swift.String) -> Swift.String
  public class func closedRange(startingValue: Swift.Int, length: Swift.Int) -> Swift.ClosedRange<Swift.Int>
  public static func convertToArrayOfDictionary(text: Swift.String) -> Any?
  public static func decoder(jwtToken jwt: Swift.String) -> [Swift.String : Any]
  public static func decodeJWTPart(_ value: Swift.String) -> [Swift.String : Any]?
  public static func base64UrlDecode(_ value: Swift.String) -> Foundation.Data?
  public static func loadJSON(jsonFileName name: Swift.String) -> Foundation.Data?
  public static func convertJsonToString(json: SwiftyJSON.JSON) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Utility {
  public static let months: [Swift.String]
  public class func componentFromDate(date: Foundation.Date) -> Foundation.DateComponents
  @objc deinit
}
public enum DiscountType : Swift.String, Swift.Codable {
  case flat
  case percentage
  case unknown
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @objcMembers @_Concurrency.MainActor(unsafe) open class ZoomAnimatedTransitioningDelegate : ObjectiveC.NSObject, UIKit.UIViewControllerTransitioningDelegate {
  @objc @_Concurrency.MainActor(unsafe) open var referenceImageView: UIKit.UIImageView?
  @objc @_Concurrency.MainActor(unsafe) weak open var referenceSlideshowView: ShareTripSDK.ImageSlideshow?
  @objc @_Concurrency.MainActor(unsafe) open var slideToDismissEnabled: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public init(slideshowView: ShareTripSDK.ImageSlideshow, slideshowController: ShareTripSDK.FullScreenSlideshowViewController)
  @objc @_Concurrency.MainActor(unsafe) public init(imageView: UIKit.UIImageView, slideshowController: ShareTripSDK.FullScreenSlideshowViewController)
  @_Concurrency.MainActor(unsafe) @objc open func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
  @_Concurrency.MainActor(unsafe) @objc open func animationController(forDismissed dismissed: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
  @_Concurrency.MainActor(unsafe) @objc open func interactionControllerForPresentation(using animator: any UIKit.UIViewControllerAnimatedTransitioning) -> (any UIKit.UIViewControllerInteractiveTransitioning)?
  @_Concurrency.MainActor(unsafe) @objc open func interactionControllerForDismissal(using animator: any UIKit.UIViewControllerAnimatedTransitioning) -> (any UIKit.UIViewControllerInteractiveTransitioning)?
  @objc deinit
}
extension ShareTripSDK.ZoomAnimatedTransitioningDelegate : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
public struct InputTextFieldCellData : ShareTripSDK.ConfigurableTableViewCellData {
  public let title: Swift.String
  public let text: Swift.String
  public let placeholder: Swift.String
  public let imageString: Swift.String
  public let keyboardType: UIKit.UIKeyboardType
  public let textContenType: UIKit.UITextContentType?
  public var state: ShareTripSDK.ValidationState
  public init(title: Swift.String, text: Swift.String, placeholder: Swift.String, imageString: Swift.String, keyboardType: UIKit.UIKeyboardType = .default, textContenType: UIKit.UITextContentType? = nil, state: ShareTripSDK.ValidationState = .normal)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func roundCorners(_ corners: UIKit.UIRectCorner, radius: CoreFoundation.CGFloat, frame: CoreFoundation.CGRect? = nil)
  @_Concurrency.MainActor(unsafe) public func roundBottomCorners(radius: CoreFoundation.CGFloat, frame: CoreFoundation.CGRect? = nil)
  @_Concurrency.MainActor(unsafe) public func roundRightCorners(radius: CoreFoundation.CGFloat, frame: CoreFoundation.CGRect? = nil)
  @_Concurrency.MainActor(unsafe) public func roundTopCorners(radius: CoreFoundation.CGFloat, frame: CoreFoundation.CGRect? = nil)
  @_Concurrency.MainActor(unsafe) public func roundTopLeftAndBottomRightCorners(radius: CoreFoundation.CGFloat, frame: CoreFoundation.CGRect? = nil)
  @_Concurrency.MainActor(unsafe) public func rotate(_ toValue: CoreFoundation.CGFloat, duration: CoreFoundation.CFTimeInterval = 0.2)
  @_Concurrency.MainActor(unsafe) public func fillSuperview(padding: UIKit.UIEdgeInsets = .zero)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func setShadowWithColor(color: UIKit.UIColor?, opacity: Swift.Float?, offset: CoreFoundation.CGSize?, radius: CoreFoundation.CGFloat, viewCornerRadius: CoreFoundation.CGFloat?)
  @_Concurrency.MainActor(unsafe) public func setDropShadow(shadowOpacity: Swift.Float, shadowRadius: CoreFoundation.CGFloat, shadowOffset: CoreFoundation.CGSize, shadowColor: CoreGraphics.CGColor)
  @_Concurrency.MainActor(unsafe) public func subviewsRecursive() -> [UIKit.UIView]
}
extension UIKit.UISearchBar {
  @_Concurrency.MainActor(unsafe) public var searchField: UIKit.UITextField? {
    get
  }
}
extension QuartzCore.CALayer {
  public func addZeplinShadow(color: UIKit.UIColor = .black, alpha: Swift.Float = 0.5, x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 3, blur: CoreFoundation.CGFloat = 6, spread: CoreFoundation.CGFloat = 0)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func addDashedBorder(with color: UIKit.UIColor, width: CoreFoundation.CGFloat, radius: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func addZeplinShadow(color: UIKit.UIColor = .black, alpha: Swift.Float = 0.5, x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 3, blur: CoreFoundation.CGFloat = 6, spread: CoreFoundation.CGFloat = 0)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var parentViewController: UIKit.UIViewController? {
    get
  }
}
extension UIKit.UIView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func applyGradient(colours: [UIKit.UIColor]) -> QuartzCore.CAGradientLayer
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func applyGradient(colours: [UIKit.UIColor], locations: [Foundation.NSNumber]?) -> QuartzCore.CAGradientLayer
}
extension SwiftKeychainWrapper.KeychainWrapper.Key {
  public static let authToken: SwiftKeychainWrapper.KeychainWrapper.Key
  public static let user: SwiftKeychainWrapper.KeychainWrapper.Key
  public static let appleAuthorizationCode: SwiftKeychainWrapper.KeychainWrapper.Key
}
extension SwiftKeychainWrapper.KeychainWrapper {
  @discardableResult
  public func set<T>(_ value: T?, forKey key: Swift.String, withAccessibility accessibility: SwiftKeychainWrapper.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Bool where T : Swift.Decodable, T : Swift.Encodable
  public func codableObject<T>(forKey key: Swift.String, withAccessibility accessibility: SwiftKeychainWrapper.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> T? where T : Swift.Decodable, T : Swift.Encodable
}
final public class Observable<T> : ShareTripSDK.ObservableProtocol {
  public typealias Observer = (T) -> Swift.Void
  final public var observer: ShareTripSDK.Observable<T>.Observer?
  final public var value: T {
    get
    set
  }
  public init(_ value: T)
  final public func bind(observer: @escaping ShareTripSDK.Observable<T>.Observer)
  final public func bindAndFire(observer: @escaping ShareTripSDK.Observable<T>.Observer)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class Observables {
  public static func combineLatest<U, V>(_ a: ShareTripSDK.Observable<U>, _ b: ShareTripSDK.Observable<V>, _ callBack: @escaping (U, V) -> Swift.Void)
  public static func combineLatest<U, V, W>(_ a: ShareTripSDK.Observable<U>, _ b: ShareTripSDK.Observable<V>, _ c: ShareTripSDK.Observable<W>, _ callBack: @escaping (U, V, W) -> Swift.Void)
  @objc deinit
}
public protocol SwitchCellDelegate : AnyObject {
  func switchButtonStatusChanged(status: Swift.Bool, cellIndexPath: Foundation.IndexPath)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SwitchCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(title: Swift.String, checked: Swift.Bool, indexPath: Foundation.IndexPath, delegate: any ShareTripSDK.SwitchCellDelegate)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class HeaderSpacedTitleView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(with title: Swift.String, font: UIKit.UIFont = UIFont.systemFont(ofSize: 13, weight: .medium))
  @objc deinit
}
public enum FlightSortingOptions : Swift.String, Swift.Codable {
  case earliest, cheapest, fastest, unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct SingleLineSelectCellData {
  public let title: Swift.String
  public var selected: Swift.Bool
  public init(title: Swift.String, selected: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SingleLineSelectCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func configure(cellData: ShareTripSDK.SingleLineSelectCellData)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CancellationAlertView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var callbackClosure: ((Swift.Bool?) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func updateConstraints()
  @objc deinit
}
extension ShareTripSDK.CancellationAlertView : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textView(_ textView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SingleItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public let imageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) final public let textLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public enum GSMessageType {
  case success
  case error
  case warning
  case info
  public static func == (a: ShareTripSDK.GSMessageType, b: ShareTripSDK.GSMessageType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum GSMessagePosition {
  case top
  case bottom
  public static func == (a: ShareTripSDK.GSMessagePosition, b: ShareTripSDK.GSMessagePosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum GSMessageAnimation {
  case fade
  case slide(ShareTripSDK.GSMessageAnimation.SlideType)
  public enum SlideType {
    case normal
    case distance(Swift.Double)
  }
}
public enum GSMessageTextAlignment {
  case topLeft
  case topCenter
  case topRight
  case left
  case center
  case right
  case bottomLeft
  case bottomCenter
  case bottomRight
  public static func == (a: ShareTripSDK.GSMessageTextAlignment, b: ShareTripSDK.GSMessageTextAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum GSMessageOption {
  case accessibilityIdentifier(Swift.String)
  case animations([ShareTripSDK.GSMessageAnimation])
  case animationDuration(Foundation.TimeInterval)
  case autoHide(Swift.Bool)
  case autoHideDelay(Swift.Double)
  case cornerRadius(Swift.Double)
  case height(Swift.Double)
  case hideOnTap(Swift.Bool)
  case handleTap(() -> ())
  case isInsideSafeAreaInsets(Swift.Bool)
  case margin(UIKit.UIEdgeInsets)
  case padding(UIKit.UIEdgeInsets)
  case position(ShareTripSDK.GSMessagePosition)
  case textAlignment(ShareTripSDK.GSMessageTextAlignment)
  case textColor(UIKit.UIColor)
  case textNumberOfLines(Swift.Int)
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func showMessage(_ text: Swift.String, type: ShareTripSDK.GSMessageType, options: [ShareTripSDK.GSMessageOption]? = [.autoHide(true), .hideOnTap(true), .autoHideDelay(2)])
  @_Concurrency.MainActor(unsafe) public func showMessage(_ attributedText: Foundation.NSAttributedString, type: ShareTripSDK.GSMessageType, options: [ShareTripSDK.GSMessageOption]? = nil)
  @_Concurrency.MainActor(unsafe) public func hideMessage(animated: Swift.Bool = true)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func showMessage(_ text: Swift.String, type: ShareTripSDK.GSMessageType, options: [ShareTripSDK.GSMessageOption]? = nil)
  @_Concurrency.MainActor(unsafe) public func showMessage(_ attributedText: Foundation.NSAttributedString, type: ShareTripSDK.GSMessageType, options: [ShareTripSDK.GSMessageOption]? = nil)
  @_Concurrency.MainActor(unsafe) public func hideMessage(animated: Swift.Bool = true)
}
@objc public class GSMessage : ObjectiveC.NSObject {
  public static var font: UIKit.UIFont
  public static var successBackgroundColor: UIKit.UIColor
  public static var warningBackgroundColor: UIKit.UIColor
  public static var errorBackgroundColor: UIKit.UIColor
  public static var infoBackgroundColor: UIKit.UIColor
  public class func showMessageAddedTo(text: Swift.String, type: ShareTripSDK.GSMessageType, options: [ShareTripSDK.GSMessageOption]?, inView: UIKit.UIView, inViewController: UIKit.UIViewController?)
  public class func showMessageAddedTo(attributedText: Foundation.NSAttributedString, type: ShareTripSDK.GSMessageType, options: [ShareTripSDK.GSMessageOption]?, inView: UIKit.UIView, inViewController: UIKit.UIViewController?)
  public func show()
  public func hide(animated: Swift.Bool)
  weak public var inView: UIKit.UIView! {
    get
  }
  weak public var inViewController: UIKit.UIViewController? {
    get
  }
  public var containerView: UIKit.UIView {
    get
  }
  public var messageView: UIKit.UIView {
    get
  }
  public var messageText: UIKit.UILabel {
    get
  }
  public var accessibilityIdentifier: Swift.String? {
    get
  }
  public var animations: [ShareTripSDK.GSMessageAnimation] {
    get
  }
  public var animationDuration: Swift.Double {
    get
  }
  public var autoHide: Swift.Bool {
    get
  }
  public var autoHideDelay: Swift.Double {
    get
  }
  public var cornerRadius: CoreFoundation.CGFloat {
    get
  }
  public var height: CoreFoundation.CGFloat {
    get
  }
  public var hideOnTap: Swift.Bool {
    get
  }
  public var handleTap: (() -> ())? {
    get
  }
  public var isInsideSafeAreaInsets: Swift.Bool {
    get
  }
  public var margin: UIKit.UIEdgeInsets {
    get
  }
  public var padding: UIKit.UIEdgeInsets {
    get
  }
  public var position: ShareTripSDK.GSMessagePosition {
    get
  }
  public var textAlignment: ShareTripSDK.GSMessageTextAlignment {
    get
  }
  public var textColor: UIKit.UIColor {
    get
  }
  public var textNumberOfLines: Swift.Int {
    get
  }
  public var messageWidth: CoreFoundation.CGFloat {
    get
  }
  public var messageHeight: CoreFoundation.CGFloat {
    get
  }
  public init(attributedText: Foundation.NSAttributedString, type: ShareTripSDK.GSMessageType, options: [ShareTripSDK.GSMessageOption]?, inView: UIKit.UIView, inViewController: UIKit.UIViewController?)
  @objc deinit
}
extension ShareTripSDK.GSMessage {
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
public struct PopupGradientViewData {
  public let title: Swift.String
  public let subtitle: Swift.String
  public let subtitleTwo: Foundation.NSAttributedString?
  public let buttonTitle: Swift.String
  public let imageName: Swift.String
  public init(title: Swift.String, subtitle: Swift.String, subtitleTwo: Foundation.NSAttributedString?, buttonTitle: Swift.String, imageName: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PopupGradientView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var callbackClosure: ((Swift.Bool) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var containerGradientView: ShareTripSDK.GradientView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var imageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var closeButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var subtitleLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var subtitleTwoLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var homeButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, viewData: ShareTripSDK.PopupGradientViewData, callbackClosure: ((Swift.Bool) -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public struct PageIndicatorPosition {
  public enum Horizontal {
    case left(padding: CoreFoundation.CGFloat), center, right(padding: CoreFoundation.CGFloat)
  }
  public enum Vertical {
    case top, bottom, under, customTop(padding: CoreFoundation.CGFloat), customBottom(padding: CoreFoundation.CGFloat), customUnder(padding: CoreFoundation.CGFloat)
  }
  public init(horizontal: ShareTripSDK.PageIndicatorPosition.Horizontal = .center, vertical: ShareTripSDK.PageIndicatorPosition.Vertical = .bottom)
}
public struct FilterPriceRange {
  public let low: Swift.Int
  public let high: Swift.Int
  public var currentLow: Swift.Int?
  public var currentHigh: Swift.Int?
  public var hasFilter: Swift.Bool {
    get
  }
  public init(low: Swift.Int, high: Swift.Int, currentLow: Swift.Int? = nil, currentHigh: Swift.Int? = nil)
}
public protocol TableViewViewModel {
  var numberOfSection: Swift.Int { get }
  func numberOfRows(in section: Swift.Int) -> Swift.Int
  func didSelectRow(at indexPath: Foundation.IndexPath)
  func dataForRow(at indexPath: Foundation.IndexPath) -> (any ShareTripSDK.ConfigurableTableViewCellData)?
}
extension ShareTripSDK.TableViewViewModel {
  public func didSelectRow(at indexPath: Foundation.IndexPath)
}
public protocol MainEntryVCDelegate : AnyObject {
  func loginSuccessful()
  func loginUnsuccessful()
}
public struct SDDateSelectionCellViewModel : ShareTripSDK.ConfigurableTableViewCellData {
  public init(title: Swift.String, text: Swift.String, placeholder: Swift.String, imageString: Swift.String, datePickerMode: UIKit.UIDatePicker.Mode = .date, selectedDate: Foundation.Date? = nil, minDate: Foundation.Date? = nil, maxDate: Foundation.Date? = nil, state: ShareTripSDK.ValidationState = .normal, isEnabled: Swift.Bool = true)
}
public enum SearchDestinationCellInfo : Swift.Int {
  case destination
  case searchButton
  case advice
  public var title: Swift.String {
    get
  }
  public var placeholder: Swift.String {
    get
  }
  public var imageName: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SearchDestinationResultCellInfo : Swift.Int {
  case travelAdvisory
  case destination
  case searchButton
  case permissionInfo
  case destinationDetails
  public var title: Swift.String {
    get
  }
  public var placeholder: Swift.String {
    get
  }
  public var imageName: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SingleInputTakenCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func configure(indexPath: Foundation.IndexPath, singleInputData: ShareTripSDK.SingleInputTitleData, callbackClosure: ((_ cellIndexPath: Foundation.IndexPath, _ textString: Swift.String) -> Swift.Void)?)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct Covid19TestOptionResponse : Swift.Codable {
  public let name: Swift.String?, code: Swift.String?, logo: Swift.String?
  public let selfTest: Swift.Bool?
  public var options: [ShareTripSDK.CovidTestOptions]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CovidTestOptions : Swift.Codable {
  public let name: Swift.String?, code: Swift.String?
  public let price: Swift.Double?, discountPrice: Swift.Double?
  public let isAddress: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) public func registerCell<T>(_ cellClass: T.Type) where T : UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) public func registerConfigurableCellDataContainer<T>(_ cellClass: T.Type) where T : UIKit.UITableViewCell, T : ShareTripSDK.ConfigurableTableViewCellDataContainer
  @_Concurrency.MainActor(unsafe) public func registerNibConfigurableCellDataContainer<T>(_ cellClass: T.Type, nibName: Swift.String = T.reuseID) where T : UIKit.UITableViewCell, T : ShareTripSDK.ConfigurableTableViewCellDataContainer
  @_Concurrency.MainActor(unsafe) public func registerNibCell<T>(_ cellClass: T.Type, nibName: Swift.String = T.reuseID) where T : UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) public func registerHeaderFooter<T>(_ viewClass: T.Type) where T : UIKit.UITableViewHeaderFooterView
  @_Concurrency.MainActor(unsafe) public func registerNibHeaderFooter<T>(_ viewClass: T.Type, nibName: Swift.String = T.reuseID) where T : UIKit.UITableViewHeaderFooterView
  @_Concurrency.MainActor(unsafe) public func dequeueReusableCell<T>(forIndexPath indexPath: Foundation.IndexPath) -> T where T : UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) public func dequeueReusableHeaderFooterView<T>() -> T where T : UIKit.UITableViewHeaderFooterView
}
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) public var dataHasChanged: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public func reloadData(completion: @escaping () -> ())
  @_Concurrency.MainActor(unsafe) public func reloadRowsSafely(at indexPaths: [Foundation.IndexPath], with animation: UIKit.UITableView.RowAnimation)
  @_Concurrency.MainActor(unsafe) public func reloadRowsInSection(section: Swift.Int, oldCount: Swift.Int, newCount: Swift.Int, visibleRowsOnly: Swift.Bool = false)
}
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) public func setEmptyMessage(_ message: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setEmptyMessageView(_ messageView: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func restore()
  @_Concurrency.MainActor(unsafe) public func removeTopSpace()
  @_Concurrency.MainActor(unsafe) public func removeBottomSpace()
  @_Concurrency.MainActor(unsafe) public func addTopBackgroundView(viewColor: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func addTopGradientView(startColor: UIKit.UIColor, endColor: UIKit.UIColor, backgroundColor: UIKit.UIColor = .clear)
}
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) public func startActivityIndicator()
  @_Concurrency.MainActor(unsafe) public func stopActivityIndicator()
}
extension UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public func hideSeparator()
  @_Concurrency.MainActor(unsafe) public func showSeparator()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class RightArrowTitleCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setHighlighted(_ highlighted: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(title: Swift.String, checked: Swift.Bool)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum PaymentConfirmationType : Swift.String, Swift.Codable {
  case success
  case failed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct PaymentConfirmationData {
  public let confirmationType: ShareTripSDK.PaymentConfirmationType
  public let serviceType: ShareTripSDK.ServiceType
  public let notifierSchedules: [Foundation.DateComponents]
  public let earnTripCoin: Swift.Int
  public let redeemTripCoin: Swift.Int
  public let shareTripCoin: Swift.Int
  public init(confirmationType: ShareTripSDK.PaymentConfirmationType, serviceType: ShareTripSDK.ServiceType, notifierSchedules: [Foundation.DateComponents], earnTripCoin: Swift.Int, redeemTripCoin: Swift.Int, shareTripCoin: Swift.Int)
}
public protocol RangeSeekSliderDelegate : AnyObject {
  func rangeSeekSlider(_ slider: ShareTripSDK.RangeSeekSlider, didChange minValue: CoreFoundation.CGFloat, maxValue: CoreFoundation.CGFloat)
  func didStartTouches(in slider: ShareTripSDK.RangeSeekSlider)
  func didEndTouches(in slider: ShareTripSDK.RangeSeekSlider)
  func rangeSeekSlider(_ slider: ShareTripSDK.RangeSeekSlider, stringForMinValue minValue: CoreFoundation.CGFloat) -> Swift.String?
  func rangeSeekSlider(_ slider: ShareTripSDK.RangeSeekSlider, stringForMaxValue: CoreFoundation.CGFloat) -> Swift.String?
}
extension ShareTripSDK.RangeSeekSliderDelegate {
  public func rangeSeekSlider(_ slider: ShareTripSDK.RangeSeekSlider, didChange minValue: CoreFoundation.CGFloat, maxValue: CoreFoundation.CGFloat)
  public func didStartTouches(in slider: ShareTripSDK.RangeSeekSlider)
  public func didEndTouches(in slider: ShareTripSDK.RangeSeekSlider)
  public func rangeSeekSlider(_ slider: ShareTripSDK.RangeSeekSlider, stringForMinValue minValue: CoreFoundation.CGFloat) -> Swift.String?
  public func rangeSeekSlider(_ slider: ShareTripSDK.RangeSeekSlider, stringForMaxValue maxValue: CoreFoundation.CGFloat) -> Swift.String?
}
extension ShareTripSDK.StarFillMode : Swift.Equatable {}
extension ShareTripSDK.StarFillMode : Swift.Hashable {}
extension ShareTripSDK.StarFillMode : Swift.RawRepresentable {}
extension ShareTripSDK.TapticEngine.Impact.ImpactStyle : Swift.Equatable {}
extension ShareTripSDK.TapticEngine.Impact.ImpactStyle : Swift.Hashable {}
extension ShareTripSDK.TapticEngine.Notification.NotificationType : Swift.Equatable {}
extension ShareTripSDK.TapticEngine.Notification.NotificationType : Swift.Hashable {}
extension ShareTripSDK.Covid19TestOptionsRowType : Swift.Equatable {}
extension ShareTripSDK.Covid19TestOptionsRowType : Swift.Hashable {}
extension ShareTripSDK.BookingButtonType : Swift.Equatable {}
extension ShareTripSDK.BookingButtonType : Swift.Hashable {}
extension ShareTripSDK.GenderType : Swift.Equatable {}
extension ShareTripSDK.GenderType : Swift.Hashable {}
extension ShareTripSDK.GenderType : Swift.RawRepresentable {}
extension ShareTripSDK.HTTPHeaderField : Swift.Equatable {}
extension ShareTripSDK.HTTPHeaderField : Swift.Hashable {}
extension ShareTripSDK.HTTPHeaderField : Swift.RawRepresentable {}
extension ShareTripSDK.ContentType : Swift.Equatable {}
extension ShareTripSDK.ContentType : Swift.Hashable {}
extension ShareTripSDK.ContentType : Swift.RawRepresentable {}
extension ShareTripSDK.APIResponseCode : Swift.Equatable {}
extension ShareTripSDK.APIResponseCode : Swift.Hashable {}
extension ShareTripSDK.APIResponseCode : Swift.RawRepresentable {}
extension ShareTripSDK.SDKConsumers : Swift.Equatable {}
extension ShareTripSDK.SDKConsumers : Swift.Hashable {}
extension ShareTripSDK.PaymentConfirmationEvents : Swift.Equatable {}
extension ShareTripSDK.PaymentConfirmationEvents : Swift.Hashable {}
extension ShareTripSDK.FlightDealType : Swift.Equatable {}
extension ShareTripSDK.FlightDealType : Swift.Hashable {}
extension ShareTripSDK.FlightDealType : Swift.RawRepresentable {}
extension ShareTripSDK.SliderCellType : Swift.Equatable {}
extension ShareTripSDK.SliderCellType : Swift.Hashable {}
extension ShareTripSDK.TravellerType : Swift.Equatable {}
extension ShareTripSDK.TravellerType : Swift.Hashable {}
extension ShareTripSDK.TravellerType : Swift.RawRepresentable {}
extension ShareTripSDK.ClassType : Swift.Equatable {}
extension ShareTripSDK.ClassType : Swift.Hashable {}
extension ShareTripSDK.ClassType : Swift.RawRepresentable {}
extension ShareTripSDK.TripType : Swift.Equatable {}
extension ShareTripSDK.TripType : Swift.Hashable {}
extension ShareTripSDK.TripType : Swift.RawRepresentable {}
extension ShareTripSDK.AccountCellInfo : Swift.Equatable {}
extension ShareTripSDK.AccountCellInfo : Swift.Hashable {}
extension UIKit.UIImage.JPEGQuality : Swift.Equatable {}
extension UIKit.UIImage.JPEGQuality : Swift.Hashable {}
extension UIKit.UIImage.JPEGQuality : Swift.RawRepresentable {}
extension ShareTripSDK.TitleType : Swift.Equatable {}
extension ShareTripSDK.TitleType : Swift.Hashable {}
extension ShareTripSDK.TitleType : Swift.RawRepresentable {}
@available(*, unavailable, renamed: "Connection")
extension ShareTripSDK.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension ShareTripSDK.Reachability.NetworkStatus : Swift.Hashable {}
extension ShareTripSDK.Reachability.Connection : Swift.Equatable {}
extension ShareTripSDK.Reachability.Connection : Swift.Hashable {}
extension ShareTripSDK.FlightSearchRows : Swift.Hashable {}
extension ShareTripSDK.FlightRouteType : Swift.Equatable {}
extension ShareTripSDK.FlightRouteType : Swift.Hashable {}
extension ShareTripSDK.FlightRouteType : Swift.RawRepresentable {}
extension ShareTripSDK.FlightScheduledType : Swift.Equatable {}
extension ShareTripSDK.FlightScheduledType : Swift.Hashable {}
extension ShareTripSDK.FlightScheduledType : Swift.RawRepresentable {}
extension ShareTripSDK.FlightClass : Swift.Equatable {}
extension ShareTripSDK.FlightClass : Swift.Hashable {}
extension ShareTripSDK.FlightClass : Swift.RawRepresentable {}
extension ShareTripSDK.STLog.LogEvent : Swift.Equatable {}
extension ShareTripSDK.STLog.LogEvent : Swift.Hashable {}
extension ShareTripSDK.STLog.LogEvent : Swift.RawRepresentable {}
extension ShareTripSDK.IndicatorType : Swift.Equatable {}
extension ShareTripSDK.IndicatorType : Swift.Hashable {}
extension ShareTripSDK.ServiceType : Swift.Equatable {}
extension ShareTripSDK.ServiceType : Swift.Hashable {}
extension ShareTripSDK.ServiceType : Swift.RawRepresentable {}
extension ShareTripSDK.Period.Departs : Swift.Equatable {}
extension ShareTripSDK.Period.Departs : Swift.Hashable {}
extension ShareTripSDK.Period.Departs : Swift.RawRepresentable {}
extension ShareTripSDK.Environment : Swift.Equatable {}
extension ShareTripSDK.Environment : Swift.Hashable {}
extension ShareTripSDK.FileType : Swift.Equatable {}
extension ShareTripSDK.FileType : Swift.Hashable {}
extension ShareTripSDK.paymentGatewayType : Swift.Equatable {}
extension ShareTripSDK.paymentGatewayType : Swift.Hashable {}
extension ShareTripSDK.paymentGatewayType : Swift.RawRepresentable {}
extension ShareTripSDK.paymentGatewayCurrency : Swift.Equatable {}
extension ShareTripSDK.paymentGatewayCurrency : Swift.Hashable {}
extension ShareTripSDK.paymentGatewayCurrency : Swift.RawRepresentable {}
extension ShareTripSDK.RelativeTimeStringType : Swift.Equatable {}
extension ShareTripSDK.RelativeTimeStringType : Swift.Hashable {}
extension ShareTripSDK.DateComponentType : Swift.Equatable {}
extension ShareTripSDK.DateComponentType : Swift.Hashable {}
extension ShareTripSDK.DateStyleType : Swift.Equatable {}
extension ShareTripSDK.DateStyleType : Swift.Hashable {}
extension Foundation.UserDefaults.Key : Swift.Equatable {}
extension Foundation.UserDefaults.Key : Swift.Hashable {}
extension Foundation.UserDefaults.Key : Swift.RawRepresentable {}
extension ShareTripSDK.PriceRangeType : Swift.Equatable {}
extension ShareTripSDK.PriceRangeType : Swift.Hashable {}
extension ShareTripSDK.DiscountType : Swift.Equatable {}
extension ShareTripSDK.DiscountType : Swift.Hashable {}
extension ShareTripSDK.DiscountType : Swift.RawRepresentable {}
extension ShareTripSDK.FlightSortingOptions : Swift.Equatable {}
extension ShareTripSDK.FlightSortingOptions : Swift.Hashable {}
extension ShareTripSDK.FlightSortingOptions : Swift.RawRepresentable {}
extension ShareTripSDK.GSMessageType : Swift.Equatable {}
extension ShareTripSDK.GSMessageType : Swift.Hashable {}
extension ShareTripSDK.GSMessagePosition : Swift.Equatable {}
extension ShareTripSDK.GSMessagePosition : Swift.Hashable {}
extension ShareTripSDK.GSMessageTextAlignment : Swift.Equatable {}
extension ShareTripSDK.GSMessageTextAlignment : Swift.Hashable {}
extension ShareTripSDK.SearchDestinationCellInfo : Swift.Equatable {}
extension ShareTripSDK.SearchDestinationCellInfo : Swift.Hashable {}
extension ShareTripSDK.SearchDestinationCellInfo : Swift.RawRepresentable {}
extension ShareTripSDK.SearchDestinationResultCellInfo : Swift.Equatable {}
extension ShareTripSDK.SearchDestinationResultCellInfo : Swift.Hashable {}
extension ShareTripSDK.SearchDestinationResultCellInfo : Swift.RawRepresentable {}
extension ShareTripSDK.PaymentConfirmationType : Swift.Equatable {}
extension ShareTripSDK.PaymentConfirmationType : Swift.Hashable {}
extension ShareTripSDK.PaymentConfirmationType : Swift.RawRepresentable {}
