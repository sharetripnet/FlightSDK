// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ShareTripSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Alamofire
import AppAuth
import AuthenticationServices
import CoreGraphics
import FBSDKLoginKit
import FirebaseAnalytics
import FirebaseCore
import FirebaseRemoteConfig
import FloatingPanel
import Foundation
import GoogleSignIn
import IQKeyboardManagerSwift
import JTAppleCalendar
import Kingfisher
import Lottie
import MessageUI
import PKHUD
import Photos
@_exported import ShareTripSDK
import StoreKit
import Swift
import SwiftKeychainWrapper
import SwiftyJSON
import SystemConfiguration
import UIKit
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
@objc public protocol ImageSlideshowDelegate {
  @objc optional func imageSlideshow(_ imageSlideshow: ShareTripSDK.ImageSlideshow, didChangeCurrentPageTo page: Swift.Int)
  @objc optional func imageSlideshowWillBeginDragging(_ imageSlideshow: ShareTripSDK.ImageSlideshow)
  @objc optional func imageSlideshowDidEndDecelerating(_ imageSlideshow: ShareTripSDK.ImageSlideshow)
}
public enum PageControlPosition {
  case hidden
  case insideScrollView
  case underScrollView
  case custom(padding: CoreFoundation.CGFloat)
}
public enum ImagePreload {
  case fixed(offset: Swift.Int)
  case all
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class ImageSlideshow : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) final public let scrollView: UIKit.UIScrollView
  @objc @available(*, deprecated, message: "Use pageIndicator.view instead")
  @_Concurrency.MainActor(unsafe) open var pageControl: UIKit.UIPageControl {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open var activityIndicator: ShareTripSDK.ActivityIndicatorFactory? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var pageIndicator: ShareTripSDK.PageIndicatorView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var pageIndicatorPosition: ShareTripSDK.PageIndicatorPosition {
    get
    set
  }
  @available(*, deprecated, message: "Use pageIndicatorPosition instead")
  @_Concurrency.MainActor(unsafe) open var pageControlPosition: ShareTripSDK.PageControlPosition {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) open var currentPage: Swift.Int {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) weak open var delegate: ShareTripSDK.ImageSlideshowDelegate?
  @objc @_Concurrency.MainActor(unsafe) open var currentPageChanged: ((_ page: Swift.Int) -> ())?
  @objc @_Concurrency.MainActor(unsafe) open var willBeginDragging: (() -> ())?
  @objc @_Concurrency.MainActor(unsafe) open var didEndDecelerating: (() -> ())?
  @objc @_Concurrency.MainActor(unsafe) open var currentSlideshowItem: ShareTripSDK.ImageSlideshowItem? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var scrollViewPage: Swift.Int {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var images: [ShareTripSDK.InputSource] {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var slideshowItems: [ShareTripSDK.ImageSlideshowItem] {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) open var circular: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var draggingEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var zoomEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var maximumScale: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var slideshowInterval: Swift.Double {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var preload: ShareTripSDK.ImagePreload
  @objc @_Concurrency.MainActor(unsafe) open var contentScaleMode: ShareTripSDK.UIViewContentMode {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var slideshowTransitioningDelegate: ShareTripSDK.ZoomAnimatedTransitioningDelegate? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func removeFromSuperview()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) open func layoutPageControl()
  @objc @_Concurrency.MainActor(unsafe) open func setImageInputs(_ inputs: [ShareTripSDK.InputSource])
  @objc @_Concurrency.MainActor(unsafe) open func setCurrentPage(_ newPage: Swift.Int, animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func setScrollViewPage(_ newScrollViewPage: Swift.Int, animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func pauseTimer()
  @objc @_Concurrency.MainActor(unsafe) open func unpauseTimer()
  @objc @available(*, deprecated, message: "use pauseTimer instead")
  @_Concurrency.MainActor(unsafe) open func pauseTimerIfNeeded()
  @objc @available(*, deprecated, message: "use unpauseTimer instead")
  @_Concurrency.MainActor(unsafe) open func unpauseTimerIfNeeded()
  @objc @_Concurrency.MainActor(unsafe) open func nextPage(animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) open func previousPage(animated: Swift.Bool)
  @objc @discardableResult
  @_Concurrency.MainActor(unsafe) open func presentFullScreenController(from controller: ShareTripSDK.ViewController) -> ShareTripSDK.FullScreenSlideshowViewController
  @objc deinit
}
extension ShareTripSDK.ImageSlideshow : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndScrollingAnimation(_ scrollView: UIKit.UIScrollView)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class LeftRightInfoHeaderView : UIKit.UITableViewHeaderFooterView {
  @_Concurrency.MainActor(unsafe) public var labelContainerView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var leftLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var rightLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var bottomAnchorLC: UIKit.NSLayoutConstraint!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func setText(left: Swift.String, right: Swift.String?)
  @objc deinit
}
public struct InputTextSelectionCellData : ShareTripSDK.ConfigurableTableViewCellData {
  public let title: Swift.String
  public let text: Swift.String
  public let placeholder: Swift.String
  public let imageString: Swift.String
  public let pickerData: [Swift.String]
  public let selectedRow: Swift.Int?
  public var state: ShareTripSDK.ValidationState
  public init(title: Swift.String, text: Swift.String, placeholder: Swift.String, imageString: Swift.String, pickerData: [Swift.String], selectedRow: Swift.Int?, state: ShareTripSDK.ValidationState)
  public init(title: Swift.String, text: Swift.String, placeholder: Swift.String, imageString: Swift.String, pickerData: [Swift.String], selectedRow: Swift.Int?)
}
public struct SavedCardDetails : Swift.Codable {
  public let uid: Swift.String?
  public let customer: Swift.String?
  public let platform: Swift.String?
  public let number: Swift.String?
  public let details: ShareTripSDK.CardDetails?
  public let tokenExpiry: Swift.String?
  public init(uid: Swift.String?, customer: Swift.String?, platform: Swift.String?, number: Swift.String?, details: ShareTripSDK.CardDetails?, tokenExpiry: Swift.String?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct CardDetails : Swift.Codable {
  public let bank: Swift.String?
  public let brand: Swift.String?
  public let length: Swift.Int?
  public let logo: ShareTripSDK.LogoSize?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol PriceInfoFareCellDelegate : AnyObject {
  func showMoreButtonTapped()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PriceInfoFareCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) weak public var delegate: ShareTripSDK.SliderCellDelegate?
  @_Concurrency.MainActor(unsafe) weak public var cellDelegate: ShareTripSDK.PriceInfoFareCellDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func configure(cellData: ShareTripSDK.PriceInfoFareCellData, conversionRate: Swift.Double = 1.0)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ErrorView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var buttonCallback: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, imageName: Swift.String?, title: Swift.String, message: Swift.String, imageViewHeight: CoreFoundation.CGFloat = 256.0, imageViewWidth: CoreFoundation.CGFloat = 256.0, buttonTitle: Swift.String?, isBackgroundColorWhite: Swift.Bool = true)
  @objc deinit
}
public enum StarFillMode : Swift.Int {
  case full
  case half
  case precise
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct CosmosSettings {
  public static var `default`: ShareTripSDK.CosmosSettings {
    get
  }
  public init()
  public var emptyBorderColor: UIKit.UIColor
  public var emptyBorderWidth: Swift.Double
  public var filledBorderColor: UIKit.UIColor
  public var filledBorderWidth: Swift.Double
  public var emptyColor: UIKit.UIColor
  public var filledColor: UIKit.UIColor
  public var fillMode: ShareTripSDK.StarFillMode
  public var starMargin: Swift.Double
  public var starPoints: [CoreFoundation.CGPoint]
  public var starSize: Swift.Double
  public var totalStars: Swift.Int
  public var filledImage: UIKit.UIImage?
  public var emptyImage: UIKit.UIImage?
  public var textColor: UIKit.UIColor
  public var textFont: UIKit.UIFont
  public var textMargin: Swift.Double
  public var minTouchRating: Swift.Double
  public var passTouchesToSuperview: Swift.Bool
  public var updateOnTouch: Swift.Bool
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class CosmosView : UIKit.UIView {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var rating: Swift.Double {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var settings: ShareTripSDK.CosmosSettings {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) convenience public init(settings: ShareTripSDK.CosmosSettings = .default)
  @_Concurrency.MainActor(unsafe) @objc override convenience dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, settings: ShareTripSDK.CosmosSettings)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func update()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open func prepareForReuse()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityIncrement()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityDecrement()
  @_Concurrency.MainActor(unsafe) open var didTouchCosmos: ((Swift.Double) -> ())?
  @_Concurrency.MainActor(unsafe) open var didFinishTouchingCosmos: ((Swift.Double) -> ())?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var totalStars: Swift.Int {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SingleInfoCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @objc deinit
}
extension ShareTripSDK.SingleInfoCell : ShareTripSDK.ConfigurableTableViewCellDataContainer {
  public typealias AccecptableViewModelType = ShareTripSDK.SingleInfoCellData
}
extension ShareTripSDK.SingleInfoCell : ShareTripSDK.ConfigurableTableViewCell {
  @_Concurrency.MainActor(unsafe) public func configure(viewModel: ShareTripSDK.ConfigurableTableViewCellData)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class InfoUploadCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public var didSelectUpload: (ShareTripSDK.FileType) -> Swift.Void
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func resetProgressBarView(fileType: ShareTripSDK.FileType)
  @_Concurrency.MainActor(unsafe) public func updateProgressBarView(progress: Swift.Float, fileType: ShareTripSDK.FileType)
  @objc deinit
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension ShareTripSDK.InfoUploadCell : ShareTripSDK.ConfigurableTableViewCellDataContainer {
  public typealias AccecptableViewModelType = ShareTripSDK.InfoUploadCellData
}
extension ShareTripSDK.InfoUploadCell : ShareTripSDK.ConfigurableTableViewCell {
  @_Concurrency.MainActor(unsafe) public func configure(viewModel: ShareTripSDK.ConfigurableTableViewCellData)
}
public class FlightFilterViewModelOld {
  final public let filter: ShareTripSDK.FlightFilter
  public var filteredData: ShareTripSDK.FlightFilterData
  final public let flightClass: ShareTripSDK.FlightClass
  final public let flightRouteType: ShareTripSDK.FlightRouteType
  public init(filter: ShareTripSDK.FlightFilter, filteredData: ShareTripSDK.FlightFilterData, flightClass: ShareTripSDK.FlightClass, flightRouteType: ShareTripSDK.FlightRouteType)
  public func resetFilterData()
  public func setPriceRange(minValue: Swift.Int, maxValue: Swift.Int)
  public var filterPriceRange: ShareTripSDK.FilterPriceRange {
    get
  }
  public var scheduleCellTypes: [ShareTripSDK.ScheduleCellType] {
    get
    set
  }
  public func scheduleCellType(for row: Swift.Int) -> ShareTripSDK.ScheduleCellType
  public func scheduleTimeSlotIsChecked(for row: Swift.Int) -> Swift.Bool
  public func checkboxTitle(for indexPath: Foundation.IndexPath) -> Swift.String
  public func checkboxChecked(for indexpath: Foundation.IndexPath) -> Swift.Bool
  public func handleCheckboxSelection(indexPath: Foundation.IndexPath, checked: Swift.Bool)
  public func stoppageCheckboxChecked(for row: Swift.Int) -> Swift.Bool
  public func handleStoppageCheckboxSelection(for row: Swift.Int, checked: Swift.Bool)
  public func airlineCheckboxChecked(for row: Swift.Int) -> Swift.Bool
  public func handleAirlineCheckboxSelection(for row: Swift.Int, checked: Swift.Bool)
  public func layoverCheckboxChecked(for row: Swift.Int) -> Swift.Bool
  public func handleLayoverCheckboxSelection(for row: Swift.Int, checked: Swift.Bool)
  public func weightCheckboxChecked(for row: Swift.Int) -> Swift.Bool
  public func handleWeightCheckboxSelection(for row: Swift.Int, checked: Swift.Bool)
  public func filterSectionType(for section: Swift.Int) -> ShareTripSDK.FlightFilterType
  public var numberOfSections: Swift.Int {
    get
  }
  public func numberOfRows(for section: Swift.Int) -> Swift.Int
  public func titleForHeader(in section: Swift.Int) -> Swift.String
  @objc deinit
}
public class CityProperty : Swift.Codable {
  final public let id: Swift.String?
  final public let countryCode: Swift.String?
  final public let countryName: Swift.String?
  final public let center: ShareTripSDK.STLocation?
  final public let name: Swift.String?
  final public let type: Swift.String?
  public init(id: Swift.String, countryCode: Swift.String, countryName: Swift.String, center: ShareTripSDK.STLocation, name: Swift.String, type: Swift.String)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class TapticEngine {
  public static let impact: ShareTripSDK.TapticEngine.Impact
  public static let selection: ShareTripSDK.TapticEngine.Selection
  public static let notification: ShareTripSDK.TapticEngine.Notification
  @_hasMissingDesignatedInitializers open class Impact {
    public enum ImpactStyle {
      case light, medium, heavy
      public static func == (a: ShareTripSDK.TapticEngine.Impact.ImpactStyle, b: ShareTripSDK.TapticEngine.Impact.ImpactStyle) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func feedback(_ style: ShareTripSDK.TapticEngine.Impact.ImpactStyle)
    public func prepare(_ style: ShareTripSDK.TapticEngine.Impact.ImpactStyle)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class Selection {
    public func feedback()
    public func prepare()
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class Notification {
    public enum NotificationType {
      case success, warning, error
      public static func == (a: ShareTripSDK.TapticEngine.Notification.NotificationType, b: ShareTripSDK.TapticEngine.Notification.NotificationType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public func feedback(_ type: ShareTripSDK.TapticEngine.Notification.NotificationType)
    public func prepare()
    @objc deinit
  }
  @objc deinit
}
public struct FlightNavTitleViewData {
  public let flightRouteType: ShareTripSDK.FlightRouteType
  public let firstText: Swift.String
  public let secondText: Swift.String
  public let firstDate: Foundation.Date?
  public let secondDate: Foundation.Date?
  public let travellerText: Swift.String
  public let showArrow: Swift.Bool
  public init(flightRouteType: ShareTripSDK.FlightRouteType, firstText: Swift.String, secondText: Swift.String, firstDate: Foundation.Date?, secondDate: Foundation.Date?, travellerText: Swift.String, showArrow: Swift.Bool)
}
public protocol NibBased {
  static var nibName: Swift.String { get }
  static func instantiate() -> Self
}
public protocol StoryboardBased {
  static var storyboardName: Swift.String { get }
  static var storyboardIdentifier: Swift.String { get }
  static func instantiate() -> Self
}
extension ShareTripSDK.StoryboardBased where Self : UIKit.UIViewController {
  public static var storyboardName: Swift.String {
    get
  }
  public static var storyboardIdentifier: Swift.String {
    get
  }
  public static func instantiate() -> Self
}
public protocol ObservableProtocol {
  associatedtype T
  typealias Observer = (Self.T) -> Swift.Void
  var value: Self.T { get set }
  func bind(observer: @escaping Self.Observer)
  func bindAndFire(observer: @escaping Self.Observer)
}
extension Swift.Encodable {
  public var dictionary: [Swift.String : Any]? {
    get
  }
}
public protocol FlightPassengerListViewModel : ShareTripSDK.TableViewViewModel {
  var flightBookingData: ShareTripSDK.FlightBookigData { get }
  var isSubmittable: Swift.Bool { get }
}
public class FlightPassengerListViewModelDefault : ShareTripSDK.FlightPassengerListViewModel {
  public var flightBookingData: ShareTripSDK.FlightBookigData {
    get
  }
  public var isAttachmentAvailable: Swift.Bool {
    get
  }
  public init(flightBookingData: ShareTripSDK.FlightBookigData, isAttachmentAvailable: Swift.Bool)
  public var isSubmittable: Swift.Bool {
    get
  }
  public var numberOfSection: Swift.Int {
    get
  }
  public func numberOfRows(in section: Swift.Int) -> Swift.Int
  public func dataForRow(at indexPath: Foundation.IndexPath) -> ShareTripSDK.ConfigurableTableViewCellData?
  @objc deinit
}
public enum Covid19TestOptionsRowType : Swift.CaseIterable {
  case testCharge
  case optionSelect
  case learnMore
  public var title: Swift.String {
    get
  }
  public var placeholder: Swift.String {
    get
  }
  public static func == (a: ShareTripSDK.Covid19TestOptionsRowType, b: ShareTripSDK.Covid19TestOptionsRowType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [ShareTripSDK.Covid19TestOptionsRowType]
  public static var allCases: [ShareTripSDK.Covid19TestOptionsRowType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public protocol InfoTextFieldCellDelegate : AnyObject {
  func infoChanged(text: Swift.String, indexPath: Foundation.IndexPath)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class InfoTextFieldCell : UIKit.UITableViewCell {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var typeImageView: UIKit.UIImageView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var titleLabel: UIKit.UILabel!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var infoTextField: UIKit.UITextField!
  @_Concurrency.MainActor(unsafe) weak public var delegate: ShareTripSDK.InfoTextFieldCellDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(cellIndexpath: Foundation.IndexPath, delegate: ShareTripSDK.InfoTextFieldCellDelegate?, title: Swift.String, placeholder: Swift.String, typeImage: Swift.String, keyboardType: UIKit.UIKeyboardType = .default, textContentType: UIKit.UITextContentType? = nil)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class AppVersion : Swift.Codable {
  final public let iOS: ShareTripSDK.VersionData?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class VersionData : Swift.Codable {
  final public let version: Swift.String?
  final public let isForceUpdate: Swift.Bool?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum BookingButtonType {
  case cancelBooking
  case retryBooking
  case resendVoucher
  public static func == (a: ShareTripSDK.BookingButtonType, b: ShareTripSDK.BookingButtonType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SingleButtonType {
  case searchButton
  case retryButton
  case bookingButton(type: ShareTripSDK.BookingButtonType)
  case addPerson
  case cancellBooking
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SingleButtonCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public let button: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func configure(indexPath: Foundation.IndexPath, buttonTitle: Swift.String, buttonType: ShareTripSDK.SingleButtonType, enabled: Swift.Bool = true, callbackClosure: ((_ cellIndexPath: Foundation.IndexPath) -> Swift.Void)?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PriceViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(priceStr: Swift.String, priceAfterDiscountStr: Swift.String?, discountPercentageStr: Swift.String?)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol ActivityIndicatorView {
  var view: UIKit.UIView { get }
  func show()
  func hide()
}
public protocol ActivityIndicatorFactory {
  func create() -> ShareTripSDK.ActivityIndicatorView
}
extension UIKit.UIActivityIndicatorView : ShareTripSDK.ActivityIndicatorView {
  @_Concurrency.MainActor(unsafe) public var view: UIKit.UIView {
    get
  }
  @_Concurrency.MainActor(unsafe) public func show()
  @_Concurrency.MainActor(unsafe) public func hide()
}
@objcMembers open class DefaultActivityIndicator : ShareTripSDK.ActivityIndicatorFactory {
  @objc open var style: ShareTripSDK.UIActivityIndicatorViewStyle
  @objc open var color: UIKit.UIColor?
  @objc public init(style: ShareTripSDK.UIActivityIndicatorViewStyle = .white, color: UIKit.UIColor? = nil)
  open func create() -> ShareTripSDK.ActivityIndicatorView
  @objc deinit
}
public struct FlightLegData {
  public let originName: Swift.String
  public let destinationName: Swift.String
  public let airplaneName: Swift.String
  public let airplaneLogo: Swift.String
  public let departureTime: Swift.String
  public let arrivalTime: Swift.String
  public let stop: Swift.Int
  public let dayCount: Swift.Int
  public let duration: Swift.String
  public init(originName: Swift.String, destinationName: Swift.String, airplaneName: Swift.String, airplaneLogo: Swift.String, departureTime: Swift.String, arrivalTime: Swift.String, stop: Swift.Int, dayCount: Swift.Int, duration: Swift.String)
}
public struct FlightRow {
  public let currency: Swift.String
  public let totalPrice: Swift.Double
  public let discountPrice: Swift.Double?
  public let discountPercentage: Swift.Double?
  public let earnPoint: Swift.Int
  public let sharePoint: Swift.Int
  public let flightLegDatas: [ShareTripSDK.FlightLegData]
  public var hasTechnicalStoppage: Swift.Bool
  public var isRefundable: Swift.String
  public var dealType: ShareTripSDK.FlightDealType?
  public init(currency: Swift.String, totalPrice: Swift.Double, discountPrice: Swift.Double?, discountPercentage: Swift.Double?, earnPoint: Swift.Int, sharePoint: Swift.Int, flightLegDatas: [ShareTripSDK.FlightLegData], hasTechnicalStoppage: Swift.Bool, isRefundable: Swift.String, dealType: ShareTripSDK.FlightDealType? = nil)
  public var totalPriceText: Swift.String {
    get
  }
  public var discountPriceText: Swift.String? {
    get
  }
  public var earnPointText: Swift.String {
    get
  }
  public var sharePointText: Swift.String {
    get
  }
}
extension UIKit.UITapGestureRecognizer {
  @_Concurrency.MainActor(unsafe) public func didTapAttributedTextInLabel(label: UIKit.UILabel, inRange targetRange: Foundation.NSRange) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PaymentGatewayCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public func setCellSelection(selected: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(imageLink: Swift.String)
  @objc deinit
}
public enum GenderType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case male
  case female
  case other
  public init(from decoder: Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias AllCases = [ShareTripSDK.GenderType]
  public typealias RawValue = Swift.String
  public static var allCases: [ShareTripSDK.GenderType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum ValidationState {
  case normal
  case active
  case warning(Swift.String)
  public var color: UIKit.UIColor {
    get
  }
}
public struct PopupViewData {
  public init(title: Swift.String, subtitle: Swift.String, buttonTitle: Swift.String, imageName: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PopupView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var imageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, viewData: ShareTripSDK.PopupViewData, callbackClosure: ((Swift.Bool) -> Swift.Void)?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class NameCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(imageName: Swift.String, titleText: Swift.String, subTitleText: Swift.String)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct USDPaymentPopupViewData {
  public let imageName: Swift.String
  public let title: Swift.String
  public let subtitle: Swift.String
  public let moneyInUSD: Swift.String
  public let buttonTitle: Swift.String
  public init(imageName: Swift.String, title: Swift.String, subtitle: Swift.String, moneyInUSD: Swift.String, buttonTitle: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class USDPaymentPopupView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var callbackClosure: ((Swift.Bool) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var imageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, viewData: ShareTripSDK.USDPaymentPopupViewData, callbackClosure: ((Swift.Bool) -> Swift.Void)?)
  @objc deinit
}
public protocol FilterResetCellDelegate : AnyObject {
  func filterResetButtonTapped()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FilterResetCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(subtitle: Swift.String, delegate: ShareTripSDK.FilterResetCellDelegate)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class FlightBookigData {
  public var passengersInfos: [ShareTripSDK.PassengerInfo]
  public var passengersAdditionalRequirementInfos: [ShareTripSDK.PassengersAdditionalReq]
  public var isDomestic: Swift.Bool {
    get
  }
  public var isAttachmentAvailable: Swift.Bool {
    get
  }
  public init(isDomestic: Swift.Bool, passengersInfos: [ShareTripSDK.PassengerInfo], passengersAdditionalRequirementInfos: [ShareTripSDK.PassengersAdditionalReq], isAttachmentAvailable: Swift.Bool)
  public var isSubmittable: Swift.Bool {
    get
  }
  public func isValidPassengerInfo(at index: Swift.Int) -> Swift.Bool
  @objc deinit
}
public struct SelectedBaggageInfo {
}
public struct BaggageCollapseStatus {
}
public enum BaggageType {
  case wholeFlight
  case onlyrouteWise
  case onlyPassengerWise
  case routeAndPassengerWise
  case none
  public static func == (a: ShareTripSDK.BaggageType, b: ShareTripSDK.BaggageType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class BaggageViewModel {
  public init(baggageResponse: ShareTripSDK.BaggageResponse?, adult: Swift.Int, child: Swift.Int, infant: Swift.Int)
  public func travellerCount() -> Swift.Int
  public func totalRoutesCount() -> Swift.Int
  public func isBaggageOptional() -> Swift.Bool
  public func isPerPerson() -> Swift.Bool
  public func isBaggageForWholeFlight() -> Swift.Bool
  public func getDefaultBaggageCodeAndAmount(using travelerType: ShareTripSDK.BaggageTravellerType, and index: Swift.Int = 0) -> (code: Swift.String, amount: Swift.Double)
  public func haveBaggageResponseData() -> Swift.Bool
  public func getBaggageType() -> ShareTripSDK.BaggageType
  public func getBaggageSelectionStatus() -> Swift.Bool
  public func prepareBaggageData()
  public func getTravelerWiseSelectedBaggageCodes(using index: Swift.Int) -> [Swift.String]
  public func setIsCollapsed(routeIndex: Swift.Int, travellerIndex: Swift.Int?)
  public func setBagggeSelected(routeIndex: Swift.Int, travellerIndex: Swift.Int, travellerType: ShareTripSDK.BaggageTravellerType, optionIndex: Swift.Int, option: ShareTripSDK.BaggageWholeFlightOptions)
  public func getCollapseStatus(by route: Swift.Int) -> Swift.Bool
  public func getCollapseStatus(by route: Swift.Int, and travellerIndex: Swift.Int) -> Swift.Bool
  public func getOptionsPerRoute(for travellerType: ShareTripSDK.BaggageTravellerType, routeIndex: Swift.Int) -> [ShareTripSDK.BaggageWholeFlightOptions]
  public func getSelectedBaggageIndex(routeIndex: Swift.Int, travellerIndex: Swift.Int, optionIndex: Swift.Int) -> Swift.Bool
  public func getTotalPrice() -> Swift.Double
  public func getbaggegesCode(using travelerIndex: Swift.Int) -> [Swift.String]
  public func getTitle(for routeIndex: Swift.Int) -> Swift.String
  public func getTravelerType(using travelerIndex: Swift.Int) -> ShareTripSDK.BaggageTravellerType
  @objc deinit
}
public struct SSRType : Swift.Codable {
  public let type: Swift.String
  public let ssr: [ShareTripSDK.SSR]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SSR : Swift.Codable {
  public let code: Swift.String, name: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol PopupInputViewDelegate : AnyObject {
  func crossButtonTapped()
}
@objc @_Concurrency.MainActor(unsafe) open class PopupInputView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var containerView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var crossButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var height: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String, height: CoreFoundation.CGFloat = 550.0, delegate: ShareTripSDK.PopupInputViewDelegate? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) public func show()
  @_Concurrency.MainActor(unsafe) public func hide()
  @objc @_Concurrency.MainActor(unsafe) public func crossButtonTapped(_ sender: UIKit.UIButton? = nil)
}
extension ShareTripSDK.PopupInputView : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
public struct PaymentGateway : Swift.Codable {
  public let id: Swift.String?
  public let name: Swift.String?
  public let code: Swift.String?
  public let type: Swift.String?
  public let currency: ShareTripSDK.GatewayCurrency
  public let logo: ShareTripSDK.LogoSize
  public let couponApplicable: Swift.Bool?
  public let earnTripcoinApplicable: Swift.Bool?
  public let redeemTripcoinApplicable: Swift.Bool?
  public let series: [ShareTripSDK.GatewaySeries]
  public let charge: Swift.Double?
  public var isUSDPayment: Swift.Bool {
    get
  }
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case id, name, logo, series, code, type, currency, charge
    case couponApplicable
    case earnTripcoinApplicable
    case redeemTripcoinApplicable
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct GatewayCurrency : Swift.Codable {
  public let code: Swift.String?
  public let conversion: ShareTripSDK.Conversion
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Conversion : Swift.Codable {
  public let rate: Swift.Double?
  public let code: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct LogoSize : Swift.Codable {
  public let small: Swift.String
  public let medium: Swift.String
  public let large: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct GatewaySeries : Swift.Codable {
  public let id: Swift.String
  public let length: Swift.Int
  public let series: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum PaymentGatewayType : Swift.String {
  case visa
  case flight
  case hotel
  case transfer
  case tour
  case holiday
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PaymentGatewayCurrency : Swift.String, Swift.Codable {
  case all
  case usd
  case bdt
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol LastNameInputCellDelegate : AnyObject {
  func lastNameChanged(name: Swift.String, indexPath: Foundation.IndexPath)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class LastNameInputCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public var cellIndexPath: Foundation.IndexPath!
  @_Concurrency.MainActor(unsafe) weak public var delegate: ShareTripSDK.LastNameInputCellDelegate?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var titleLabel: UIKit.UILabel!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var lastNameTextField: UIKit.UITextField!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ProfileBarButtonItem : ObjectiveC.NSObject {
  public class func createWith(name: Swift.String, image: Swift.String?, status: Swift.String?, target: Any? = nil, action: ObjectiveC.Selector? = nil) -> UIKit.UIBarButtonItem
  public class func getStatusColorCode(status: Swift.String) -> Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ProfileBarView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(showStatus: Swift.Bool, hasAction: Swift.Bool)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class StatusLabelView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @objc deinit
}
public class STPassenger : Swift.Codable {
  public var code: Swift.String
  final public let titleName: ShareTripSDK.TitleType
  final public let givenName: Swift.String
  final public let surName: Swift.String
  final public let nationality: Swift.String
  final public let gender: ShareTripSDK.GenderType
  final public let dateOfBirth: Swift.String
  final public let passportNumber: Swift.String?
  final public let passportExpireDate: Swift.String?
  final public let frequentFlyerNumber: Swift.String?
  final public let passportCopy: Swift.String?
  final public let visaCopy: Swift.String?
  public var address1: Swift.String
  public var postCode: Swift.String
  public var email: Swift.String
  public var mobileNumber: Swift.String
  public var address2: Swift.String
  public var profession: Swift.String
  required public init(from decoder: Swift.Decoder) throws
  public init(titleName: ShareTripSDK.TitleType, givenName: Swift.String, surName: Swift.String, nationality: Swift.String, dateOfBirth: Swift.String, gender: ShareTripSDK.GenderType, passportNumber: Swift.String?, passportExpireDate: Swift.String?, frequentFlyerNumber: Swift.String?, passportCopy: Swift.String?, visaCopy: Swift.String?)
  public func getAgeCount() -> Swift.Int?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
extension UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public func setBorder(cornerRadius: CoreFoundation.CGFloat, borderWidth: CoreFoundation.CGFloat = 1.0)
  @_Concurrency.MainActor(unsafe) public func setButtonImageTintColor(_ color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setupButtonPerTheme(tintColor: UIKit.UIColor, imageEdgeInsets: UIKit.UIEdgeInsets?)
}
extension UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) public func centerImageAndButton(_ gap: CoreFoundation.CGFloat, imageOnTop: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func leftImageCenterText(image: UIKit.UIImage, imagePadding: CoreFoundation.CGFloat, renderingMode: UIKit.UIImage.RenderingMode)
  @_Concurrency.MainActor(unsafe) public func leftImage(image: UIKit.UIImage, renderMode: UIKit.UIImage.RenderingMode)
  @_Concurrency.MainActor(unsafe) public func rightImage(image: UIKit.UIImage, renderMode: UIKit.UIImage.RenderingMode)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TripcoinParticleView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var particleImage: UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) public var emitterPosition: CoreFoundation.CGPoint!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) convenience public init(emitterPosition: CoreFoundation.CGPoint)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func makeTripCoinEmmiterCell() -> QuartzCore.CAEmitterCell
  @objc deinit
}
public struct DoubleButtonData {
  public let typeImage: Swift.String
  public let firstTitle: Swift.String
  public let secondTitle: Swift.String
  public let firstEnabled: Swift.Bool
  public let secondEnabled: Swift.Bool
  public init(typeImage: Swift.String, firstTitle: Swift.String, secondTitle: Swift.String, firstEnabled: Swift.Bool, secondEnabled: Swift.Bool)
}
public protocol DoubleButtonCellDelegate : AnyObject {
  func firstButtonTapped(indexPath: Foundation.IndexPath)
  func secondButtonTapped(indexPath: Foundation.IndexPath)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class DoubleButtonCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func configure(buttonData: ShareTripSDK.DoubleButtonData, indexPath: Foundation.IndexPath, delegate: ShareTripSDK.DoubleButtonCellDelegate)
  @objc deinit
}
public struct ScheduleFilterCellData {
  public let title: Swift.String
  public let titleImage: Swift.String
  public var selected: Swift.Bool
  public init(title: Swift.String, titleImage: Swift.String, selected: Swift.Bool)
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class JTDateCell : JTAppleCalendar.JTACDayCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func configure(cellState: JTAppleCalendar.CellState, valid: Swift.Bool, selectedPosition: JTAppleCalendar.SelectionRangePosition)
  @_Concurrency.MainActor(unsafe) public func showIndicatorView(cellState: JTAppleCalendar.CellState, indicator: ShareTripSDK.IndicatorType)
  @_Concurrency.MainActor(unsafe) public func hideIndicatorView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class NavigationController : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @available(iOS 5.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PopupAnimatedView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var callbackClosure: ((Swift.Bool) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var title: Swift.String?
  @_Concurrency.MainActor(unsafe) public var message: Swift.String?
  @_Concurrency.MainActor(unsafe) public var shouldAnimate: Swift.Bool
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, title: Swift.String, message: Swift.String, animation: Swift.Bool, callbackClosure: ((Swift.Bool) -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func updateConstraints()
  @objc deinit
}
public struct FlightSearchResponse : Swift.Codable {
  public let totalRecords: Swift.Int
  public let searchId: Swift.String, sessionId: Swift.String
  public let flightRouteType: ShareTripSDK.FlightRouteType
  public let flightClass: ShareTripSDK.FlightClass
  public let flights: [ShareTripSDK.Flight]
  public var filters: ShareTripSDK.FlightFilter
  public var filterDeal: ShareTripSDK.FlightSortingOptions?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class PlaneCabin : Swift.Codable {
  final public let code: Swift.String, name: Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class TimeSlot : Swift.Codable {
  final public let key: Swift.String, value: Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class FlightStoppage : Swift.Codable {
  final public let id: Swift.Int
  final public let name: Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class FlightWeight : Swift.Codable {
  final public let key: Swift.Int, weight: Swift.Int
  final public let unit: Swift.String
  final public let note: Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class FlightLeg : Swift.Codable {
  final public let searchCode: Swift.String, sequenceCode: Swift.String
  final public let airlines: ShareTripSDK.AirlineInfo
  final public let airlinesCode: Swift.String
  final public let logo: Swift.String
  final public let aircraft: Swift.String
  final public let aircraftCode: Swift.String
  final public let originName: ShareTripSDK.AirportInfo, destinationName: ShareTripSDK.AirportInfo
  final public let arrivalDateTime: ShareTripSDK.DateTime, departureDateTime: ShareTripSDK.DateTime
  final public let duration: Swift.String
  final public let stop: Swift.Int
  final public let stopSegment: [ShareTripSDK.Airport]
  final public let min: Swift.Int, dayCount: Swift.Int
  final public let hiddenStops: Swift.Bool
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class TripCoinBarButtonItem {
  public init()
  public class func createWithText(_ text: Swift.String, target: Any? = nil, action: ObjectiveC.Selector? = nil) -> UIKit.UIBarButtonItem
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class TripCoinBarView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @objc deinit
}
public struct SingleInputData {
  public let inputTypeImage: Swift.String
  public let placeholder: Swift.String
  public let inputValue: Swift.String?
  public init(inputTypeImage: Swift.String, placeholder: Swift.String, inputValue: Swift.String?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SingleInputCell : UIKit.UITableViewCell {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var topDotsImageView: UIKit.UIImageView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var inputTypeImageView: UIKit.UIImageView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var crossButton: UIKit.UIButton!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var inputButton: UIKit.UIButton!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var underlineView: UIKit.UIView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var inputButtonWidthConstraint: UIKit.NSLayoutConstraint!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var inputButtonTrailingConstraint: UIKit.NSLayoutConstraint!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func configure(indexPath: Foundation.IndexPath, singleInputData: ShareTripSDK.SingleInputData, callbackClosure: ((_ cellIndexPath: Foundation.IndexPath) -> Swift.Void)?, crossCallbackClosure: ((_ cellIndexPath: Foundation.IndexPath) -> Swift.Void)? = nil)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol PaymentGateWayFilterProvider {
  func paymentGateWayfilter() -> ((ShareTripSDK.PaymentGateway) -> Swift.Bool)
  func paymentGateWayfilter(gatewayIds: [Swift.String]) -> ((ShareTripSDK.PaymentGateway) -> Swift.Bool)
  func paymentGateWayfilter(gatewayCodes: [Swift.String]) -> ((ShareTripSDK.PaymentGateway) -> Swift.Bool)
}
extension ShareTripSDK.PaymentGateWayFilterProvider {
  public func paymentGateWayfilter(gatewayIds: [Swift.String]) -> ((ShareTripSDK.PaymentGateway) -> Swift.Bool)
  public func paymentGateWayfilter(gatewayCodes: [Swift.String]) -> ((ShareTripSDK.PaymentGateway) -> Swift.Bool)
}
public struct CouponsServiceExtraParams {
  public let flighCouponExtraParams: ShareTripSDK.FlightCouponsExtraParameters?
  public let hotelCouponExtraParams: ShareTripSDK.HotelCouponsExtraParameters?
  public let packageCouponExtraParams: ShareTripSDK.PackageCouponsExtraParams?
  public init(flighCouponExtraParams: ShareTripSDK.FlightCouponsExtraParameters?, hotelCouponExtraParams: ShareTripSDK.HotelCouponsExtraParameters?, packageCouponExtraParams: ShareTripSDK.PackageCouponsExtraParams?)
}
public struct FlightCouponsExtraParameters {
  public let searchId: Swift.String?
  public let sequenceCode: Swift.String?
  public init(searchId: Swift.String?, sequenceCode: Swift.String?)
  public var requestParams: [Swift.String : Any] {
    get
  }
}
public struct HotelCouponsExtraParameters {
  public let searchId: Swift.String
  public var propertyCode: Swift.String
  public let providerCode: Swift.String
  public let rooms: [Swift.Int]
  public let roomsSearchCode: Swift.String
  public let propertyRoomId: Swift.String
  public init(searchId: Swift.String, propertyCode: Swift.String, providerCode: Swift.String, rooms: [Swift.Int], roomsSearchCode: Swift.String, propertyRoomId: Swift.String)
  public var requestParams: [Swift.String : Any] {
    get
  }
}
public struct PackageCouponsExtraParams {
  public let productCode: Swift.String?
  public init(productCode: Swift.String?)
  public var requestParams: [Swift.String : Any] {
    get
  }
}
public struct PackageCouponParams {
  public let coupon: Swift.String
  public let serviceType: Swift.String
  public let deviceType: Swift.String
  public let extraParams: [Swift.String : Any]
  public init(coupon: Swift.String, serviceType: Swift.String, deviceType: Swift.String, extraParams: [Swift.String : Any])
  public var params: [Swift.String : Any] {
    get
  }
}
public class FlightFilter : Swift.Codable {
  final public let airlines: [ShareTripSDK.Airline]
  final public let price: ShareTripSDK.FlightPriceRange
  final public let stoppages: [ShareTripSDK.FlightStoppage]
  final public let origin: [ShareTripSDK.Airport], destination: [ShareTripSDK.Airport], layover: [ShareTripSDK.Airport]
  final public let weight: [ShareTripSDK.FlightWeight]
  final public let departTimeSlot: [ShareTripSDK.TimeSlot]
  final public let returnTimeSlot: [ShareTripSDK.TimeSlot]?
  final public let refundable: Swift.Int?
  final public let isRefundable: [ShareTripSDK.FlightFilter.IsRefundable]?
  public struct IsRefundable : Swift.Codable {
    public let key: Swift.String
    public let value: Swift.Int
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum FlightFilterType : Swift.Int, Swift.CaseIterable {
  case reset
  case priceRange
  case refundble
  case schedule
  case stoppage
  case airline
  case layover
  case weight
  public var title: Swift.String {
    get
  }
  public var subTitle: Swift.String {
    get
  }
  public var rowCount: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [ShareTripSDK.FlightFilterType]
  public typealias RawValue = Swift.Int
  public static var allCases: [ShareTripSDK.FlightFilterType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum ScheduleCellType {
  case title(text: Swift.String)
  case departTimeSlot(key: Swift.String, value: Swift.String)
  case returnTimeSlot(key: Swift.String, value: Swift.String)
  public var timeSlotKey: Swift.String? {
    get
  }
  public func equalType(with scheduleCellType: ShareTripSDK.ScheduleCellType) -> Swift.Bool
}
public class FlightSearchFilter : Swift.Encodable {
  final public let page: Swift.Int
  final public let searchId: Swift.String
  final public let filter: ShareTripSDK.FlightFilterData?
  public init(page: Swift.Int, searchId: Swift.String, filter: ShareTripSDK.FlightFilterData?)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case page
    case searchId
    case filter
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public protocol InputTextFilterCellDelegate : AnyObject {
  func inputTextDidChange(_ text: Swift.String?, indexPath: Foundation.IndexPath?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class InputTextFilterCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func configure(title: Swift.String, text: Swift.String?, placeholder: Swift.String, indexPath: Foundation.IndexPath, delegate: ShareTripSDK.InputTextFilterCellDelegate)
  @objc deinit
}
extension ShareTripSDK.InputTextFilterCell : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
}
public class FlightRuleResponse : Swift.Codable {
  final public let refundPolicies: [ShareTripSDK.RefundPolicy?]?
  final public let baggages: [ShareTripSDK.FlightBaggage]?
  final public let fareDetails: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class RefundPolicy : Swift.Codable {
  final public let type: Swift.String
  final public let rules: [ShareTripSDK.RefundPolicyRule]
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class RefundPolicyRule : Swift.Codable {
  final public let type: Swift.String, text: Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class FlightBaggage : Swift.Codable {
  final public let type: Swift.String
  final public let adult: Swift.String?
  final public let child: Swift.String?, infant: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension ShareTripSDK.UseCouponViewModel {
  @_hasMissingDesignatedInitializers public class Callback {
    public var didSuccessApplyCoupon: () -> Swift.Void
    public var didFailedApplyCoupon: (Swift.String) -> Swift.Void
    public var didVerifyPhoneNumber: () -> Swift.Void
    public var needPhoneVerification: () -> Swift.Void
    public var didVerifyOTP: () -> Swift.Void
    public var didFailedGPStar: (Swift.String) -> Swift.Void
    @objc deinit
  }
}
public struct GPStarParams {
  public let verifiedMobileNumber: Swift.String?
  public let otp: Swift.String?
  public init(verifiedMobileNumber: Swift.String?, otp: Swift.String?)
}
public class UseCouponViewModel {
  public static let gpstarAlertTitle: Swift.String
  public static let verifyPhoneMessage: Swift.String
  public init(serviceType: ShareTripSDK.ServiceType, availableCoupons: [ShareTripSDK.PromotionalCoupon])
  public var selectedCouponString: Swift.String
  final public let callback: ShareTripSDK.UseCouponViewModel.Callback
  public var baseFare: Swift.Double
  public var couponExtraParams: [Swift.String : Any]
  public var selectedCouponIndex: Swift.Int? {
    get
    set
  }
  public var totalCouponsCount: Swift.Int {
    get
  }
  public var isCouponApplied: Swift.Bool {
    get
  }
  public var appliedCoupon: Swift.String {
    get
  }
  public var selectedCouponGateways: [Swift.String] {
    get
  }
  public var gpstarParams: ShareTripSDK.GPStarParams {
    get
  }
  public func resetAppliedCoupon()
  public func getCoupon(for index: Swift.Int) -> ShareTripSDK.PromotionalCoupon?
  public var isWithDiscount: Swift.Bool {
    get
  }
  public var couponDiscount: Swift.Double {
    get
  }
  public var isVerifiedGPStarUser: Swift.Bool {
    get
  }
  public var applyCouponRequestParams: [Swift.String : Any] {
    get
  }
  public var isOTPVerified: Swift.Bool
  public var isGPStar: Swift.Bool {
    get
  }
  public var otpExpiryTimeInSeconds: Swift.Double? {
    get
  }
  public var phoneVerificationRequired: Swift.Bool {
    get
  }
  public var couponViewMode: ShareTripSDK.UseCouponViewModel.CouponViewMode
  public func applyCoupon()
  public func verifyGPStar(_ phoneNumber: Swift.String?)
  public func verifyOTP(_ otp: Swift.String?)
  @objc deinit
}
extension ShareTripSDK.UseCouponViewModel {
  public enum CouponViewMode {
    case apply
    case remove
    public static func == (a: ShareTripSDK.UseCouponViewModel.CouponViewMode, b: ShareTripSDK.UseCouponViewModel.CouponViewMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CheckboxCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public var didTapCheckbox: (Swift.Bool) -> Swift.Void
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func configure(title: Swift.String, checkboxChecked: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func selectCheckbox()
  @objc deinit
}
extension ShareTripSDK.CheckboxCell : ShareTripSDK.ConfigurableTableViewCellDataContainer {
  public typealias AccecptableViewModelType = ShareTripSDK.CheckboxCellData
}
extension ShareTripSDK.CheckboxCell : ShareTripSDK.ConfigurableTableViewCell {
  @_Concurrency.MainActor(unsafe) public func configure(viewModel: ShareTripSDK.ConfigurableTableViewCellData)
}
public typealias UIViewContentMode = UIKit.UIView.ContentMode
public typealias UIActivityIndicatorViewStyle = UIKit.UIActivityIndicatorView.Style
public struct TravelInsuranceServiceDetailResponse : Swift.Codable {
  public let code: Swift.String, name: Swift.String
  public let logo: Swift.String
  public let description: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class PriceTableViewModel {
  final public let serviceType: ShareTripSDK.ServiceType
  final public let priceInfoTableData: ShareTripSDK.PriceInfoTableData
  final public let historyConvenienceFee: ShareTripSDK.HistoryConvenienceFee?
  public init(priceInfoTableData: ShareTripSDK.PriceInfoTableData, serviceType: ShareTripSDK.ServiceType, historyConvenienceFee: ShareTripSDK.HistoryConvenienceFee?)
  public func getSections() -> [[ShareTripSDK.FlightFareCellType]]
  public func getTotalPrice() -> Swift.Double
  public func getDiscount() -> Swift.Double
  public func getTotalPayble() -> Swift.Double
  public func getPriceRowData(_ index: Swift.Int) -> ShareTripSDK.PriceInfoFareCellData?
  public func getBaggagePrice() -> Swift.Double
  public func getCovid19TestPrice() -> Swift.Double
  public var travelInsuranceCharge: Swift.Double {
    get
  }
  public func getVisaCourierCharge() -> Swift.Double
  public func getadvanceIncomeTax() -> Swift.Double
  public func getConvenienceFee() -> Swift.Double
  public func getCouponDiscount() -> Swift.Double
  @objc deinit
}
public struct FlightPromotions : Swift.Codable {
  public let uid: Swift.String?
  public let image: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PromotionalCoupon : Swift.Decodable {
  public let coupon: Swift.String, title: Swift.String
  public let minimumTotalAmount: Swift.Double
  public let withDiscount: Swift.String
  public let discount: Swift.Double
  public let discountType: Swift.String
  public let rooms: [Swift.Int]?
  public let gateway: [Swift.String]?
  public init(from decoder: Swift.Decoder) throws
}
public struct SingleInputTitleData {
  public let titleLabel: Swift.String
  public let inputTypeImage: Swift.String
  public let placeholder: Swift.String
  public let inputValue: Swift.String?
  public init(titleLabel: Swift.String, inputTypeImage: Swift.String, placeholder: Swift.String, inputValue: Swift.String?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SingleInputTitleCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func configure(indexPath: Foundation.IndexPath, singleInputData: ShareTripSDK.SingleInputTitleData, callbackClosure: ((_ cellIndexPath: Foundation.IndexPath) -> Swift.Void)?, crossCallbackClosure: ((_ cellIndexPath: Foundation.IndexPath) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func setCellAttributeColor()
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class STSDK {
  public static var consumer: ShareTripSDK.SDKConsumers
  public static func initiate(_ accessToken: Swift.String)
  @objc deinit
}
public enum SDKConsumers {
  case sharetrip
  case banglalink
  public static func == (a: ShareTripSDK.SDKConsumers, b: ShareTripSDK.SDKConsumers) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class WhitishNavigationController : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @available(iOS 5.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct CovidTestCenterDetailsResponse : Swift.Codable {
  public let code: Swift.String?, name: Swift.String?, description: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class RoundedCornerView : UIKit.UIView {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var cornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var topLeft: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var topRight: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var bottomLeft: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var bottomRight: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum WebSourceType {
  case htmlString
  case url
  case staticHtmlFile
  case dataSource
  public static func == (a: ShareTripSDK.WebSourceType, b: ShareTripSDK.WebSourceType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol WebViewDataSource {
  func fetchWebData(completionHandler: @escaping (Swift.Result<Swift.String, Swift.Error>) -> Swift.Void)
}
public class StaticHtmlDataProvider : ShareTripSDK.WebViewDataSource {
  final public let fileName: Swift.String
  public init(fileName: Swift.String)
  public func fetchWebData(completionHandler: @escaping (Swift.Result<Swift.String, Swift.Error>) -> Swift.Void)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class WebViewController : ShareTripSDK.ViewController {
  @_Concurrency.MainActor(unsafe) final public let webView: WebKit.WKWebView
  @_Concurrency.MainActor(unsafe) public var sourceType: ShareTripSDK.WebSourceType!
  @_Concurrency.MainActor(unsafe) public var htmlString: Swift.String?
  @_Concurrency.MainActor(unsafe) public var baseURL: Foundation.URL?
  @_Concurrency.MainActor(unsafe) public var dataSource: ShareTripSDK.WebViewDataSource?
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) convenience public init(url: Foundation.URL)
  @_Concurrency.MainActor(unsafe) convenience public init(dataSource: ShareTripSDK.WebViewDataSource)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc deinit
}
extension ShareTripSDK.WebViewController : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
}
extension UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) public func addDoneToolbar()
  @_Concurrency.MainActor(unsafe) public func setRightImageView(imageLink: Swift.String, tintColor: UIKit.UIColor, frame: CoreFoundation.CGRect? = nil)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class RangeSeekSlider : UIKit.UIControl {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) convenience public init(frame: CoreFoundation.CGRect = .zero, completion: ((ShareTripSDK.RangeSeekSlider) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) weak open var delegate: ShareTripSDK.RangeSeekSliderDelegate?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var minValue: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var maxValue: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var selectedMinValue: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var selectedMaxValue: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var minLabelFont: UIKit.UIFont {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var maxLabelFont: UIKit.UIFont {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var numberFormatter: Foundation.NumberFormatter
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var hideLabels: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var labelsFixed: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var minDistance: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var maxDistance: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var minLabelColor: UIKit.UIColor?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var maxLabelColor: UIKit.UIColor?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var handleColor: UIKit.UIColor?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var handleBorderColor: UIKit.UIColor?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var colorBetweenHandles: UIKit.UIColor?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var initialColor: UIKit.UIColor?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var disableRange: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var enableStep: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var step: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var handleImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var handleDiameter: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var selectedHandleDiameterMultiplier: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var lineHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var handleBorderWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var labelPadding: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var minLabelAccessibilityLabel: Swift.String?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var maxLabelAccessibilityLabel: Swift.String?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var minLabelAccessibilityHint: Swift.String?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var maxLabelAccessibilityHint: Swift.String?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func continueTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityElement(at index: Swift.Int) -> Any?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func index(ofAccessibilityElement element: Any) -> Swift.Int
  @_Concurrency.MainActor(unsafe) open func setupStyle()
  @objc deinit
}
public enum PaymentConfirmationEvents : ShareTripSDK.STAnalyticsEvent {
  case paymentCompleteVisa
  case paymentCompleteFlight
  case paymentCompleteHotel
  case paymentCompleteHoliday
  case paymentFailedVisa
  case paymentFailedFlight
  case paymentFailedHotel
  case paymentFailedHoliday
  public var name: Swift.String {
    get
  }
  public var payload: ShareTripSDK.PaymentConfirmationEvents.Payload? {
    get
  }
  public static func == (a: ShareTripSDK.PaymentConfirmationEvents, b: ShareTripSDK.PaymentConfirmationEvents) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CheckboxCellData : ShareTripSDK.ConfigurableTableViewCellData {
  public let title: Swift.String
  public let checkboxChecked: Swift.Bool
  public let enabled: Swift.Bool
  public init(title: Swift.String, checkboxChecked: Swift.Bool, enabled: Swift.Bool)
}
public enum FlightDealType : Swift.String, Swift.Codable {
  case preferred
  case best
  case none
  public var title: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class Flight : Swift.Codable {
  final public let deal: ShareTripSDK.FlightDealType?
  final public let sequence: Swift.String
  final public let shareLink: Swift.String?
  final public let seatsLeft: Swift.Int
  final public let refundable: Swift.Bool?
  final public let isRefundable: Swift.String?
  final public let weight: Swift.String?
  final public let price: Swift.Double, discount: Swift.Double, originPrice: Swift.Double
  public var earnPoint: Swift.Int, sharePoint: Swift.Int
  final public let currency: Swift.String, gatewayCurrency: Swift.String
  final public let totalDuration: Swift.String
  final public let departStartDate: ShareTripSDK.DateTime
  final public let flightLegs: [ShareTripSDK.FlightLeg]
  final public let segments: [ShareTripSDK.FlightSegment]
  public var priceBreakdown: ShareTripSDK.FlightPriceBreakdown
  final public let domestic: Swift.Bool
  final public let attachment: Swift.Bool?
  final public let airlinesCode: Swift.String?
  final public let advanceIncomeTax: Swift.Double?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class TripCoinCardCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(earnedTripCoin: Swift.Int, redeemedTripCoin: Swift.Int)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class LeftInfoHeaderView : UIKit.UITableViewHeaderFooterView {
  @_Concurrency.MainActor(unsafe) final public let customLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let bottomLineView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @objc deinit
}
extension Swift.Double {
  public func asString(style: Foundation.DateComponentsFormatter.UnitsStyle) -> Swift.String
  public var clean: Swift.String {
    get
  }
  public func rounded(toPlaces places: Swift.Int) -> Swift.Double
  public func getStringDate() -> Swift.String
}
public enum FlightRouteType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case round
  case oneWay
  case multiCity
  public init(stringValue: Swift.String)
  public init(from decoder: Swift.Decoder) throws
  public init(intValue: Swift.Int)
  public var intValue: Swift.Int {
    get
  }
  public var title: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [ShareTripSDK.FlightRouteType]
  public typealias RawValue = Swift.String
  public static var allCases: [ShareTripSDK.FlightRouteType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct TravelInsuranceAddonServiceResponse : Swift.Codable {
  public let code: Swift.String?, name: Swift.String?
  public let logo: Swift.String?
  public let selfRisk: Swift.Int
  public let options: [ShareTripSDK.TravelInsuranceOption]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct TravelInsuranceOption : Swift.Codable {
  public let code: Swift.String?, name: Swift.String?
  public let price: Swift.Double?, discountPrice: Swift.Double?
  public let defaultOption: Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct CouponApplyResponse : Swift.Codable {
  public let discount: Swift.Double
  public let gateway: [Swift.String]
  public let withDiscount: Swift.String?
  public let discountType: ShareTripSDK.DiscountType
  public let mobileVerificationRequired: Swift.String?
  public var isWithDiscount: Swift.Bool {
    get
  }
  public var isPhoneVerificationRequired: Swift.Bool {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class DiscountOptionsCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public var callbackClosure: (() -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(discountOptionsView: UIKit.UIView)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol SliderCellDelegate : AnyObject {
  func sliderDidChange(_ value: Swift.Float, cellType: ShareTripSDK.SliderCellType)
}
public enum SliderCellType {
  case locationRange
  case guestRating
  public static func == (a: ShareTripSDK.SliderCellType, b: ShareTripSDK.SliderCellType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SliderCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @objc deinit
}
public enum Currency : Swift.String, Swift.Codable {
  case bdt
  case usd
  case undefined
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum DurationType : Swift.String, Swift.Codable {
  case days
  case hours
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Featured : Swift.String, Swift.Codable {
  case yes
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Language : Swift.String, Swift.Codable {
  case en
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Status : Swift.String, Swift.Codable {
  case active
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct PriceRange : Swift.Codable {
  public let min: Swift.Int, max: Swift.Int
  public init(min: Swift.Int, max: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Points : Swift.Codable {
  public let earning: Swift.Int, shared: Swift.Int
  public let shareLink: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Image : Swift.Codable {
  public let srcLarge: Swift.String, srcMedium: Swift.String, srcThumb: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum TransportType : Swift.CaseIterable {
  case airlines, cruise, boat, train
  public var title: Swift.String {
    get
  }
  public var placeholder: Swift.String {
    get
  }
  public static func == (a: ShareTripSDK.TransportType, b: ShareTripSDK.TransportType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [ShareTripSDK.TransportType]
  public static var allCases: [ShareTripSDK.TransportType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct Transport {
  public var type: ShareTripSDK.TransportType
  public var name: Swift.String?
  public var code: Swift.String?
}
public struct DiscountOption : Swift.Codable {
  public let type: ShareTripSDK.DiscountOptionType
  public let title: Swift.String
  public let subtitle: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum DiscountOptionType : Swift.String, Swift.Codable {
  case earnTC
  case redeemTC
  case useCoupon
  case unknown
  public var title: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct UrlOption : Swift.Codable {
  public let service_type: ShareTripSDK.ServiceType
  public let status: ShareTripSDK.PaymentConfirmationType
  public let url: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct BooleanConvertible : Swift.Codable, Swift.ExpressibleByBooleanLiteral {
  public let value: Swift.Bool
  public init(booleanLiteral value: Swift.Bool)
  public init(from decoder: Swift.Decoder) throws
  public typealias BooleanLiteralType = Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
}
extension ShareTripSDK.BooleanConvertible : Swift.Equatable {
  public static func == (lhs: ShareTripSDK.BooleanConvertible, rhs: ShareTripSDK.BooleanConvertible) -> Swift.Bool
  public static func == (lhs: ShareTripSDK.BooleanConvertible, rhs: Swift.Bool) -> Swift.Bool
}
public class AirportInfo : Swift.Codable, Swift.Equatable {
  final public let airport: Swift.String
  final public let city: Swift.String
  final public let code: Swift.String
  public static func == (lhs: ShareTripSDK.AirportInfo, rhs: ShareTripSDK.AirportInfo) -> Swift.Bool
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class Airline : Swift.Codable {
  final public let records: Swift.Double?
  final public let code: Swift.String
  final public let full: Swift.String
  final public let short: Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class AirlineInfo : Swift.Codable {
  final public let code: Swift.String
  final public let full: Swift.String
  final public let short: Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class StopSegment : Swift.Codable {
  final public let iata: Swift.String
  final public let city: Swift.String
  final public let name: Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class PassengerInfo {
  final public let flightDate: Foundation.Date
  final public let travellerType: ShareTripSDK.TravellerType
  public var code: Swift.String
  public var givenName: Swift.String
  public var surName: Swift.String
  public var gender: ShareTripSDK.GenderType?
  public var dob: Foundation.Date?
  public var nationality: ShareTripSDK.Country?
  public var mobile: Swift.String
  public var email: Swift.String
  public var passportNumber: Swift.String
  public var passportExpiryDate: Foundation.Date?
  public var frequentFlyerNumber: Swift.String
  public var passportURLStr: Swift.String
  public var visaURLStr: Swift.String
  public var mealPreferenceSSR: Swift.String?
  public var wheelChairRequestSSR: Swift.String?
  public var luggageCode: [Swift.String]
  public var covid: ShareTripSDK.CovidTestInfo
  public var travelInsurance: ShareTripSDK.TravelInsuranceInfo
  public var titleName: ShareTripSDK.TitleType {
    get
  }
  public init(flightDate: Foundation.Date, travellerType: ShareTripSDK.TravellerType, luggageCode: [Swift.String])
  public var passengerDictionary: [Swift.String : Any] {
    get
  }
  @objc deinit
}
public struct PassengersAdditionalReq {
  public var selectedWheelChairOption: Swift.String
  public var selectedMealPreferenceOption: Swift.String
  public var selectedCovid19Testcode: Swift.String
  public var selectedCovid19TestOption: ShareTripSDK.CovidTestOptions?
  public var covid19TestSubtitle: Swift.String
  public var covid19TestAddress: Swift.String
  public var travelInsuranceSubtitle: Swift.String
  public var selectedTravelInsuranceCode: Swift.String
  public var selectedTravelInsuranceCodeOption: ShareTripSDK.TravelInsuranceOption?
  public init()
  public init(selectedWheelChairOption: Swift.String?, selectedMealPreferenceOption: Swift.String)
}
public protocol PageIndicatorView : AnyObject {
  var view: UIKit.UIView { get }
  var page: Swift.Int { get set }
  var numberOfPages: Swift.Int { get set }
}
extension UIKit.UIPageControl : ShareTripSDK.PageIndicatorView {
  @_Concurrency.MainActor(unsafe) public var view: UIKit.UIView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var page: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func sizeToFit()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class LabelPageIndicator : UIKit.UILabel, ShareTripSDK.PageIndicatorView {
  @_Concurrency.MainActor(unsafe) public var view: UIKit.UIView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var numberOfPages: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var page: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func sizeToFit()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CustomLabelPageIndicator : UIKit.UILabel, ShareTripSDK.PageIndicatorView {
  @_Concurrency.MainActor(unsafe) public var view: UIKit.UIView {
    get
  }
  @_Concurrency.MainActor(unsafe) public var numberOfPages: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var page: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func sizeToFit()
  @objc deinit
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func setupNavigationItems(withTitle title: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setupNavWithoutRightBarItem(withTitle title: Swift.String)
}
public enum FlightFareCellType {
  case rowData
  case baggage
  case covid19Test
  case travelInsurance
  case visaCourierFee
  case advanceIncomeTax
  case dashLine
  case totalBeforeDiscount
  case stCharge
  case total
  case couponDiscount
  public static func == (a: ShareTripSDK.FlightFareCellType, b: ShareTripSDK.FlightFareCellType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PlaceholderView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func updateConstraints()
  @objc deinit
}
extension ShareTripSDK.PlaceholderView : Kingfisher.Placeholder {
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) public var previousViewController: UIKit.UIViewController? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var childForStatusBarStyle: UIKit.UIViewController? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var childForStatusBarHidden: UIKit.UIViewController? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public func popToViewController(ofClass: Swift.AnyClass, animated: Swift.Bool = true)
}
public struct TowColGivenNameInputCellData {
  public let imageString: Swift.String
  public let titleNameTitle: Swift.String
  public let titleNameText: Swift.String
  public let givenNameTitle: Swift.String
  public let givenNameText: Swift.String
  public let pickerData: [Swift.String]
  public let titleNameState: ShareTripSDK.ValidationState
  public let givenNameState: ShareTripSDK.ValidationState
  public let indexPath: Foundation.IndexPath?
  public let delegate: ShareTripSDK.TowColGivenNameInputCellDelegate?
  public init(imageString: Swift.String, titleNameTitle: Swift.String, titleNameText: Swift.String, givenNameTitle: Swift.String, givenNameText: Swift.String, pickerData: [Swift.String], titleNameState: ShareTripSDK.ValidationState = .normal, givenNameState: ShareTripSDK.ValidationState = .normal, indexPath: Foundation.IndexPath? = nil, delegate: ShareTripSDK.TowColGivenNameInputCellDelegate? = nil)
}
public protocol TowColGivenNameInputCellDelegate : AnyObject {
  func titleNameChanged(for indexPath: Foundation.IndexPath?, text: Swift.String, selectedRow: Swift.Int)
  func givenNameChanged(for indexPath: Foundation.IndexPath?, text: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class TowColGivenNameInputCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(_ data: ShareTripSDK.TowColGivenNameInputCellData)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ShareTripSDK.TowColGivenNameInputCell : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FilterPriceRangeCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) weak public var delegate: ShareTripSDK.PriceRangeCellDelegate?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var minPriceLabel: UIKit.UILabel!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var maxPriceLabel: UIKit.UILabel!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var rangeSeekSlider: ShareTripSDK.RangeSeekSlider!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var cellContainerView: UIKit.UIView!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func setupView()
  @_Concurrency.MainActor(unsafe) public func configure(priceRange: ShareTripSDK.FilterPriceRange, delegate: ShareTripSDK.PriceRangeCellDelegate)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ShareTripSDK.FilterPriceRangeCell : ShareTripSDK.RangeSeekSliderDelegate {
  @_Concurrency.MainActor(unsafe) public func rangeSeekSlider(_ slider: ShareTripSDK.RangeSeekSlider, didChange minValue: CoreFoundation.CGFloat, maxValue: CoreFoundation.CGFloat)
}
public protocol ConfigurableTableViewCellData {
  static var reuseableIDForContainer: Swift.String { get }
}
extension ShareTripSDK.ConfigurableTableViewCellData {
  public static var reuseableIDForContainer: Swift.String {
    get
  }
}
public protocol ConfigurableTableViewCellDataContainer {
  associatedtype AccecptableViewModelType : ShareTripSDK.ConfigurableTableViewCellData
  static var reuseableContainerID: Swift.String { get }
}
extension ShareTripSDK.ConfigurableTableViewCellDataContainer {
  public static var reuseableContainerID: Swift.String {
    get
  }
}
public protocol ConfigurableTableViewCell : UIKit.UITableViewCell {
  func configure(viewModel: ShareTripSDK.ConfigurableTableViewCellData)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class AmenityRowView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public let firstItemView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public let firstItemImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) final public let firstItemLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let secondItemView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public let secondItemImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) final public let secondItemLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func updateConstraints()
  @objc deinit
}
public protocol CollapsibleHeaderViewDelegate : AnyObject {
  func toggleSection(_ section: Swift.Int)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CollapsibleHeaderView : UIKit.UITableViewHeaderFooterView {
  @_Concurrency.MainActor(unsafe) weak public var delegate: ShareTripSDK.CollapsibleHeaderViewDelegate?
  @_Concurrency.MainActor(unsafe) public var section: Swift.Int
  @_Concurrency.MainActor(unsafe) final public let titleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let arrowImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) final public let horizontalLineView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func setCollapsed(_ collapsed: Swift.Bool)
  @objc deinit
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func delay(_ delay: Swift.Double, closure: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func showAlert(message: Swift.String, withTitle title: Swift.String? = nil, buttonTitle: Swift.String = "OK", handler: ((UIKit.UIAlertAction) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func showError(error: Foundation.NSError)
  @_Concurrency.MainActor(unsafe) public var isModal: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var topbarHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public var statusBarHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public var navigationBarHeight: CoreFoundation.CGFloat {
    get
  }
}
public class FlightPriceBreakdownViewModel {
  public var selectedDiscountOption: ShareTripSDK.DiscountOptionType
  public init(priceInfoTableData: ShareTripSDK.PriceInfoTableData)
  public func updatePriceTable(with priceTableData: ShareTripSDK.PriceInfoTableData)
  public func setConversionRate(_ rate: Swift.Double)
  public func setIsUsdPaymentAvilable(_ isAvailable: Swift.Bool)
  public func getRowData(index: Swift.Int) -> ShareTripSDK.PriceInfoFareCellData?
  public var flightFareSctions: [[ShareTripSDK.FlightFareCellType]] {
    get
  }
  public var moneyConversionRate: Swift.Double {
    get
  }
  public var totalPrice: Swift.Double {
    get
  }
  public var totalPayable: Swift.Double {
    get
  }
  public var additionalCharge: Swift.Double {
    get
  }
  public var totalDiscount: Swift.Double {
    get
  }
  public var discount: Swift.Double {
    get
  }
  public var couponDiscount: Swift.Double {
    get
  }
  public var baggagePrice: Swift.Double {
    get
  }
  public var covidTestPrice: Swift.Double {
    get
  }
  public var travelInsuranceCharge: Swift.Double {
    get
  }
  public var advanceIncomeTax: Swift.Double {
    get
  }
  public var convenienceFee: Swift.Double {
    get
  }
  public var currencyImage: UIKit.UIImage? {
    get
  }
  public var currency: ShareTripSDK.Currency {
    get
  }
  @objc deinit
}
public enum TravellerType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case adult
  case child
  case infant
  public var requiredInfo: Swift.String {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public init(intValue: Swift.Int)
  public static func getTravellerType(from dateOfBirth: Foundation.Date) -> ShareTripSDK.TravellerType
  public init?(rawValue: Swift.String)
  public typealias AllCases = [ShareTripSDK.TravellerType]
  public typealias RawValue = Swift.String
  public static var allCases: [ShareTripSDK.TravellerType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UICollectionView {
  @_Concurrency.MainActor(unsafe) public func registerCell<T>(_ cellClass: T.Type) where T : UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) public func registerNibCell<T>(_ cellClass: T.Type, nibName: Swift.String = T.reuseID) where T : UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) public func dequeueReusableCell<T>(forIndexPath indexPath: Foundation.IndexPath) -> T where T : UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) public func addTopBackgroundView(viewColor: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func scrollToNearestVisibleCollectionViewCell()
}
public struct FlightDetailsResponse : Swift.Decodable {
  public let promotionalCoupon: [ShareTripSDK.PromotionalCoupon]
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class DataPickerView : UIKit.UIPickerView, UIKit.UIPickerViewDataSource, UIKit.UIPickerViewDelegate {
  @_Concurrency.MainActor(unsafe) public var data: [Swift.String]? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var selectedValue: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var selectedRow: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc public func numberOfComponents(in pickerView: UIKit.UIPickerView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func pickerView(_ pickerView: UIKit.UIPickerView, numberOfRowsInComponent component: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func pickerView(_ pickerView: UIKit.UIPickerView, titleForRow row: Swift.Int, forComponent component: Swift.Int) -> Swift.String?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol DiscountOptionViewDelegate : AnyObject {
  func selectedOptionChanged(_ selectedOptionView: ShareTripSDK.DiscountOptionCollapsibleView)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class DiscountOptionsContainer : UIKit.UIStackView {
  @_Concurrency.MainActor(unsafe) public var discountOptionViews: [ShareTripSDK.DiscountOptionCollapsibleView] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var mustSelectOne: Swift.Bool
  @_Concurrency.MainActor(unsafe) weak public var delegate: ShareTripSDK.DiscountOptionViewDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public func clearView()
  @objc deinit
}
extension ShareTripSDK.DiscountOptionsContainer : ShareTripSDK.DiscountOptionCollapsibleViewDelegate {
  @_Concurrency.MainActor(unsafe) public func onDisCountOptionSelected(discountOptionView: ShareTripSDK.DiscountOptionCollapsibleView)
}
public struct LoginCardViewData {
  public let title: Swift.String
  public let subtitle: Swift.String
  public let imageName: Swift.String
  public let gradientBackground: Swift.Bool
  public init(title: Swift.String, subtitle: Swift.String, imageName: Swift.String, gradientBackground: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class LoginCardView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var callbackClosure: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, viewData: ShareTripSDK.LoginCardViewData, callbackClosure: (() -> Swift.Void)?)
  @objc deinit
}
public struct NameInputGuideCellData : ShareTripSDK.ConfigurableTableViewCellData {
  public let instructions: Swift.String
  public init(instructions: Swift.String)
  public static var flightInstruction: ShareTripSDK.NameInputGuideCellData {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TotalFareCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(subTotal: Swift.Double, discount: Swift.Double)
  @objc deinit
}
public protocol FirstNameInputCellDelegate : AnyObject {
  func titleChanged(titleType: ShareTripSDK.TitleType, indexPath: Foundation.IndexPath)
  func firstNameChanged(name: Swift.String, indexPath: Foundation.IndexPath)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FirstNameInputCell : UIKit.UITableViewCell {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var titleTextField: ShareTripSDK.NoSelectTextField!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var firstNameTextField: UIKit.UITextField!
  @_Concurrency.MainActor(unsafe) public var cellIndexPath: Foundation.IndexPath!
  @_Concurrency.MainActor(unsafe) weak public var delegate: ShareTripSDK.FirstNameInputCellDelegate?
  @_Concurrency.MainActor(unsafe) public var picker: ShareTripSDK.DataPickerView?
  @_Concurrency.MainActor(unsafe) public var pickerAccessory: UIKit.UIToolbar?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func cancelBtnClicked(_ button: UIKit.UIBarButtonItem?)
  @objc @_Concurrency.MainActor(unsafe) public func doneBtnClicked(_ button: UIKit.UIBarButtonItem?)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum ClassType : Swift.String, Swift.Codable {
  case economy
  case premiumEconomy
  case business
  case firstClass
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TripType : Swift.String, Swift.Codable {
  case oneWay
  case roundTrip
  case multiCity
  public static var allCases: [ShareTripSDK.TripType] {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class DateTime : Swift.Codable {
  final public let date: Swift.String
  final public let time: Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class FlightPriceBreakdown : Swift.Codable {
  final public let discount: Swift.Double, subTotal: Swift.Double, couponAmount: Swift.Double
  final public let total: Swift.Double, originPrice: Swift.Double, discountAmount: Swift.Double
  final public let advanceIncomeTax: Swift.Double?
  final public let currency: Swift.String
  final public let details: [ShareTripSDK.FlightPriceBreakdownDetail]
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class FlightPriceBreakdownDetail : Swift.Codable {
  final public let type: ShareTripSDK.TravellerType
  final public let baseFare: Swift.Double, tax: Swift.Double, total: Swift.Double
  final public let currency: Swift.String
  final public let numberPaxes: Swift.Int
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class ImageSlideshowItem : UIKit.UIScrollView, UIKit.UIScrollViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) final public let imageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) final public let activityIndicator: ShareTripSDK.ActivityIndicatorView?
  @objc @_Concurrency.MainActor(unsafe) final public let image: ShareTripSDK.InputSource
  @objc @_Concurrency.MainActor(unsafe) open var gestureRecognizer: UIKit.UITapGestureRecognizer?
  @objc @_Concurrency.MainActor(unsafe) final public let zoomEnabled: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var zoomInInitially: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) open var maximumScale: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) public func loadImage()
  @objc @_Concurrency.MainActor(unsafe) public func cancelPendingLoad()
  @_Concurrency.MainActor(unsafe) @objc open func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc open func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @objc deinit
}
public class STCity : Swift.Codable {
  final public let name: Swift.String?
  final public let cityCode: Swift.String?
  final public let countryCode: Swift.String?
  final public let countryName: Swift.String?
  final public let image: Swift.String?
  final public let cityName: Swift.String?
  final public let minPrice: Swift.Int?
  final public let currency: Swift.String?
  final public let count: Swift.Int?
  public var commonCityName: Swift.String? {
    get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class TripCoinViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(earnedTripCoin: Swift.Int, redeemedTripCoin: Swift.Int)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class NoSelectTextField : UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class MyBLHomeVC : ShareTripSDK.ViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ShareTripSDK.MyBLHomeVC : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
}
extension ShareTripSDK.MyBLHomeVC : ShareTripSDK.StoryboardBased {
  @_Concurrency.MainActor(unsafe) public static var storyboardName: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SharePostTVCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setHighlighted(_ highlighted: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configureCell(with buttonTitle: Swift.String = "SHARE POST")
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SingleButtonCardCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public var callBack: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func configure(title: Swift.String, titleColor: UIKit.UIColor, backgroundColor: UIKit.UIColor)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct EmptyBookingMessage {
  public static func getMessage(for serviceType: ShareTripSDK.ServiceType) -> Swift.String
}
public struct FlightPriceIndicatorResponse : Swift.Codable {
  public let max: ShareTripSDK.MinMaxFlightPriceIndicator?, min: ShareTripSDK.MinMaxFlightPriceIndicator?
  public let fare: [ShareTripSDK.DateFlightPriceIndicator]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DateFlightPriceIndicator : Swift.Codable {
  public let date: Swift.String
  public let direct: Swift.Double, nonDirect: Swift.Double
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct MinMaxFlightPriceIndicator : Swift.Codable {
  public let direct: Swift.Double, nonDirect: Swift.Double
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum AccountCellInfo {
  case login
  case editProfile
  case quickPick
  case referEarn
  case leaderboard
  case changePassword
  case savedCards
  case visaTrack
  case logout
  case manageData
  case writeReview
  case faq
  case support
  case terms
  case privacy
  case contact
  public var title: Swift.String {
    get
  }
  public static var topSection: [ShareTripSDK.AccountCellInfo] {
    get
  }
  public static var bottomSecion: [ShareTripSDK.AccountCellInfo] {
    get
  }
  public static func == (a: ShareTripSDK.AccountCellInfo, b: ShareTripSDK.AccountCellInfo) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor(unsafe) open class FullScreenSlideshowViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) open var slideshow: ShareTripSDK.ImageSlideshow
  @objc @_Concurrency.MainActor(unsafe) open var closeButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) open var closeButtonFrame: CoreFoundation.CGRect?
  @objc @_Concurrency.MainActor(unsafe) open var pageSelected: ((_ page: Swift.Int) -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) open var initialPage: Swift.Int
  @objc @_Concurrency.MainActor(unsafe) open var inputs: [ShareTripSDK.InputSource]?
  @objc @_Concurrency.MainActor(unsafe) open var backgroundColor: UIKit.UIColor
  @objc @_Concurrency.MainActor(unsafe) open var zoomEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class STUserAccount : Swift.Codable {
  public var titleName: ShareTripSDK.TitleType
  public var givenName: Swift.String
  public var surName: Swift.String
  public var designation: Swift.String
  public var address1: Swift.String
  public var address2: Swift.String?
  public var profession: Swift.String?
  public var mobileNumber: Swift.String
  public var avatar: Swift.String
  public var gender: ShareTripSDK.GenderType?
  public var dateOfBirth: Swift.String?
  final public let username: Swift.String
  public var email: Swift.String
  public var referralCode: Swift.String
  public var nationality: Swift.String
  public var passportNumber: Swift.String
  public var passportExpireDate: Swift.String?
  public var country: Swift.String
  public var postCode: Swift.String
  public var passport: Swift.String
  public var passportCopy: Swift.String
  public var visaCopy: Swift.String
  public var frequentFlyerNumber: Swift.String
  public var seatPreference: Swift.String
  public var mealPreference: Swift.String
  public var totalPoints: Swift.Int64
  public var redeemablePoints: Swift.Int64
  public var profileLevel: ShareTripSDK.STUserAccount.UserStatus?
  public var otherPassengers: [ShareTripSDK.STPassenger]?
  final public let coinSettings: ShareTripSDK.CoinSettings?
  required public init(from decoder: Swift.Decoder) throws
  public func update(with baseUser: ShareTripSDK.STUserProfile)
  public func getPassenger() -> ShareTripSDK.STPassenger
  public func getAgeCount() -> Swift.Int?
  public enum UserStatus : Swift.String, Swift.CaseIterable, Swift.Codable {
    case silver
    case gold
    case platinum
    case unknown
    public init?(rawValue: Swift.String)
    public typealias AllCases = [ShareTripSDK.STUserAccount.UserStatus]
    public typealias RawValue = Swift.String
    public static var allCases: [ShareTripSDK.STUserAccount.UserStatus] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
extension Foundation.Data {
  public func toString() -> Swift.String?
}
extension Swift.String {
  public var isReallyEmpty: Swift.Bool {
    get
  }
  public var boolValue: Swift.Bool {
    get
  }
  public func toDate() -> Foundation.Date?
  public func containsWhitespaceAndNewlines() -> Swift.Bool
  public func capitalizingFirstLetter() -> Swift.String
  public mutating func capitalizeFirstLetter()
  public func isValidPhoneNumber() -> Swift.Bool
  public func isValidNumeric() -> Swift.Bool
  public func isValidAlphaNumeric() -> Swift.Bool
  public func isValidAlpha() -> Swift.Bool
  public func strikeThrough() -> Foundation.NSAttributedString
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FlightBookingHistoryListVC : UIKit.UITableViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableView.Style)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct TravelInsuranceInfo : Swift.Codable {
  public let code: Swift.String?
  public let optionsCode: Swift.String?
  public init(code: Swift.String? = "", optionsCode: Swift.String? = "")
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PriceInfoTableData {
  public var originPrice: Swift.Double
  public var totalPrice: Swift.Double
  public var discount: Swift.Double
  public var rowDatas: [ShareTripSDK.PriceInfoFareCellData]
  public var baggagePrice: Swift.Double
  public var covid19TestPrice: Swift.Double
  public var travelInsuraceCharge: Swift.Double
  public var visaCourierCharge: Swift.Double
  public var advanceIncomeTax: Swift.Double
  public var couponsDiscount: Swift.Double
  public var stCharge: Swift.Double
  public var withDiscount: Swift.Bool
  public var baseFare: Swift.Double {
    get
  }
  public init()
  public init(originPrice: Swift.Double, totalPrice: Swift.Double, rowDatas: [ShareTripSDK.PriceInfoFareCellData], visaCourierCharge: Swift.Double, stCharge: Swift.Double)
  public init(totalPrice: Swift.Double, discount: Swift.Double, rowDatas: [ShareTripSDK.PriceInfoFareCellData])
  public init(totalPrice: Swift.Double, discount: Swift.Double, rowDatas: [ShareTripSDK.PriceInfoFareCellData], stCharge: Swift.Double)
  public init(originPrice: Swift.Double, totalPrice: Swift.Double, discount: Swift.Double, rowDatas: [ShareTripSDK.PriceInfoFareCellData], baggagePrice: Swift.Double, covid19TestPrice: Swift.Double, travelInsuraceCharge: Swift.Double, advanceIncomeTax: Swift.Double, couponsDiscount: Swift.Double, withDiscount: Swift.Bool = true)
}
public protocol PassportVisaCellDelegate : AnyObject {
  func passportViewTapped(cellIndexPath: Foundation.IndexPath)
  func visaViewTapped(cellIndexPath: Foundation.IndexPath)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PassportVisaCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public var count: Swift.Int
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(passportUrl: Swift.String, visaUrl: Swift.String, cellIndexPath: Foundation.IndexPath, delegate: ShareTripSDK.PassportVisaCellDelegate)
  @_Concurrency.MainActor(unsafe) public func configCell(cellIndexPath: Foundation.IndexPath, delegate: ShareTripSDK.PassportVisaCellDelegate)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIColor {
  convenience public init(redInt: Swift.Int, greenInt: Swift.Int, blueInt: Swift.Int, alpha: CoreFoundation.CGFloat = 1.0)
  convenience public init(hex: Swift.Int, alpha: CoreFoundation.CGFloat = 1.0)
  public static var appPrimary: UIKit.UIColor {
    get
  }
  public static var appPrimaryLight: UIKit.UIColor {
    get
  }
  public static var appPrimaryDark: UIKit.UIColor {
    get
  }
  @nonobjc public class var clearBlue: UIKit.UIColor {
    get
  }
  @nonobjc public class var skyBlue: UIKit.UIColor {
    get
  }
  @nonobjc public class var clearBlueTwo: UIKit.UIColor {
    get
  }
  @nonobjc public class var blueBlue: UIKit.UIColor {
    get
  }
  public static var appSecondary: UIKit.UIColor {
    get
  }
  public static var appSecondaryLight: UIKit.UIColor {
    get
  }
  public static var appSecondaryDark: UIKit.UIColor {
    get
  }
  public static var templateGray: UIKit.UIColor {
    get
  }
  public static var silver: UIKit.UIColor {
    get
  }
  public static var yellowOrange: UIKit.UIColor {
    get
  }
  public static var midYellowOrange: UIKit.UIColor {
    get
  }
  public static var midOrrange: UIKit.UIColor {
    get
  }
  public static var dealsRed: UIKit.UIColor {
    get
  }
  public static var starYellow: UIKit.UIColor {
    get
  }
  public static var platinum: UIKit.UIColor {
    get
  }
  public static var iceBlue: UIKit.UIColor {
    get
  }
  @nonobjc public class var offWhite: UIKit.UIColor {
    get
  }
  @nonobjc public class var offWhiteLight: UIKit.UIColor {
    get
  }
  @nonobjc public class var paleGray: UIKit.UIColor {
    get
  }
  @nonobjc public class var paleGrayTwo: UIKit.UIColor {
    get
  }
  @nonobjc public class var paleGrayThree: UIKit.UIColor {
    get
  }
  @nonobjc public class var brownishGray: UIKit.UIColor {
    get
  }
  @nonobjc public class var greyishBrown: UIKit.UIColor {
    get
  }
  @nonobjc public class var charcoalGray: UIKit.UIColor {
    get
  }
  @nonobjc public class var paleLilac: UIKit.UIColor {
    get
  }
  @nonobjc public class var whitishGray: UIKit.UIColor {
    get
  }
  @nonobjc public class var lightBlueGray: UIKit.UIColor {
    get
  }
  @nonobjc public class var lightBlueGrayTwo: UIKit.UIColor {
    get
  }
  @nonobjc public class var blueGray: UIKit.UIColor {
    get
  }
  @nonobjc public class var tintGray: UIKit.UIColor {
    get
  }
  @nonobjc public class var orangeyRed: UIKit.UIColor {
    get
  }
  @nonobjc public class var tangerine: UIKit.UIColor {
    get
  }
  @nonobjc public class var marigold: UIKit.UIColor {
    get
  }
  @nonobjc public class var marigoldTwo: UIKit.UIColor {
    get
  }
  @nonobjc public class var weirdGreen: UIKit.UIColor {
    get
  }
  @nonobjc public class var midGreen: UIKit.UIColor {
    get
  }
  @nonobjc public class var midGreenTwo: UIKit.UIColor {
    get
  }
  @nonobjc public class var robinSEgg: UIKit.UIColor {
    get
  }
  @nonobjc public class var deepSkyBlue: UIKit.UIColor {
    get
  }
  @nonobjc public class var warmBlue: UIKit.UIColor {
    get
  }
  @nonobjc public class var reddish: UIKit.UIColor {
    get
  }
  @nonobjc public class var reddishPink: UIKit.UIColor {
    get
  }
  @nonobjc public class var veryLightPink: UIKit.UIColor {
    get
  }
}
extension UIKit.UIImage {
  public func tint(with fillColor: UIKit.UIColor) -> UIKit.UIImage?
  public static func image(named: Swift.String) -> UIKit.UIImage?
}
extension UIKit.UIImage {
  public enum JPEGQuality : CoreFoundation.CGFloat {
    case lowest
    case low
    case medium
    case high
    case highest
    public init?(rawValue: CoreFoundation.CGFloat)
    public typealias RawValue = CoreFoundation.CGFloat
    public var rawValue: CoreFoundation.CGFloat {
      get
    }
  }
  public func jpeg(_ jpegQuality: UIKit.UIImage.JPEGQuality) -> Foundation.Data?
  public func getResizedImage(maxSize: CoreFoundation.CGSize = CGSize(width: 500.0, height: 500.0)) -> UIKit.UIImage
  public func getResizedImageData(maxSize: CoreFoundation.CGSize = CGSize(width: 800.0, height: 800.0)) -> Foundation.Data?
  public func resized(withPercentage percentage: CoreFoundation.CGFloat) -> UIKit.UIImage?
  public func resized(toWidth width: CoreFoundation.CGFloat) -> UIKit.UIImage?
  public func resizedTo1MB() -> UIKit.UIImage?
  public func getResizedDataTo1MB() -> Foundation.Data?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BriefInfoCardCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public func configure(countryName: Swift.String, duration: Swift.String, title: Swift.String, description: Swift.String)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PostCardCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func configure(postCardCellData: ShareTripSDK.PostCardCell.PostCardCellData)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ShareTripSDK.PostCardCell {
  public struct PostCardCellData {
    public let imageUrl: Swift.String?
    public let title: Swift.String?
    public let text: Swift.String?
    public init(imageUrl: Swift.String?, title: Swift.String?, text: Swift.String?)
  }
}
extension ShareTripSDK.TravellerClassViewModel {
  public enum Rows {
    case traveller(ShareTripSDK.TravellerType)
    case childrenAge
    case flightClass(ShareTripSDK.FlightClass)
  }
}
extension ShareTripSDK.TravellerClassViewModel {
  @_hasMissingDesignatedInitializers public class Callback {
    public var didChangeAdultCount: () -> Swift.Void
    public var didChangeChildCount: () -> Swift.Void
    public var didFailValidation: (Swift.String) -> Swift.Void
    public var didPassValidation: () -> Swift.Void
    @objc deinit
  }
}
public class TravellerClassViewModel {
  public var travelDate: Foundation.Date?
  final public let callback: ShareTripSDK.TravellerClassViewModel.Callback
  public var adultCount: Swift.Int {
    get
  }
  public var infantCount: Swift.Int {
    get
  }
  public var sections: [[ShareTripSDK.TravellerClassViewModel.Rows]] {
    get
  }
  public var childrenAges: [Swift.Int : Foundation.Date?] {
    get
  }
  public var flightClass: ShareTripSDK.FlightClass {
    get
  }
  public var childCount: Swift.Int {
    get
  }
  public var totalTravelersCount: Swift.Int {
    get
  }
  public init()
  public func validateInputs()
  public func getChidrenAgeStrings() -> [Swift.String]
  public func updateTravellerCount(_ count: Swift.Int, for traveller: ShareTripSDK.TravellerType)
  public func getMaxNumber(for traveller: ShareTripSDK.TravellerType) -> Swift.Int
  public func getMinNumber(for traveller: ShareTripSDK.TravellerType) -> Swift.Int
  public func setChildAge(at index: Swift.Int, _ ageYear: Foundation.Date?)
  public func getDateSelectionCellViewModel(for indexPath: Foundation.IndexPath) -> ShareTripSDK.ConfigurableTableViewCellData
  public func setFlightClass(_ selectedClass: ShareTripSDK.FlightClass)
  public func travellerCount(for travellerType: ShareTripSDK.TravellerType) -> Swift.Int
  public func getTravelerNumber(for traveler: ShareTripSDK.TravellerType) -> Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LocalNotifier {
  public func scheduleNotification(title: Swift.String, subtitle: Swift.String, dateComponent: Foundation.DateComponents, repeats: Swift.Bool = false)
  public func scheduleNotification(title: Swift.String, subtitle: Swift.String, timeInterval: Foundation.TimeInterval, repeats: Swift.Bool = false)
  @objc deinit
}
extension UIKit.UIToolbar {
  @_Concurrency.MainActor(unsafe) public static func toolbarPicker(title: Swift.String, tag: Swift.Int, target: Any?, doneSelector: ObjectiveC.Selector?, cancelSelector: ObjectiveC.Selector?) -> UIKit.UIToolbar
  @_Concurrency.MainActor(unsafe) public static func toolbarPicker2(title: Swift.String, tag: Swift.Int, target: Any?, doneSelector: ObjectiveC.Selector?, cancelSelector: ObjectiveC.Selector?) -> UIKit.UIToolbar
  @_Concurrency.MainActor(unsafe) public static func toolbarPicker(title: Swift.String, target: Any?, doneAction: ObjectiveC.Selector?) -> UIKit.UIToolbar
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class GenderSelectionCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public var didSelectGender: (ShareTripSDK.GenderType) -> Swift.Void
  @objc deinit
}
extension ShareTripSDK.GenderSelectionCell : ShareTripSDK.ConfigurableTableViewCellDataContainer {
  public typealias AccecptableViewModelType = ShareTripSDK.GenderSelectionCellData
}
extension ShareTripSDK.GenderSelectionCell : ShareTripSDK.ConfigurableTableViewCell {
  @_Concurrency.MainActor(unsafe) public func configure(viewModel: ShareTripSDK.ConfigurableTableViewCellData)
}
public struct LoadingData {
  public let title: Swift.String
  public let subtitle: Swift.String
  public let animationName: Swift.String
  public init(title: Swift.String, subtitle: Swift.String, animationName: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class LoadingVC : ShareTripSDK.ViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class HorizontalLineCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func configure(lineHeight: CoreFoundation.CGFloat)
  @objc deinit
}
public class Country : Swift.Codable {
  final public let code: Swift.String
  final public let name: Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public protocol TNCService {
  func getTNC(completion: @escaping (Alamofire.AFResult<ShareTripSDK.TNC>) -> Swift.Void)
}
public protocol FAQService {
  func getFAQ(completion: @escaping (Alamofire.AFResult<ShareTripSDK.FAQ>) -> Swift.Void)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PaymentConfirmationVC : ShareTripSDK.ViewController {
  @_Concurrency.MainActor(unsafe) public var paymentConfirmationData: ShareTripSDK.PaymentConfirmationData!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ShareTripSDK.PaymentConfirmationVC : ShareTripSDK.StoryboardBased {
  @_Concurrency.MainActor(unsafe) public static var storyboardName: Swift.String {
    get
  }
}
public protocol InputTextCellDelegate : AnyObject {
  func inputTextDidChange(_ text: Swift.String?, indexPath: Foundation.IndexPath?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class InputTextCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public let inputTextField: UIKit.UITextField
  @_Concurrency.MainActor(unsafe) weak public var delegate: ShareTripSDK.InputTextCellDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func configure(text: Swift.String?, placeholder: Swift.String, indexPath: Foundation.IndexPath, delegate: ShareTripSDK.InputTextCellDelegate)
  @objc deinit
}
extension ShareTripSDK.InputTextCell : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FareCardSingleLineCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(currency: Swift.String, orginPrice: Swift.Double, discountPrice: Swift.Double, discount: Swift.Double, refundable: Swift.String)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Foundation.Data {
  public var prettyPrintedJSONString: Foundation.NSString? {
    get
  }
}
extension UIKit.UITableViewCell : ShareTripSDK.ReusableView {
}
extension UIKit.UICollectionViewCell : ShareTripSDK.ReusableView {
}
extension UIKit.UITableViewHeaderFooterView : ShareTripSDK.ReusableView {
}
public enum TitleType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case mr
  case ms
  case master
  case miss
  public init(from decoder: Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias AllCases = [ShareTripSDK.TitleType]
  public typealias RawValue = Swift.String
  public static var allCases: [ShareTripSDK.TitleType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum BookingHistoryOption : Swift.Int {
  case hotel
  case flight
  case holiday
  case transport
  case tours
  case visa
  public var title: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public class FlightInfoProvider : ShareTripSDK.WebViewDataSource {
  public var flightRuleResponse: ShareTripSDK.FlightRuleResponse?
  public init(searchId: Swift.String, sequenceCode: Swift.String, flightDetailInfoType: ShareTripSDK.FlightDetailInfoType)
  public func getSearchId() -> Swift.String
  public func getSequenceCode() -> Swift.String
  public func getDetailInfoType() -> ShareTripSDK.FlightDetailInfoType
  public func setDetailInfoType(_ infoType: ShareTripSDK.FlightDetailInfoType)
  public func fetchWebData(completionHandler: @escaping (Swift.Result<Swift.String, Swift.Error>) -> Swift.Void)
  public func getHtmlString() -> Swift.String
  @objc deinit
}
extension UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) public func addCharacterSpacing(kernValue: Swift.Double = 1.15)
}
public class FlightFilterViewModel {
  final public let filter: ShareTripSDK.FlightFilter
  public var filteredData: ShareTripSDK.FlightFilterData
  final public let flightClass: ShareTripSDK.FlightClass
  final public let flightRouteType: ShareTripSDK.FlightRouteType
  final public let flightCount: Swift.Int
  public init(filter: ShareTripSDK.FlightFilter, filteredData: ShareTripSDK.FlightFilterData, flightClass: ShareTripSDK.FlightClass, flightRouteType: ShareTripSDK.FlightRouteType, flightCount: Swift.Int)
  public func resetFilterData()
  public func setPriceRange(minValue: Swift.Int, maxValue: Swift.Int)
  public var filterPriceRange: ShareTripSDK.FilterPriceRange {
    get
  }
  public func scheduleHeaderTitle(for section: Swift.Int) -> Swift.String
  public func scheduleTitleImage(for timeSlot: ShareTripSDK.TimeSlot) -> Swift.String
  public func scheduleTitle(for timeSlot: ShareTripSDK.TimeSlot) -> Swift.String
  public func scheduleTimeSlot(for indexPath: Foundation.IndexPath) -> ShareTripSDK.TimeSlot
  public func scheduleFilterCellData(for indexPath: Foundation.IndexPath) -> ShareTripSDK.ScheduleFilterCellData
  public func departTimeSlotRowIndex() -> Swift.Int?
  public func returnTimeSlotRowIndex() -> Swift.Int?
  public func isScheduleTimeSlotSelected(for indexPath: Foundation.IndexPath) -> Swift.Bool
  public func handleScheduleOptionSelection(indexPath: Foundation.IndexPath, selected: Swift.Bool)
  public func filterOptionTitle(for filterType: ShareTripSDK.FlightFilterType, rowIndex: Swift.Int) -> Swift.String
  public func filterOptionChecked(for filterType: ShareTripSDK.FlightFilterType, rowIndex: Swift.Int) -> Swift.Bool
  public func hasFilterData(for filterType: ShareTripSDK.FlightFilterType) -> Swift.Bool
  public func handleSwitchStatusChange(for filterType: ShareTripSDK.FlightFilterType, rowIndex: Swift.Int, checked: Swift.Bool)
  public func isStoppageOptionChecked(for row: Swift.Int) -> Swift.Bool
  public func isAirlineOptionChecked(for row: Swift.Int) -> Swift.Bool
  public func isLayoverOptionChecked(for row: Swift.Int) -> Swift.Bool
  public func weightCheckboxChecked(for row: Swift.Int) -> Swift.Bool
  public func numberOfSections(for filterType: ShareTripSDK.FlightFilterType) -> Swift.Int
  public func numberOfRows(for filterType: ShareTripSDK.FlightFilterType, in section: Swift.Int = 0) -> Swift.Int
  @objc deinit
}
@objc public protocol InputSource {
  @objc func load(to imageView: UIKit.UIImageView, with callback: @escaping (_ image: UIKit.UIImage?) -> Swift.Void)
  @objc optional func cancelLoad(on imageView: UIKit.UIImageView)
}
@objc @objcMembers open class ImageSource : ObjectiveC.NSObject, ShareTripSDK.InputSource {
  @objc public init(image: UIKit.UIImage)
  @objc @available(*, deprecated, message: "Use `BundleImageSource` instead")
  public init?(imageString: Swift.String)
  @objc public func load(to imageView: UIKit.UIImageView, with callback: @escaping (UIKit.UIImage?) -> Swift.Void)
  @objc deinit
}
@objc @objcMembers open class BundleImageSource : ObjectiveC.NSObject, ShareTripSDK.InputSource {
  @objc public init(imageString: Swift.String)
  @objc public func load(to imageView: UIKit.UIImageView, with callback: @escaping (UIKit.UIImage?) -> Swift.Void)
  @objc deinit
}
@objc @objcMembers open class FileImageSource : ObjectiveC.NSObject, ShareTripSDK.InputSource {
  @objc public init(path: Swift.String)
  @objc public func load(to imageView: UIKit.UIImageView, with callback: @escaping (UIKit.UIImage?) -> Swift.Void)
  @objc deinit
}
extension ShareTripSDK.PaymentGatewaysViewModel {
  @_hasMissingDesignatedInitializers public class Callback {
    public var didFetchPaymentGateways: ([ShareTripSDK.PaymentGateway]) -> Swift.Void
    public var onPaymentGatewayFetchingFailed: (Swift.String) -> Swift.Void
    @objc deinit
  }
}
public class PaymentGatewaysViewModel {
  final public let callBack: ShareTripSDK.PaymentGatewaysViewModel.Callback
  public init(_ serviceType: ShareTripSDK.PaymentGatewayType, _ currency: Swift.String)
  public func filterPaymentGateways(filter: @escaping (ShareTripSDK.PaymentGateway) -> Swift.Bool)
  public func fetchPaymentGateways()
  @objc deinit
}
@objc public class KingfisherSource : ObjectiveC.NSObject, ShareTripSDK.InputSource {
  public var url: Foundation.URL
  public var placeholder: UIKit.UIImage?
  public var options: Kingfisher.KingfisherOptionsInfo?
  public init(url: Foundation.URL, placeholder: UIKit.UIImage? = nil, options: Kingfisher.KingfisherOptionsInfo? = nil)
  public init?(urlString: Swift.String, placeholder: UIKit.UIImage? = nil, options: Kingfisher.KingfisherOptionsInfo? = nil)
  @objc public func load(to imageView: UIKit.UIImageView, with callback: @escaping (UIKit.UIImage?) -> Swift.Void)
  @objc public func cancelLoad(on imageView: UIKit.UIImageView)
  @objc deinit
}
public struct GPStarPhoneCheckResponse : Swift.Codable {
  public let loyaltyStatus: Swift.String?
  public let success: Swift.Bool?
  public let otpExpirationInMin: Swift.Double?
  public init(loyaltyStatus: Swift.String?, success: Swift.Bool?, otpExpirationInMin: Swift.Double?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct GPStarOTPCheckResponse : Swift.Codable {
  public let success: Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class GradientView : UIKit.UIView {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var startColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var endColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var startLocation: Swift.Double {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var endLocation: Swift.Double {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var horizontalMode: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var diagonalMode: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
public protocol ItemShareable {
  func share(for serviceType: ShareTripSDK.ServiceType)
}
extension ShareTripSDK.ItemShareable where Self : ShareTripSDK.ViewController {
  public func share(for serviceType: ShareTripSDK.ServiceType)
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (ShareTripSDK.Reachability) -> ()
  public typealias NetworkUnreachable = (ShareTripSDK.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: ShareTripSDK.Reachability.NetworkStatus, b: ShareTripSDK.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    @available(*, deprecated, renamed: "unavailable")
    case none
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: ShareTripSDK.Reachability.Connection, b: ShareTripSDK.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: ShareTripSDK.Reachability.NetworkReachable?
  public var whenUnreachable: ShareTripSDK.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: ShareTripSDK.Reachability.Connection {
    get
  }
  public var connection: ShareTripSDK.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension ShareTripSDK.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
public enum FlightSearchCellOption {
  case routeType
  case airport
  case date
  case travellerClass
  case addCity
  case searchButton
  case explore
  case promotionalImage
  public static func == (a: ShareTripSDK.FlightSearchCellOption, b: ShareTripSDK.FlightSearchCellOption) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct FlightSearchInfo {
  public let departure: ShareTripSDK.Airport?
  public let arrival: ShareTripSDK.Airport?
  public let date: Foundation.Date?
}
public enum FlightScheduledType : Swift.Int {
  case departure
  case arrival
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct FlightFilterData : Swift.Encodable {
  public var price: ShareTripSDK.FlightPriceRange?
  public var airlines: [Swift.String]?
  public var stoppage: [Swift.Int]?
  public var layover: [Swift.String]?
  public var weight: [Swift.Int]?
  public var departTimeSlot: Swift.String?
  public var returnTimeSlot: Swift.String?
  public var isRefundable: [Swift.Int]?
  public var sort: Swift.String?
  public init()
  public init(airlines: [Swift.String]?)
  public func encode(to encoder: Swift.Encoder) throws
  public func hasAtleastOneFilter() -> Swift.Bool
  public mutating func reset()
}
public protocol PriceRangeCellDelegate : AnyObject {
  func rangeSeekSliderDidChange(minValue: CoreFoundation.CGFloat, maxValue: CoreFoundation.CGFloat)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PriceRangeCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) weak public var delegate: ShareTripSDK.PriceRangeCellDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setupView()
  @_Concurrency.MainActor(unsafe) public func configure(priceRange: ShareTripSDK.FilterPriceRange)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ShareTripSDK.PriceRangeCell : ShareTripSDK.RangeSeekSliderDelegate {
  @_Concurrency.MainActor(unsafe) public func rangeSeekSlider(_ slider: ShareTripSDK.RangeSeekSlider, didChange minValue: CoreFoundation.CGFloat, maxValue: CoreFoundation.CGFloat)
}
public enum LoginType : Swift.Codable {
  case email
  case apple
  case phone
  case google
  case skipped
  case facebook
  public static func == (a: ShareTripSDK.LoginType, b: ShareTripSDK.LoginType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct AuthToken : Swift.Codable {
  public let accessToken: Swift.String
  public let loginType: ShareTripSDK.LoginType
  public init(accessToken: Swift.String, loginType: ShareTripSDK.LoginType)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct TNC : Swift.Codable {
  public let common: ShareTripSDK.TOSBodyData, loyalty: ShareTripSDK.TOSBodyData, spin: ShareTripSDK.TOSBodyData
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct FAQ : Swift.Codable {
  public let commonOverview: ShareTripSDK.TOSBodyData, flight: ShareTripSDK.TOSBodyData, holiday: ShareTripSDK.TOSBodyData, hotel: ShareTripSDK.TOSBodyData
  public let tour: ShareTripSDK.TOSBodyData, transfer: ShareTripSDK.TOSBodyData, tripCoin: ShareTripSDK.TOSBodyData
  public init(commonOverview: ShareTripSDK.TOSBodyData, flight: ShareTripSDK.TOSBodyData, holiday: ShareTripSDK.TOSBodyData, hotel: ShareTripSDK.TOSBodyData, tour: ShareTripSDK.TOSBodyData, transfer: ShareTripSDK.TOSBodyData, tripCoin: ShareTripSDK.TOSBodyData)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct TOSBodyData : Swift.Codable {
  public let body: Swift.String, flag: Swift.String, title: Swift.String
  public init(body: Swift.String, flag: Swift.String, title: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension ShareTripSDK.PaymentWebVC {
  public struct TripCoinInfo {
    public init(earn: Swift.Int, redeem: Swift.Int, share: Swift.Int)
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PaymentWebVC : ShareTripSDK.ViewController {
  @_Concurrency.MainActor(unsafe) public init(paymentUrl: Foundation.URL, successUrl: Swift.String? = nil, failureUrl: Swift.String? = nil, serviceType: ShareTripSDK.ServiceType, tripCoinInfo: ShareTripSDK.PaymentWebVC.TripCoinInfo?, notificationScedules: [Foundation.DateComponents] = [])
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
}
extension ShareTripSDK.PaymentWebVC : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_: WebKit.WKWebView, didStartProvisionalNavigation _: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_: WebKit.WKWebView, didFinish _: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SingleLineInfoCardCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setHighlighted(_ highlighted: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(title: Swift.String)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Swift.Int {
  public var boolValue: Swift.Bool {
    get
  }
  public func withCommas() -> Swift.String
}
extension Swift.Int64 {
  public func withCommas() -> Swift.String
}
extension Swift.Double {
  public func withCommas() -> Swift.String
}
public struct FlightsRequiredData {
  public var searchId: Swift.String
  public var sessionId: Swift.String
  public var sequenceCode: Swift.String
  public var currencyType: Swift.String
  public var lastAirportIata: Swift.String
  public var firstAirportIata: Swift.String
  public var shareTripCoin: Swift.Int
  public var earningTripCoin: Swift.Int
}
public class TreasureBoxCoin : Swift.Codable {
  final public let passed: Swift.String
  final public let remaining: Swift.String
  final public let format: Swift.String
  final public let status: Swift.String
  public func totalWaitTime() -> Swift.Double
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class CoinSettings : Swift.Codable {
  final public let registrationEarnCoin: Swift.Int
  final public let referCoin: Swift.Int
  final public let treasureBoxCoin: Swift.Int
  final public let minCostPlayWheel: Swift.Int
  final public let maxTripCoinValue: Swift.Int
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public class CustomFloatingLayout : FloatingPanel.FloatingPanelLayout {
  public init()
  @objc public var position: FloatingPanel.FloatingPanelPosition {
    @objc get
  }
  @objc public var initialState: FloatingPanel.FloatingPanelState {
    @objc get
  }
  @objc public var anchors: [FloatingPanel.FloatingPanelState : FloatingPanel.FloatingPanelLayoutAnchoring] {
    @objc get
  }
  @objc deinit
}
public protocol RedeemTripcoinViewDelegate : AnyObject {
  func didChangeRedeemAmount(dicount: Swift.Double)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class LeftRightPriceInfoCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public func configure(title: Swift.String, amount: Swift.Double)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class STLog {
  public static var dateFormat: Swift.String
  public static var dateFormatter: Foundation.DateFormatter {
    get
  }
  public enum LogEvent : Swift.String {
    case error
    case info
    case debug
    case warn
    case severe
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public class func error(_ object: Any, fileName: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column, functionName: Swift.String = #function)
  public class func info(_ object: Any, fileName: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column, functionName: Swift.String = #function)
  public class func debug(_ object: Any, fileName: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column, functionName: Swift.String = #function)
  public class func warn(_ object: Any, fileName: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column, functionName: Swift.String = #function)
  public class func severe(_ object: Any, fileName: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column, functionName: Swift.String = #function)
  @objc deinit
}
extension Foundation.Date {
  public func toString() -> Swift.String
}
public struct InfoUploadCellData : ShareTripSDK.ConfigurableTableViewCellData {
  public let hasPassportCopy: Swift.Bool
  public let hasVisaCopy: Swift.Bool
  public let passportHidden: Swift.Bool
  public let visaHidden: Swift.Bool
  public init(hasPassportCopy: Swift.Bool, hasVisaCopy: Swift.Bool, passportHidden: Swift.Bool, visaHidden: Swift.Bool)
  public init(hasPassportCopy: Swift.Bool, hasVisaCopy: Swift.Bool)
  public init(hasPassportCopy: Swift.Bool, hasVisaCopy: Swift.Bool, passportHidden: Swift.Bool)
  public init(hasPassportCopy: Swift.Bool, hasVisaCopy: Swift.Bool, visaHidden: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SearchCountryTVCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configureCell(with countryName: Swift.String, _ visaRequirement: Swift.String, and indexPath: Swift.Int)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SingleLabelInfoTVCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public var title: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func config(labelText: Foundation.NSAttributedString, backgroundColor: UIKit.UIColor)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct STUser : Swift.Codable {
  public let token: Swift.String
  public let email: Swift.String
  public let username: Swift.String
  public let mobileNumber: Swift.String?
  public let title: Swift.String?
  public let firstName: Swift.String?
  public let lastName: Swift.String?
  public let designation: Swift.String?
  public let address: Swift.String?
  public let avatar: Swift.String?
  public let gender: Swift.Int?
  public let dob: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct AccountDeletionReason : Swift.Codable {
  public let id: Swift.String, text: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FlightBookingCell : UIKit.UITableViewCell {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var containerView: UIKit.UIView!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setHighlighted(_ highlighted: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(historyOption: ShareTripSDK.BookingHistoryOption, history: ShareTripSDK.FlightBookingHistory, showHighlightAnimation: Swift.Bool = true, cellHeight: CoreFoundation.CGFloat? = nil)
  @_Concurrency.MainActor(unsafe) public func prepareStatusLabel(text: Swift.String, textColor: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func AttributedTextwithImgaeSuffixAndPrefix(AttributeImage1: UIKit.UIImage, AttributedText: Swift.String, AttributeImage2: UIKit.UIImage, LabelBound: UIKit.UILabel) -> Foundation.NSMutableAttributedString
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class STFlightKit {
  @objc deinit
}
public enum IndicatorType {
  case green, yellow, red, unknown
  public var color: UIKit.UIColor {
    get
  }
  public static func == (a: ShareTripSDK.IndicatorType, b: ShareTripSDK.IndicatorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class Point : Swift.Codable {
  final public let shared: Swift.Int
  final public let shareLink: Swift.String
  final public let earning: Swift.Int
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum TravelInsuranceOptionsRowType : Swift.CaseIterable {
  case charge
  case optionSelect
  case learnMore
  public static func == (a: ShareTripSDK.TravelInsuranceOptionsRowType, b: ShareTripSDK.TravelInsuranceOptionsRowType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [ShareTripSDK.TravelInsuranceOptionsRowType]
  public static var allCases: [ShareTripSDK.TravelInsuranceOptionsRowType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public enum ServiceType : Swift.String, Swift.Codable {
  case hotel
  case flight
  case tour
  case transfer
  case package
  case visa
  case bus
  public var title: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class RetryInfoCardCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(title: Swift.String)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SearchBar : UIKit.UISearchBar {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FlightPassengerInfoValidator {
  public static func isOptional(rowType: ShareTripSDK.UserInfoRowType, isPrimaryPassenger: Swift.Bool, isDomesticFlight: Swift.Bool, isAttachmentAvailable: Swift.Bool) -> Swift.Bool
  public static func isValid(passengerInfo: ShareTripSDK.PassengerInfo, isPrimaryPassenger: Swift.Bool, isDomesticFlight: Swift.Bool, isAttachmentAvailable: Swift.Bool) -> Swift.Bool
  @objc deinit
}
public struct GenderSelectionCellData : ShareTripSDK.ConfigurableTableViewCellData {
  public let title: Swift.String
  public let selectedGender: ShareTripSDK.GenderType
  public var state: ShareTripSDK.ValidationState
  public init(title: Swift.String, selectedGender: ShareTripSDK.GenderType, state: ShareTripSDK.ValidationState = .normal)
}
@objc @_Concurrency.MainActor(unsafe) public class OfflineVC : ShareTripSDK.ViewController {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
}
extension ShareTripSDK.SDDateSelectionCell {
  @_hasMissingDesignatedInitializers public class Callback {
    public var didSelectedDate: (Foundation.Date) -> Swift.Void
    @objc deinit
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SDDateSelectionCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public let callback: ShareTripSDK.SDDateSelectionCell.Callback
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
extension ShareTripSDK.SDDateSelectionCell : ShareTripSDK.ConfigurableTableViewCellDataContainer {
  public typealias AccecptableViewModelType = ShareTripSDK.SDDateSelectionCellViewModel
}
extension ShareTripSDK.SDDateSelectionCell : ShareTripSDK.ConfigurableTableViewCell {
  @_Concurrency.MainActor(unsafe) public func configure(viewModel: ShareTripSDK.ConfigurableTableViewCellData)
}
extension ShareTripSDK.SDDateSelectionCell : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
}
public struct Period : Swift.Codable {
  public let departureTime: Swift.String
  public let triplePerPax: Swift.Int?, doublePerPax: Swift.Int?
  public let periodFrom: Swift.String?
  public let id: Swift.Int?
  public let specificDays: Swift.String?
  public let category: Swift.String?
  public let singlePerPax: Swift.Int?
  public let departs: ShareTripSDK.Period.Departs?
  public let child7To12: Swift.Int?, quadPerPax: Swift.Int?
  public let periodTo: Swift.String?
  public let child3To6: Swift.Int?, infant: Swift.Int?, twinPerPax: Swift.Int?
  public let package_periods_hotels: [ShareTripSDK.PeriodHotel]
  public let currency: Swift.String?
  public let singlePerPaxDiscountPrice: Swift.Int?, triplePerPaxDiscountPrice: Swift.Int?
  public let quadPerPaxDiscountPrice: Swift.Int?, infantDiscountPrice: Swift.Int?
  public let twinPerPaxDiscountPrice: Swift.Int?, doublePerPaxDiscountPrice: Swift.Int?, child3To6DiscountPrice: Swift.Int?, child7To12DiscountPrice: Swift.Int?
  public init(departureTime: Swift.String, triplePerPax: Swift.Int?, doublePerPax: Swift.Int?, periodFrom: Swift.String?, id: Swift.Int?, specificDays: Swift.String?, category: Swift.String?, singlePerPax: Swift.Int?, departs: ShareTripSDK.Period.Departs?, child7To12: Swift.Int?, quadPerPax: Swift.Int?, periodTo: Swift.String?, child3To6: Swift.Int?, infant: Swift.Int?, twinPerPax: Swift.Int?, package_periods_hotels: [ShareTripSDK.PeriodHotel], currency: Swift.String?, singlePerPaxDiscountPrice: Swift.Int?, triplePerPaxDiscountPrice: Swift.Int?, quadPerPaxDiscountPrice: Swift.Int?, infantDiscountPrice: Swift.Int?, twinPerPaxDiscountPrice: Swift.Int?, doublePerPaxDiscountPrice: Swift.Int?, child3To6DiscountPrice: Swift.Int?, child7To12DiscountPrice: Swift.Int?)
  public enum Departs : Swift.String, Swift.Codable {
    case everyDay
    case specificDay
    case unknown
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PeriodHotel : Swift.Codable {
  public let cityName: Swift.String
  public let id: Swift.Int
  public let hotelName: Swift.String, hotelId: Swift.String
  public init(cityName: Swift.String, id: Swift.Int, hotelName: Swift.String, hotelId: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class STLocation : Swift.Codable {
  final public let lat: Swift.Double
  final public let lon: Swift.Double
  public init(lat: Swift.Double, lon: Swift.Double)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FilterCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setHighlighted(_ highlighted: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setAsSelectedOrHighlighted(_ selectedOrHighlighted: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(title: Swift.String, subTitle: Swift.String)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class FileUploadController {
  public init(topViewController: ShareTripSDK.ViewController, imagePicker: UIKit.UIImagePickerController)
  public func showOptionsActionActionSheet()
  public func showAttachmentActionSheet(attachmentURL: Swift.String, title: Swift.String)
  public func previewAttachmentSheet(attachmentURL: Swift.String, title: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class WeightInfoCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func configure(history: ShareTripSDK.FlightBookingHistory)
  @objc deinit
}
public class STUserProfile : Swift.Codable {
  final public let titleName: ShareTripSDK.TitleType
  final public let givenName: Swift.String
  final public let surName: Swift.String
  final public let address1: Swift.String
  final public let address2: Swift.String?
  final public let profession: Swift.String?
  final public let postCode: Swift.String
  final public let mobileNumber: Swift.String
  final public let avatar: Swift.String
  final public let gender: ShareTripSDK.GenderType?
  final public let dateOfBirth: Swift.String?
  final public let username: Swift.String
  final public let email: Swift.String
  final public let nationality: Swift.String
  final public let passportNumber: Swift.String
  final public let passportExpireDate: Swift.String?
  final public let passportCopy: Swift.String
  final public let visaCopy: Swift.String
  final public let frequentFlyerNumber: Swift.String
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public struct JTCalendarDateViewData {
  public init(title: Swift.String, imageStr: Swift.String = "calander-mono", selectedDate: Foundation.Date? = nil)
}
public protocol STAnalyticsType {
}
public protocol STAnalyticsEvent {
  typealias Payload = [Swift.String : ShareTripSDK.STAnalyticsType]
  var name: Swift.String { get }
  var payload: Self.Payload? { get }
}
public protocol STAnalyticsEngine {
  func log(_ event: ShareTripSDK.STAnalyticsEvent)
}
public class FirebaseAnalyticsEngine : ShareTripSDK.STAnalyticsEngine {
  public init()
  public func log(_ event: ShareTripSDK.STAnalyticsEvent)
  @objc deinit
}
open class AnalyticsManager {
  public init(_ engines: [ShareTripSDK.STAnalyticsEngine])
  public func log(_ event: ShareTripSDK.STAnalyticsEvent)
  @objc deinit
}
extension Swift.String : ShareTripSDK.STAnalyticsType {
}
extension Swift.Int : ShareTripSDK.STAnalyticsType {
}
extension Swift.UInt : ShareTripSDK.STAnalyticsType {
}
extension Swift.Double : ShareTripSDK.STAnalyticsType {
}
extension Swift.Float : ShareTripSDK.STAnalyticsType {
}
extension Swift.Bool : ShareTripSDK.STAnalyticsType {
}
extension Foundation.Date : ShareTripSDK.STAnalyticsType {
}
extension Foundation.URL : ShareTripSDK.STAnalyticsType {
}
extension Foundation.NSNull : ShareTripSDK.STAnalyticsType {
}
extension Swift.Array : ShareTripSDK.STAnalyticsType {
}
extension Swift.Dictionary : ShareTripSDK.STAnalyticsType {
}
@objc @_inheritsConvenienceInitializers public class BackButton : ObjectiveC.NSObject {
  public class func createWithText(_ text: Swift.String, color: UIKit.UIColor, target: Swift.AnyObject?, action: ObjectiveC.Selector) -> [UIKit.UIBarButtonItem]
  public class func createWithImage(_ image: UIKit.UIImage, color: UIKit.UIColor, target: Swift.AnyObject?, action: ObjectiveC.Selector) -> [UIKit.UIBarButtonItem]
  @objc override dynamic public init()
  @objc deinit
}
public protocol SelectedCountryVCDelegate : AnyObject {
  func userSelectedCountry(selectedCountry: ShareTripSDK.Country)
}
public struct FlightDetailsRequest : Swift.Encodable {
  public let searchId: Swift.String
  public let sessionId: Swift.String
  public let sequenceCode: Swift.String
  public init(searchId: Swift.String, sessionId: Swift.String, sequenceCode: Swift.String)
  public var params: [Swift.String : Any] {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PriceBreakdownFareCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(title: Swift.String, fare: Swift.Double)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum FileType {
  case passport
  case visa
  public static func == (a: ShareTripSDK.FileType, b: ShareTripSDK.FileType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class InputTextSelectionCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public var didSelectText: (Swift.String?, Swift.Int) -> Swift.Void
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
extension ShareTripSDK.InputTextSelectionCell : ShareTripSDK.ConfigurableTableViewCellDataContainer {
  public typealias AccecptableViewModelType = ShareTripSDK.InputTextSelectionCellData
}
extension ShareTripSDK.InputTextSelectionCell : ShareTripSDK.ConfigurableTableViewCell {
  @_Concurrency.MainActor(unsafe) public func configure(viewModel: ShareTripSDK.ConfigurableTableViewCellData)
}
extension ShareTripSDK.InputTextSelectionCell : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
}
public protocol ReusableView {
  static var reuseID: Swift.String { get }
}
extension ShareTripSDK.ReusableView {
  public static var reuseID: Swift.String {
    get
  }
}
public class Airport : Swift.Codable, Swift.Equatable {
  final public let iata: Swift.String
  final public let name: Swift.String
  final public let city: Swift.String?
  required public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: ShareTripSDK.Airport, rhs: ShareTripSDK.Airport) -> Swift.Bool
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public struct FlightRevalidationRequest : Swift.Codable {
  public var searchId: Swift.String
  public var sequenceCode: Swift.String
  public var sessionId: Swift.String
  public var params: [Swift.String : Any] {
    get
  }
  public init(searchId: Swift.String, sequenceCode: Swift.String, sessionId: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct FlightRevalidationResponse : Swift.Codable {
  public let points: ShareTripSDK.Points
  public let priceBreakdown: ShareTripSDK.FlightPriceBreakdown
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct GPStarRequest : Swift.Encodable {
  public let mobileNumber: Swift.String
  public let otp: Swift.String?
  public init(mobileNumber: Swift.String, otp: Swift.String?)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct HistoryConvenienceFee {
  public let convenienceFee: Swift.Double
  public init(convenienceFee: Swift.Double)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class BookingHistoryPriceTableVC : ShareTripSDK.ViewController {
  @_Concurrency.MainActor(unsafe) public init(viewModel: ShareTripSDK.PriceTableViewModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
}
extension ShareTripSDK.BookingHistoryPriceTableVC : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class LeftRightInfoCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public let leftLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) weak public var delegate: ShareTripSDK.SliderCellDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(leftValue: Swift.String, rightValue: Swift.String)
  @objc deinit
}
public struct CovidTestInfo : Swift.Codable {
  public let code: Swift.String
  public let optionsCode: Swift.String
  public var address: Swift.String
  public var selfTest: Swift.Bool
  public init()
  public init(code: Swift.String, optionsCode: Swift.String, address: Swift.String, selfTest: Swift.Bool)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PriceInfoFareCellData {
  public let title: Swift.String?
  public let fareTitle: Swift.String
  public let fareAmount: Swift.Double
  public let taxTitle: Swift.String?
  public let taxAmount: Swift.Double?
  public let isShowMoreHidden: Swift.Bool?
  public init(title: Swift.String?, fareTitle: Swift.String, fareAmount: Swift.Double, taxTitle: Swift.String?, taxAmount: Swift.Double?, isShowMoreHidden: Swift.Bool? = true)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class EditableContactCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setupView()
  @_Concurrency.MainActor(unsafe) public func configure(imageName: Swift.String, titleText: Swift.String, subTitleText: Swift.String?, editingMode: Swift.Bool, cellIndexPath: Foundation.IndexPath, callbackClosure: ((_ cellIndexPath: Foundation.IndexPath, _ value: Swift.String?) -> Swift.Void)?)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol SliderFilterCellDelegate : AnyObject {
  func sliderDidChange(_ value: Swift.Float, indexPath: Foundation.IndexPath)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SliderFilterCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func configure(currentValue: Swift.Float?, indexPath: Foundation.IndexPath, delegate: ShareTripSDK.SliderFilterCellDelegate)
  @objc deinit
}
public class FlightPriceRange : Swift.Codable {
  final public let max: Swift.Int, min: Swift.Int
  public init(min: Swift.Int, max: Swift.Int)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum DateSelectionMode {
  case single, range
  public static func == (a: ShareTripSDK.DateSelectionMode, b: ShareTripSDK.DateSelectionMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class JTCalendarViewModel {
  public var minAllowableDate: Foundation.Date? {
    get
  }
  public var maxAllowableDate: Foundation.Date? {
    get
  }
  public var firstDate: Foundation.Date? {
    get
  }
  public var lastDate: Foundation.Date? {
    get
  }
  public var validDays: [JTAppleCalendar.DaysOfWeek]? {
    get
  }
  public var departs: ShareTripSDK.Period.Departs? {
    get
  }
  public var dateSelectionMode: ShareTripSDK.DateSelectionMode {
    get
  }
  public var calendarDateRange: (startDate: Foundation.Date, endDate: Foundation.Date) {
    get
  }
  public func isValid(_ date: Foundation.Date, cellState: JTAppleCalendar.CellState) -> Swift.Bool
  public func positionTypeForDate(_ date: Foundation.Date, cellSate: JTAppleCalendar.CellState) -> JTAppleCalendar.SelectionRangePosition
  public func onNewDateSelected(_ selectedDate: Foundation.Date)
  @objc deinit
}
public struct SelectedFlightInfo {
  public let adult: Swift.Int
  public let child: Swift.Int
  public let infant: Swift.Int
  public let searchId: Swift.String
  public let sessionId: Swift.String
  public let flight: ShareTripSDK.Flight
  public let flightClass: ShareTripSDK.FlightClass
  public let searchDepartDate: Foundation.Date
  public let flightRouteType: ShareTripSDK.FlightRouteType
  public let firstAirportIata: Swift.String
  public let lastAirportIata: Swift.String
  public init(adult: Swift.Int, child: Swift.Int, infant: Swift.Int, searchId: Swift.String, sessionId: Swift.String, flight: ShareTripSDK.Flight, flightClass: ShareTripSDK.FlightClass, searchDepartDate: Foundation.Date, flightRouteType: ShareTripSDK.FlightRouteType, firstAirportIata: Swift.String, lastAirportIata: Swift.String)
}
extension ShareTripSDK.FlightDetailsViewModel {
  @_hasMissingDesignatedInitializers public class Callback {
    public var didFetchFlightDetails: () -> Swift.Void
    public var didFailed: (Swift.String) -> Swift.Void
    @objc deinit
  }
}
public class FlightDetailsViewModel {
  final public let callback: ShareTripSDK.FlightDetailsViewModel.Callback
  public typealias CompletionCallBack = (_ success: Swift.Bool) -> Swift.Void
  public var redeemDiscountAmount: Swift.Double
  public var revalidateResponse: ShareTripSDK.FlightRevalidationResponse? {
    get
    set
  }
  public init(flightInfo: ShareTripSDK.SelectedFlightInfo)
  public var flightDate: Foundation.Date {
    get
  }
  public var numberOfSections: Swift.Int {
    get
  }
  public var addBaggageCollupseIndicator: Swift.Bool
  public var selectedDiscountOption: ShareTripSDK.DiscountOptionType
  public var firstAirportIata: Swift.String {
    get
  }
  public var lastAirportIata: Swift.String {
    get
  }
  public var flightRequiedData: ShareTripSDK.FlightsRequiredData {
    get
  }
  public var flightPriceTableData: ShareTripSDK.PriceInfoTableData {
    get
  }
  public var isCouponWithDiscount: Swift.Bool
  public var couponDiscountAmount: Swift.Double
  public func updateBaggagePrice(_ price: Swift.Double)
  public func updateSTCharge(_ charge: Swift.Double)
  public func getPassengers() -> [ShareTripSDK.TravellerType]
  public var adultCount: Swift.Int {
    get
  }
  public var childCount: Swift.Int {
    get
  }
  public var infantCount: Swift.Int {
    get
  }
  public var flightLegs: [ShareTripSDK.FlightLeg] {
    get
  }
  public var isDomestic: Swift.Bool {
    get
  }
  public var isAttachmentAvalilable: Swift.Bool {
    get
  }
  public var priceBreakdown: ShareTripSDK.FlightPriceBreakdown {
    get
  }
  public var earnTC: Swift.Int {
    get
  }
  public var redeemTC: Swift.Int {
    get
  }
  public var shareTC: Swift.Int {
    get
  }
  public var searchId: Swift.String {
    get
  }
  public var sessionId: Swift.String {
    get
  }
  public var sequenceCode: Swift.String {
    get
  }
  public var routeType: ShareTripSDK.FlightRouteType {
    get
  }
  public var currency: Swift.String {
    get
  }
  public var gatewayCurrency: Swift.String {
    get
  }
  public var seatsCount: Swift.Int {
    get
  }
  public var waight: Swift.String {
    get
  }
  public var originalPrice: Swift.Double {
    get
  }
  public var discountPrice: Swift.Double {
    get
  }
  public var discount: Swift.Double {
    get
  }
  public var flightSegmentsCount: Swift.Int {
    get
  }
  public var flightClasses: [ShareTripSDK.FlightClass] {
    get
  }
  public var flightRouteTypes: [ShareTripSDK.FlightRouteType] {
    get
  }
  public var isRefundable: Swift.Bool {
    get
  }
  public var refundpolicyText: Swift.String {
    get
  }
  public var departureDateAndTimes: [ShareTripSDK.DateTime] {
    get
  }
  public var departureDate: Swift.String {
    get
  }
  public var baseFare: Swift.Double {
    get
  }
  public var earnTCDiscount: Swift.Double {
    get
  }
  public var dateComponents: [Foundation.DateComponents] {
    get
  }
  public var covidWarningMsg: Swift.String {
    get
  }
  public var baggageViewModel: ShareTripSDK.BaggageViewModel {
    get
  }
  public func setPriceBreakdown(breakdown: ShareTripSDK.FlightPriceBreakdown)
  public func numberOfRows(for section: Swift.Int) -> Swift.Int
  public func flightDetailSectionType(for section: Swift.Int) -> ShareTripSDK.FlightDetailSectionType
  public func getFlightSegmentCellData(for indexPath: Foundation.IndexPath) -> ShareTripSDK.FlightSegmentCellData
  public func getFlightSegments(for legIndex: Swift.Int) -> [ShareTripSDK.FlightSegmentCellData]
  public func isLastSegment(for indexPath: Foundation.IndexPath) -> Swift.Bool
  public func shouldHaveLayoverLabel(for indexPath: Foundation.IndexPath) -> Swift.Bool
  public var isLoading: ShareTripSDK.Observable<Swift.Bool> {
    get
  }
  public var discountOptions: [ShareTripSDK.DiscountOption] {
    get
  }
  public func loadDiscountOptions(onCompletion: @escaping () -> Swift.Void)
  public func fetchBaggageOptions(onCompletion: @escaping ShareTripSDK.FlightDetailsViewModel.CompletionCallBack)
  public var promotionalCoupons: [ShareTripSDK.PromotionalCoupon] {
    get
    set
  }
  public func fetchFlightDetails()
  @objc deinit
}
extension ShareTripSDK.FlightDetailsViewModel : ShareTripSDK.PaymentGateWayFilterProvider {
  public func paymentGateWayfilter(gatewayIds: [Swift.String]) -> ((ShareTripSDK.PaymentGateway) -> Swift.Bool)
  public func paymentGateWayfilter(gatewayCodes: [Swift.String]) -> ((ShareTripSDK.PaymentGateway) -> Swift.Bool)
  public func paymentGateWayfilter() -> ((ShareTripSDK.PaymentGateway) -> Swift.Bool)
}
public enum FlightDetailSectionType : Swift.Int {
  case tripcoinSection
  case flightSection
  case infoSection
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum FlightDetailInfoType : Swift.Int, Swift.CaseIterable {
  case bagageInfo
  case fareDetail
  case refundPolicy
  public var title: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [ShareTripSDK.FlightDetailInfoType]
  public typealias RawValue = Swift.Int
  public static var allCases: [ShareTripSDK.FlightDetailInfoType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public struct FlightSegmentCellData {
  public let airlinesImage: Swift.String?
  public let airline: Swift.String
  public let airlineCode: Swift.String
  public let duration: Swift.String
  public let departTime: Swift.String
  public let departDate: Swift.String
  public let departCode: Swift.String
  public let departAirport: Swift.String
  public let arrivalTime: Swift.String
  public let arrivalDate: Swift.String
  public let arrivalCode: Swift.String
  public let arrivalAirport: Swift.String
  public let classText: Swift.String
  public let aircraft: Swift.String
  public let transitTime: Swift.String
  public let isLastSegment: Swift.Bool
  public let transitVisaRequired: Swift.Bool
  public let transitVisaText: Swift.String
  public let hasTechnicalStoppage: Swift.Bool
  public let technicalStoppageText: Swift.String
  public init(airlinesImage: Swift.String?, airline: Swift.String, airlineCode: Swift.String, duration: Swift.String, departTime: Swift.String, departDate: Swift.String, departCode: Swift.String, departAirport: Swift.String, arrivalTime: Swift.String, arrivalDate: Swift.String, arrivalCode: Swift.String, arrivalAirport: Swift.String, classText: Swift.String, aircraft: Swift.String, transitTime: Swift.String, isLastSegment: Swift.Bool, transitVisaRequired: Swift.Bool, transitVisaText: Swift.String, hasTechnicalStoppage: Swift.Bool, technicalStoppageText: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ExploreDestinationTVCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configureCell(title: Swift.String, _ subtitle: Swift.String, _ indexPath: Foundation.IndexPath, _ imageName: Swift.String, callbackClosure: ((_ cellIndexPath: Foundation.IndexPath) -> Swift.Void)?)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class GDCheckbox : UIKit.UIControl {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var containerWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var containerCornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var containerColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var containerFillColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var checkWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var checkColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var shouldFillContainer: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var shouldAnimate: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var isOn: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var isSquare: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var isRadiobox: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var isCircular: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc deinit
}
extension Foundation.Date {
  public init?(fromString string: Swift.String, format: ShareTripSDK.DateFormatType, timeZone: ShareTripSDK.TimeZoneType = .local, locale: Foundation.Locale = Foundation.Locale.current)
  public func toString(style: ShareTripSDK.DateStyleType = .short) -> Swift.String
  public func toString(format: ShareTripSDK.DateFormatType, timeZone: ShareTripSDK.TimeZoneType = .local, locale: Foundation.Locale = Locale.current) -> Swift.String
  public func toString(dateStyle: Foundation.DateFormatter.Style, timeStyle: Foundation.DateFormatter.Style, isRelative: Swift.Bool = false, timeZone: Foundation.TimeZone = Foundation.NSTimeZone.local, locale: Foundation.Locale = Locale.current) -> Swift.String
  public func toStringWithRelativeTime(strings: [ShareTripSDK.RelativeTimeStringType : Swift.String]? = nil) -> Swift.String
  public func compare(_ comparison: ShareTripSDK.DateComparisonType) -> Swift.Bool
  public func adjust(_ component: ShareTripSDK.DateComponentType, offset: Swift.Int) -> Foundation.Date
  public func adjust(hour: Swift.Int?, minute: Swift.Int?, second: Swift.Int?, day: Swift.Int? = nil, month: Swift.Int? = nil) -> Foundation.Date
  public func dateFor(_ type: ShareTripSDK.DateForType, calendar: Foundation.Calendar = Calendar(identifier: .gregorian)) -> Foundation.Date
  public func since(_ date: Foundation.Date, in component: ShareTripSDK.DateComponentType) -> Swift.Int64
  public func component(_ component: ShareTripSDK.DateComponentType) -> Swift.Int?
  public func numberOfDaysInMonth() -> Swift.Int
  public func firstDayOfWeek() -> Swift.Int
  public func lastDayOfWeek() -> Swift.Int
}
public enum DateFormatType : Swift.CaseIterable {
  public static var allCases: [ShareTripSDK.DateFormatType] {
    get
  }
  public typealias AllCases = [ShareTripSDK.DateFormatType]
  case isoYear
  case isoYearMonth
  case isoDateWithSlash
  case isoDate
  case isoDateTime
  case isoDateTimeSec
  case isoDateTimeMilliSec
  case isoDateCustomTimeMilliSec
  case dotNet
  case rss
  case altRSS
  case httpHeader
  case standard
  case shortDate
  case shortDateWithdatequote
  case shortDateFullYear
  case isoDateTimeWithoutOffset
  case timeIn12Hr
  case custom(Swift.String)
  public var stringFormat: Swift.String {
    get
  }
}
extension ShareTripSDK.DateFormatType : Swift.Equatable {
  public static func == (lhs: ShareTripSDK.DateFormatType, rhs: ShareTripSDK.DateFormatType) -> Swift.Bool
}
public enum TimeZoneType {
  case local, `default`, utc, custom(Swift.Int)
}
public enum RelativeTimeStringType {
  case nowPast, nowFuture, secondsPast, secondsFuture, oneMinutePast, oneMinuteFuture, minutesPast, minutesFuture, oneHourPast, oneHourFuture, hoursPast, hoursFuture, oneDayPast, oneDayFuture, daysPast, daysFuture, oneWeekPast, oneWeekFuture, weeksPast, weeksFuture, oneMonthPast, oneMonthFuture, monthsPast, monthsFuture, oneYearPast, oneYearFuture, yearsPast, yearsFuture
  public static func == (a: ShareTripSDK.RelativeTimeStringType, b: ShareTripSDK.RelativeTimeStringType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DateComparisonType {
  case isToday
  case isTomorrow
  case isYesterday
  case isSameDay(as: Foundation.Date)
  case isThisWeek
  case isNextWeek
  case isLastWeek
  case isSameWeek(as: Foundation.Date)
  case isThisMonth
  case isNextMonth
  case isLastMonth
  case isSameMonth(as: Foundation.Date)
  case isThisYear
  case isNextYear
  case isLastYear
  case isSameYear(as: Foundation.Date)
  case isInTheFuture
  case isInThePast
  case isEarlier(than: Foundation.Date)
  case isLater(than: Foundation.Date)
  case isWeekday
  case isWeekend
}
public enum DateComponentType {
  case second, minute, hour, day, weekday, nthWeekday, week, month, year
  public static func == (a: ShareTripSDK.DateComponentType, b: ShareTripSDK.DateComponentType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DateForType {
  case startOfDay, endOfDay, startOfWeek, endOfWeek, startOfMonth, endOfMonth, tomorrow, yesterday, nearestMinute(minute: Swift.Int), nearestHour(hour: Swift.Int)
}
public enum DateStyleType {
  case short
  case medium
  case long
  case full
  case ordinalDay
  case weekday
  case shortWeekday
  case veryShortWeekday
  case month
  case shortMonth
  case veryShortMonth
  public static func == (a: ShareTripSDK.DateStyleType, b: ShareTripSDK.DateStyleType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol InfoSelectionCellDelegate : AnyObject {
  func infoSelectionChanged(selectedIndex: Swift.Int, selectedValue: Swift.String, indexPath: Foundation.IndexPath)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class InfoSelectionCell : UIKit.UITableViewCell {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var typeImageView: UIKit.UIImageView!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var titleLabel: UIKit.UILabel!
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak public var infoTextField: ShareTripSDK.NoSelectTextField!
  @_Concurrency.MainActor(unsafe) weak public var delegate: ShareTripSDK.InfoSelectionCellDelegate?
  @_Concurrency.MainActor(unsafe) public var selectedPickerIndex: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var pickerData: [Swift.String] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setupCell()
  @_Concurrency.MainActor(unsafe) public func configure(indexPath: Foundation.IndexPath)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum AppStoreReviewManager {
  public static let productURL: Foundation.URL
  public static let minimumReviewWorthyActionCount: Swift.Int
  public static func requestReviewIfAppropriate(host: ShareTripSDK.ViewController?, force: Swift.Bool = false)
  public static func rateAppWithAppStore()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class RightButtonHeaderView : UIKit.UITableViewHeaderFooterView {
  @_Concurrency.MainActor(unsafe) final public let titleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let rightButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @objc deinit
}
extension Foundation.UserDefaults {
  public enum Key : Swift.String {
    case reviewWorthyActionCount
    case lastReviewRequestAppVersion
    case reviewRequestShownCount
    case reviewRequestFirstShown
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func integer(forKey key: Foundation.UserDefaults.Key) -> Swift.Int
  public func string(forKey key: Foundation.UserDefaults.Key) -> Swift.String?
  public func date(forKey key: Foundation.UserDefaults.Key) -> Foundation.Date?
  public func set(_ integer: Swift.Int, forKey key: Foundation.UserDefaults.Key)
  public func set(_ object: Any?, forKey key: Foundation.UserDefaults.Key)
}
public struct VerifyInfoData {
  public var title: Swift.String
  public var subTitle: Swift.String
  public var image: Swift.String
  public init(title: Swift.String, subTitle: Swift.String, image: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class InfoDetailCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(infoDataOne: ShareTripSDK.VerifyInfoData?, infoDataTwo: ShareTripSDK.VerifyInfoData?)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor(unsafe) public class var topViewController: UIKit.UIViewController? {
    get
  }
}
public struct SingleInfoCellData : ShareTripSDK.ConfigurableTableViewCellData {
  public var titlte: Swift.String
  public var isValid: Swift.Bool
  public init(titlte: Swift.String, isValid: Swift.Bool)
}
public enum PriceRangeType {
  case cheap, moderate, expensive, unknown
  public var title: Swift.String {
    get
  }
  public static func == (a: ShareTripSDK.PriceRangeType, b: ShareTripSDK.PriceRangeType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class FlightPriceIndicatorViewModel {
  public var isLoading: ShareTripSDK.Observable<Swift.Bool> {
    get
  }
  public init(srcCode: Swift.String, destCode: Swift.String, routeType: ShareTripSDK.FlightRouteType)
  public var searchingDateOffset: Swift.Int {
    get
  }
  public typealias PriceRangeLoadCallBack = () -> Swift.Void
  public func loadPriceIndicator(onCompletion: ShareTripSDK.FlightPriceIndicatorViewModel.PriceRangeLoadCallBack?)
  public func priceRange(for rangeType: ShareTripSDK.PriceRangeType) -> (Swift.Double, Swift.Double)?
  public func priceRangeType(for date: Foundation.Date) -> ShareTripSDK.PriceRangeType?
  public func filter(_ apply: Swift.Bool)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Helpers {
  public class func generateHtml(content: Swift.String, style: Swift.String = "body {text-align: justify; margin: 6px 12px 6px 12px;}") -> Swift.String
  public class func generateHtml(content: Swift.String, header: Swift.String) -> Swift.String
  public class func closedRange(startingValue: Swift.Int, length: Swift.Int) -> Swift.ClosedRange<Swift.Int>
  public static func convertToArrayOfDictionary(text: Swift.String) -> Any?
  public static func decoder(jwtToken jwt: Swift.String) -> [Swift.String : Any]
  public static func decodeJWTPart(_ value: Swift.String) -> [Swift.String : Any]?
  public static func base64UrlDecode(_ value: Swift.String) -> Foundation.Data?
  public static func loadJSON(jsonFileName name: Swift.String) -> Foundation.Data?
  public static func convertJsonToString(json: SwiftyJSON.JSON) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Utility {
  public static let months: [Swift.String]
  public class func componentFromDate(date: Foundation.Date) -> Foundation.DateComponents
  @objc deinit
}
public enum DiscountType : Swift.String, Swift.Codable {
  case flat
  case percentage
  case unknown
  public init(from decoder: Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @objcMembers @_Concurrency.MainActor(unsafe) open class ZoomAnimatedTransitioningDelegate : ObjectiveC.NSObject, UIKit.UIViewControllerTransitioningDelegate {
  @objc @_Concurrency.MainActor(unsafe) open var referenceImageView: UIKit.UIImageView?
  @objc @_Concurrency.MainActor(unsafe) weak open var referenceSlideshowView: ShareTripSDK.ImageSlideshow?
  @objc @_Concurrency.MainActor(unsafe) open var slideToDismissEnabled: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public init(slideshowView: ShareTripSDK.ImageSlideshow, slideshowController: ShareTripSDK.FullScreenSlideshowViewController)
  @objc @_Concurrency.MainActor(unsafe) public init(imageView: UIKit.UIImageView, slideshowController: ShareTripSDK.FullScreenSlideshowViewController)
  @_Concurrency.MainActor(unsafe) @objc open func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @_Concurrency.MainActor(unsafe) @objc open func animationController(forDismissed dismissed: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @_Concurrency.MainActor(unsafe) @objc open func interactionControllerForPresentation(using animator: UIKit.UIViewControllerAnimatedTransitioning) -> UIKit.UIViewControllerInteractiveTransitioning?
  @_Concurrency.MainActor(unsafe) @objc open func interactionControllerForDismissal(using animator: UIKit.UIViewControllerAnimatedTransitioning) -> UIKit.UIViewControllerInteractiveTransitioning?
  @objc deinit
}
extension ShareTripSDK.ZoomAnimatedTransitioningDelegate : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
public struct InputTextFieldCellData : ShareTripSDK.ConfigurableTableViewCellData {
  public let title: Swift.String
  public let text: Swift.String
  public let placeholder: Swift.String
  public let imageString: Swift.String
  public let keyboardType: UIKit.UIKeyboardType
  public let textContenType: UIKit.UITextContentType?
  public var state: ShareTripSDK.ValidationState
  public init(title: Swift.String, text: Swift.String, placeholder: Swift.String, imageString: Swift.String, keyboardType: UIKit.UIKeyboardType = .default, textContenType: UIKit.UITextContentType? = nil, state: ShareTripSDK.ValidationState = .normal)
}
public class BaggageHistoryDetailsViewModel {
  public init(baggageInfo: ShareTripSDK.Baggage?, luggageAmount: Swift.Double?)
  public func getBaggageTVSectionCount() -> Swift.Int
  public func getBaggageInfoTableData() -> [[ShareTripSDK.BaggageHistoryInfoType]]
  public func getBasicBaggageData(with row: Swift.Int) -> (route: Swift.String, baggages: [ShareTripSDK.BaggageDetail])
  public func getExtraBaggageData(with row: Swift.Int) -> (route: Swift.String, details: [ShareTripSDK.ExtraBaggageDetailInfo])
  @objc deinit
}
public enum BaggageHistoryInfoType {
  case baggageInfo
  case singleDashLine
  case totalPrice
  public static func == (a: ShareTripSDK.BaggageHistoryInfoType, b: ShareTripSDK.BaggageHistoryInfoType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum FlightClass : Swift.String, Swift.Codable, Swift.CaseIterable {
  case economy
  case business
  case firstClass
  public init(from decoder: Swift.Decoder) throws
  public init(intValue: Swift.Int)
  public var intValue: Swift.Int {
    get
  }
  public var title: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [ShareTripSDK.FlightClass]
  public typealias RawValue = Swift.String
  public static var allCases: [ShareTripSDK.FlightClass] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func roundCorners(_ corners: UIKit.UIRectCorner, radius: CoreFoundation.CGFloat, frame: CoreFoundation.CGRect? = nil)
  @_Concurrency.MainActor(unsafe) public func roundBottomCorners(radius: CoreFoundation.CGFloat, frame: CoreFoundation.CGRect? = nil)
  @_Concurrency.MainActor(unsafe) public func roundRightCorners(radius: CoreFoundation.CGFloat, frame: CoreFoundation.CGRect? = nil)
  @_Concurrency.MainActor(unsafe) public func roundTopCorners(radius: CoreFoundation.CGFloat, frame: CoreFoundation.CGRect? = nil)
  @_Concurrency.MainActor(unsafe) public func roundTopLeftAndBottomRightCorners(radius: CoreFoundation.CGFloat, frame: CoreFoundation.CGRect? = nil)
  @_Concurrency.MainActor(unsafe) public func rotate(_ toValue: CoreFoundation.CGFloat, duration: CoreFoundation.CFTimeInterval = 0.2)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func setShadowWithColor(color: UIKit.UIColor?, opacity: Swift.Float?, offset: CoreFoundation.CGSize?, radius: CoreFoundation.CGFloat, viewCornerRadius: CoreFoundation.CGFloat?)
  @_Concurrency.MainActor(unsafe) public func setDropShadow(shadowOpacity: Swift.Float, shadowRadius: CoreFoundation.CGFloat, shadowOffset: CoreFoundation.CGSize, shadowColor: CoreGraphics.CGColor)
  @_Concurrency.MainActor(unsafe) public func subviewsRecursive() -> [UIKit.UIView]
}
extension UIKit.UISearchBar {
  @_Concurrency.MainActor(unsafe) public var searchField: UIKit.UITextField? {
    get
  }
}
extension QuartzCore.CALayer {
  public func addZeplinShadow(color: UIKit.UIColor = .black, alpha: Swift.Float = 0.5, x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 3, blur: CoreFoundation.CGFloat = 6, spread: CoreFoundation.CGFloat = 0)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func addDashedBorder(with color: UIKit.UIColor, width: CoreFoundation.CGFloat, radius: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func addZeplinShadow(color: UIKit.UIColor = .black, alpha: Swift.Float = 0.5, x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 3, blur: CoreFoundation.CGFloat = 6, spread: CoreFoundation.CGFloat = 0)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var parentViewController: UIKit.UIViewController? {
    get
  }
}
extension UIKit.UIView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func applyGradient(colours: [UIKit.UIColor]) -> QuartzCore.CAGradientLayer
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func applyGradient(colours: [UIKit.UIColor], locations: [Foundation.NSNumber]?) -> QuartzCore.CAGradientLayer
}
extension SwiftKeychainWrapper.KeychainWrapper.Key {
  public static let authToken: SwiftKeychainWrapper.KeychainWrapper.Key
  public static let user: SwiftKeychainWrapper.KeychainWrapper.Key
  public static let appleAuthorizationCode: SwiftKeychainWrapper.KeychainWrapper.Key
}
extension SwiftKeychainWrapper.KeychainWrapper {
  @discardableResult
  public func set<T>(_ value: T?, forKey key: Swift.String, withAccessibility accessibility: SwiftKeychainWrapper.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> Swift.Bool where T : Swift.Decodable, T : Swift.Encodable
  public func codableObject<T>(forKey key: Swift.String, withAccessibility accessibility: SwiftKeychainWrapper.KeychainItemAccessibility? = nil, isSynchronizable: Swift.Bool = false) -> T? where T : Swift.Decodable, T : Swift.Encodable
}
final public class Observable<T> : ShareTripSDK.ObservableProtocol {
  public typealias Observer = (T) -> Swift.Void
  final public var observer: ShareTripSDK.Observable<T>.Observer?
  final public var value: T {
    get
    set
  }
  public init(_ value: T)
  final public func bind(observer: @escaping ShareTripSDK.Observable<T>.Observer)
  final public func bindAndFire(observer: @escaping ShareTripSDK.Observable<T>.Observer)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class Observables {
  public static func combineLatest<U, V>(_ a: ShareTripSDK.Observable<U>, _ b: ShareTripSDK.Observable<V>, _ callBack: @escaping (U, V) -> Swift.Void)
  public static func combineLatest<U, V, W>(_ a: ShareTripSDK.Observable<U>, _ b: ShareTripSDK.Observable<V>, _ c: ShareTripSDK.Observable<W>, _ callBack: @escaping (U, V, W) -> Swift.Void)
  @objc deinit
}
public protocol SwitchCellDelegate : AnyObject {
  func switchButtonStatusChanged(status: Swift.Bool, cellIndexPath: Foundation.IndexPath)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SwitchCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(title: Swift.String, checked: Swift.Bool, indexPath: Foundation.IndexPath, delegate: ShareTripSDK.SwitchCellDelegate)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class HeaderSpacedTitleView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public init(with title: Swift.String, font: UIKit.UIFont = UIFont.systemFont(ofSize: 13, weight: .medium))
  @objc deinit
}
public enum FlightSortingOptions : Swift.String, Swift.Codable {
  case earliest, cheapest, fastest, unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol DiscountOptionCollapsibleView : UIKit.UIView {
  var title: Swift.String { get }
  var discountAmount: Swift.Double { get }
  var discountOptionType: ShareTripSDK.DiscountOptionType { get }
  var delegate: ShareTripSDK.DiscountOptionCollapsibleViewDelegate? { get set }
  var expanded: Swift.Bool { get }
  func expand()
  func collapse()
}
public protocol DiscountOptionCollapsibleViewDelegate : AnyObject {
  func onDisCountOptionSelected(discountOptionView: ShareTripSDK.DiscountOptionCollapsibleView)
}
public struct SingleLineSelectCellData {
  public let title: Swift.String
  public var selected: Swift.Bool
  public init(title: Swift.String, selected: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SingleLineSelectCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func configure(cellData: ShareTripSDK.SingleLineSelectCellData)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CancellationAlertView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var callbackClosure: ((Swift.Bool?) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func updateConstraints()
  @objc deinit
}
extension ShareTripSDK.CancellationAlertView : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textView(_ textView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
}
public enum FlightBookingStatus : Swift.String, Swift.Codable {
  case pending
  case booked
  case issued
  case declined
  case canceled
  case completed
  public init(from decoder: Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PaymentStatus : Swift.String, Swift.Codable {
  case unpaid
  case paid
  public init(from decoder: Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct FlightBookingHistoryResponse : Swift.Codable {
  public let data: [ShareTripSDK.FlightBookingHistory]?
  public let offset: Swift.Int, count: Swift.Int, limit: Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class FlightBookingHistory : Swift.Codable {
  final public let actualAmount: Swift.Double?
  final public let airFareRules: [ShareTripSDK.AirFareRule]
  final public let airlineResCode: Swift.String?
  final public let baggageInfo: [ShareTripSDK.BaggageInfo]?
  final public let bookingCode: Swift.String?
  final public let searchId: Swift.String?
  final public let bookingCurrency: Swift.String
  final public let bookingStatus: ShareTripSDK.FlightBookingStatus
  final public let eTicket: Swift.String?
  final public let flight: [ShareTripSDK.FlightRouteInfo]
  final public let gatewayAmount: Swift.Double?
  final public let gatewayCurrency: Swift.String?
  final public let paymentStatus: ShareTripSDK.PaymentStatus
  final public let pnrCode: Swift.String?
  public var priceBreakdown: ShareTripSDK.FlightPriceBreakdown
  final public let covidAmount: Swift.Double?
  final public let travelInsuranceAmount: Swift.Double?
  final public let searchParams: ShareTripSDK.FlightSearchParams
  final public let searchParamDetails: [ShareTripSDK.FlightSearchParamDetail]
  final public let segments: [ShareTripSDK.FlightSegment]
  final public let points: ShareTripSDK.Point
  final public let travellers: [ShareTripSDK.TravellerInfo]
  final public let luggageAmount: Swift.Double?
  final public let advanceIncomeTax: Swift.Double?
  final public let baggage: ShareTripSDK.Baggage?
  final public let convenienceFee: Swift.Double?
  final public let isModified: Swift.Bool?
  final public let isVoidable: Swift.Bool?
  final public let isRefundable: Swift.Bool?
  final public let isReissueable: Swift.Bool?
  final public let modifyHistory: [ShareTripSDK.ModifyHistory]?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct ModifyHistory : Swift.Codable {
  public let modificationType: Swift.String?, refundSearchID: Swift.String?, bookingCode: Swift.String?, automationType: Swift.String?
  public let eTickets: Swift.String?
  public let airlineRefundCharge: Swift.Int?, stFee: Swift.Int?, totalFee: Swift.Int?, purchasePrice: Swift.Int?
  public let totalRefundAmount: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Baggage : Swift.Codable {
  public let basic: [ShareTripSDK.AirportDetail]?
  public let extra: [ShareTripSDK.ExtraBaggageDetail]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct AirportDetail : Swift.Codable {
  public let origin: ShareTripSDK.AirportDetailInfo?
  public let destination: ShareTripSDK.AirportDetailInfo?
  public let baggage: [ShareTripSDK.BaggageDetail]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct AirportDetailInfo : Swift.Codable {
  public let code: Swift.String?
  public let country: Swift.String?
  public let city: Swift.String?
  public let airport: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct BaggageDetail : Swift.Codable {
  public let weight: Swift.Double?
  public let name: Swift.String?
  public let unit: Swift.String?
  public let type: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ExtraBaggageDetail : Swift.Codable {
  public let route: Swift.String?
  public let details: [ShareTripSDK.ExtraBaggageDetailInfo]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ExtraBaggageDetailInfo : Swift.Codable {
  public let currency: Swift.String?
  public let weight: Swift.String?
  public let name: Swift.String?
  public let price: Swift.Double?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class BaggageInfo : Swift.Codable {
  final public let type: Swift.String
  final public let adult: Swift.String?
  final public let child: Swift.String?
  final public let infant: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class AirFareRule : Swift.Codable {
  final public let destination: Swift.String
  final public let destinationCode: Swift.String
  final public let origin: Swift.String
  final public let originCode: Swift.String
  final public let policy: ShareTripSDK.AirFarePolicy
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class AirFarePolicy : Swift.Codable {
  final public let header: [ShareTripSDK.PolicyNote]
  final public let rules: [ShareTripSDK.PolicyNote]
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class PolicyNote : Swift.Codable {
  final public let code: Swift.Int?
  final public let text: Swift.String
  final public let type: Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class FlightRouteInfo : Swift.Codable {
  final public let departureDateTime: ShareTripSDK.DateTime
  final public let destinationName: ShareTripSDK.AirportInfo?
  final public let originName: ShareTripSDK.AirportInfo?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class FlightSearchParamDetail : Swift.Codable {
  final public let departureDateTime: Swift.String
  final public let destination: Swift.String
  final public let origin: Swift.String
  final public let sequence: Swift.Int
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class FlightSearchParams : Swift.Codable {
  final public let tripType: ShareTripSDK.TripType
  final public let adult: Swift.Int?
  final public let airlines: Swift.String?
  final public let child: Swift.Int?
  final public let classType: Swift.String?
  final public let currency: Swift.String?
  final public let deviceType: Swift.String?
  final public let flightType: Swift.String?
  final public let infant: Swift.Int?
  final public let nextLink: Swift.String?
  final public let preferredAirlines: Swift.String?
  final public let stop: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class FlightSegment : Swift.Codable {
  final public let segmentDetails: [ShareTripSDK.FlightSegmentDetail]
  final public let type: Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class FlightSegmentDetail : Swift.Codable {
  final public let searchCode: Swift.String
  final public let sequenceCode: Swift.String
  final public let aircraft: Swift.String
  final public let aircraftCode: Swift.String
  final public let airlines: ShareTripSDK.AirlineInfo
  final public let airlinesCode: Swift.String
  final public let baggageUnit: Swift.String
  final public let baggageWeight: Swift.Int
  final public let cabin: Swift.String
  final public let dayCount: Swift.Int
  final public let logo: Swift.String?
  final public let destinationCode: Swift.String
  final public let destinationName: ShareTripSDK.AirportInfo
  final public let arrivalDateTime: ShareTripSDK.DateTime
  final public let originCode: Swift.String
  final public let originName: ShareTripSDK.AirportInfo
  final public let departureDateTime: ShareTripSDK.DateTime
  final public let duration: Swift.String
  final public let transitTime: Swift.String
  final public let flightNumber: Swift.String?
  final public let seatsRemaining: Swift.Int?
  final public let hiddenStop: ShareTripSDK.FlightHiddenStop?
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public struct FlightHiddenStop : Swift.Codable {
  public let city: Swift.String
  public let airport: Swift.String
  public let code: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Covid19TestInfo : Swift.Codable {
  public let address: Swift.String?
  public let isHomeCollection: Swift.Bool?
  public let option: Swift.String?
  public let customerAddress: Swift.String?
  public let discountPrice: Swift.Double?
  public let center: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class TravellerInfo : Swift.Codable {
  final public let code: Swift.String
  final public let title: Swift.String
  final public let givenName: Swift.String
  final public let surName: Swift.String
  final public let travellerType: ShareTripSDK.TravellerType?
  final public let gender: Swift.String
  final public let dateOfBirth: Swift.String
  final public let email: Swift.String
  final public let passportNumber: Swift.String
  final public let passportExpireDate: Swift.String
  final public let mobileNumber: Swift.String
  final public let nationality: Swift.String
  final public let frequentFlyerNumber: Swift.String?
  public var passportCopy: Swift.String?
  public var visaCopy: Swift.String?
  final public let address1: Swift.String
  final public let primaryContact: Swift.String
  final public let covid: ShareTripSDK.Covid19TestInfo?
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SingleItemView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public let imageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) final public let textLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public enum GSMessageType {
  case success
  case error
  case warning
  case info
  public static func == (a: ShareTripSDK.GSMessageType, b: ShareTripSDK.GSMessageType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum GSMessagePosition {
  case top
  case bottom
  public static func == (a: ShareTripSDK.GSMessagePosition, b: ShareTripSDK.GSMessagePosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum GSMessageAnimation {
  case fade
  case slide(ShareTripSDK.GSMessageAnimation.SlideType)
  public enum SlideType {
    case normal
    case distance(Swift.Double)
  }
}
public enum GSMessageTextAlignment {
  case topLeft
  case topCenter
  case topRight
  case left
  case center
  case right
  case bottomLeft
  case bottomCenter
  case bottomRight
  public static func == (a: ShareTripSDK.GSMessageTextAlignment, b: ShareTripSDK.GSMessageTextAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum GSMessageOption {
  case accessibilityIdentifier(Swift.String)
  case animations([ShareTripSDK.GSMessageAnimation])
  case animationDuration(Foundation.TimeInterval)
  case autoHide(Swift.Bool)
  case autoHideDelay(Swift.Double)
  case cornerRadius(Swift.Double)
  case height(Swift.Double)
  case hideOnTap(Swift.Bool)
  case handleTap(() -> ())
  case isInsideSafeAreaInsets(Swift.Bool)
  case margin(UIKit.UIEdgeInsets)
  case padding(UIKit.UIEdgeInsets)
  case position(ShareTripSDK.GSMessagePosition)
  case textAlignment(ShareTripSDK.GSMessageTextAlignment)
  case textColor(UIKit.UIColor)
  case textNumberOfLines(Swift.Int)
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func showMessage(_ text: Swift.String, type: ShareTripSDK.GSMessageType, options: [ShareTripSDK.GSMessageOption]? = [.autoHide(true), .hideOnTap(true), .autoHideDelay(2)])
  @_Concurrency.MainActor(unsafe) public func showMessage(_ attributedText: Foundation.NSAttributedString, type: ShareTripSDK.GSMessageType, options: [ShareTripSDK.GSMessageOption]? = nil)
  @_Concurrency.MainActor(unsafe) public func hideMessage(animated: Swift.Bool = true)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func showMessage(_ text: Swift.String, type: ShareTripSDK.GSMessageType, options: [ShareTripSDK.GSMessageOption]? = nil)
  @_Concurrency.MainActor(unsafe) public func showMessage(_ attributedText: Foundation.NSAttributedString, type: ShareTripSDK.GSMessageType, options: [ShareTripSDK.GSMessageOption]? = nil)
  @_Concurrency.MainActor(unsafe) public func hideMessage(animated: Swift.Bool = true)
}
@objc public class GSMessage : ObjectiveC.NSObject {
  public static var font: UIKit.UIFont
  public static var successBackgroundColor: UIKit.UIColor
  public static var warningBackgroundColor: UIKit.UIColor
  public static var errorBackgroundColor: UIKit.UIColor
  public static var infoBackgroundColor: UIKit.UIColor
  public class func showMessageAddedTo(text: Swift.String, type: ShareTripSDK.GSMessageType, options: [ShareTripSDK.GSMessageOption]?, inView: UIKit.UIView, inViewController: UIKit.UIViewController?)
  public class func showMessageAddedTo(attributedText: Foundation.NSAttributedString, type: ShareTripSDK.GSMessageType, options: [ShareTripSDK.GSMessageOption]?, inView: UIKit.UIView, inViewController: UIKit.UIViewController?)
  public func show()
  public func hide(animated: Swift.Bool)
  weak public var inView: UIKit.UIView! {
    get
  }
  weak public var inViewController: UIKit.UIViewController? {
    get
  }
  public var containerView: UIKit.UIView {
    get
  }
  public var messageView: UIKit.UIView {
    get
  }
  public var messageText: UIKit.UILabel {
    get
  }
  public var accessibilityIdentifier: Swift.String? {
    get
  }
  public var animations: [ShareTripSDK.GSMessageAnimation] {
    get
  }
  public var animationDuration: Swift.Double {
    get
  }
  public var autoHide: Swift.Bool {
    get
  }
  public var autoHideDelay: Swift.Double {
    get
  }
  public var cornerRadius: CoreFoundation.CGFloat {
    get
  }
  public var height: CoreFoundation.CGFloat {
    get
  }
  public var hideOnTap: Swift.Bool {
    get
  }
  public var handleTap: (() -> ())? {
    get
  }
  public var isInsideSafeAreaInsets: Swift.Bool {
    get
  }
  public var margin: UIKit.UIEdgeInsets {
    get
  }
  public var padding: UIKit.UIEdgeInsets {
    get
  }
  public var position: ShareTripSDK.GSMessagePosition {
    get
  }
  public var textAlignment: ShareTripSDK.GSMessageTextAlignment {
    get
  }
  public var textColor: UIKit.UIColor {
    get
  }
  public var textNumberOfLines: Swift.Int {
    get
  }
  public var messageWidth: CoreFoundation.CGFloat {
    get
  }
  public var messageHeight: CoreFoundation.CGFloat {
    get
  }
  public init(attributedText: Foundation.NSAttributedString, type: ShareTripSDK.GSMessageType, options: [ShareTripSDK.GSMessageOption]?, inView: UIKit.UIView, inViewController: UIKit.UIViewController?)
  @objc deinit
}
extension ShareTripSDK.GSMessage {
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
public struct PopupGradientViewData {
  public let title: Swift.String
  public let subtitle: Swift.String
  public let subtitleTwo: Foundation.NSAttributedString?
  public let buttonTitle: Swift.String
  public let imageName: Swift.String
  public init(title: Swift.String, subtitle: Swift.String, subtitleTwo: Foundation.NSAttributedString?, buttonTitle: Swift.String, imageName: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PopupGradientView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var callbackClosure: ((Swift.Bool) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var containerGradientView: ShareTripSDK.GradientView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var imageView: UIKit.UIImageView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var closeButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var titleLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var subtitleLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var subtitleTwoLabel: UIKit.UILabel {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var homeButton: UIKit.UIButton {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, viewData: ShareTripSDK.PopupGradientViewData, callbackClosure: ((Swift.Bool) -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
public struct PageIndicatorPosition {
  public enum Horizontal {
    case left(padding: CoreFoundation.CGFloat), center, right(padding: CoreFoundation.CGFloat)
  }
  public enum Vertical {
    case top, bottom, under, customTop(padding: CoreFoundation.CGFloat), customBottom(padding: CoreFoundation.CGFloat), customUnder(padding: CoreFoundation.CGFloat)
  }
  public init(horizontal: ShareTripSDK.PageIndicatorPosition.Horizontal = .center, vertical: ShareTripSDK.PageIndicatorPosition.Vertical = .bottom)
}
public struct FilterPriceRange {
  public let low: Swift.Int
  public let high: Swift.Int
  public var currentLow: Swift.Int?
  public var currentHigh: Swift.Int?
  public var hasFilter: Swift.Bool {
    get
  }
  public init(low: Swift.Int, high: Swift.Int, currentLow: Swift.Int? = nil, currentHigh: Swift.Int? = nil)
}
public protocol TableViewViewModel {
  var numberOfSection: Swift.Int { get }
  func numberOfRows(in section: Swift.Int) -> Swift.Int
  func didSelectRow(at indexPath: Foundation.IndexPath)
  func dataForRow(at indexPath: Foundation.IndexPath) -> ShareTripSDK.ConfigurableTableViewCellData?
}
extension ShareTripSDK.TableViewViewModel {
  public func didSelectRow(at indexPath: Foundation.IndexPath)
}
public protocol MainEntryVCDelegate : AnyObject {
  func loginSuccessful()
  func loginUnsuccessful()
}
public struct SDDateSelectionCellViewModel : ShareTripSDK.ConfigurableTableViewCellData {
  public var title: Swift.String
  public var text: Swift.String
  public var placeholder: Swift.String
  public var imageString: Swift.String
  public var datePickerMode: UIKit.UIDatePicker.Mode
  public var selectedDate: Foundation.Date?
  public var minDate: Foundation.Date?
  public var maxDate: Foundation.Date?
  public var state: ShareTripSDK.ValidationState
  public init(title: Swift.String, text: Swift.String, placeholder: Swift.String, imageString: Swift.String, datePickerMode: UIKit.UIDatePicker.Mode = .date, selectedDate: Foundation.Date? = nil, minDate: Foundation.Date? = nil, maxDate: Foundation.Date? = nil, state: ShareTripSDK.ValidationState = .normal)
}
@_hasMissingDesignatedInitializers public class TravelAdviceViewModel {
  public var isLoading: ShareTripSDK.Observable<Swift.Bool> {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class CustomHeaderView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public let customLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public func config(title: Swift.String, textFont: UIKit.UIFont, textColor: UIKit.UIColor)
  @objc deinit
}
public enum SearchDestinationCellInfo : Swift.Int {
  case destination
  case searchButton
  case advice
  public var title: Swift.String {
    get
  }
  public var placeholder: Swift.String {
    get
  }
  public var imageName: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SearchDestinationResultCellInfo : Swift.Int {
  case travelAdvisory
  case destination
  case searchButton
  case permissionInfo
  case destinationDetails
  public var title: Swift.String {
    get
  }
  public var placeholder: Swift.String {
    get
  }
  public var imageName: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class SingleInputTakenCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func configure(indexPath: Foundation.IndexPath, singleInputData: ShareTripSDK.SingleInputTitleData, callbackClosure: ((_ cellIndexPath: Foundation.IndexPath, _ textString: Swift.String) -> Swift.Void)?)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct Covid19TestOptionResponse : Swift.Codable {
  public let name: Swift.String?, code: Swift.String?, logo: Swift.String?
  public let selfTest: Swift.Bool?
  public var options: [ShareTripSDK.CovidTestOptions]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct CovidTestOptions : Swift.Codable {
  public let name: Swift.String?, code: Swift.String?
  public let price: Swift.Double?, discountPrice: Swift.Double?
  public let isAddress: Swift.Bool?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct BaggageResponse : Swift.Codable {
  public let isPerPerson: Swift.Bool?, isLuggageOptional: Swift.Bool?, wholeFlight: Swift.Bool?
  public var wholeFlightOptions: [ShareTripSDK.BaggageWholeFlightOptions]?
  public var routeOptions: [ShareTripSDK.BaggageRouteOption]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct BaggageRouteOption : Swift.Codable {
  public let origin: Swift.String?, destination: Swift.String?
  public var options: [ShareTripSDK.BaggageWholeFlightOptions]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct BaggageWholeFlightOptions : Swift.Codable, Swift.Hashable {
  public var travellerType: ShareTripSDK.BaggageTravellerType?
  public var code: Swift.String?
  public let quantity: Swift.Int?
  public let details: Swift.String?
  public let amount: Swift.Double?
  public let currency: ShareTripSDK.Currency
  public init(travellerType: ShareTripSDK.BaggageTravellerType? = nil, code: Swift.String? = nil, quantity: Swift.Int?, details: Swift.String?, amount: Swift.Double?, currency: ShareTripSDK.Currency)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ShareTripSDK.BaggageWholeFlightOptions, b: ShareTripSDK.BaggageWholeFlightOptions) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public enum BaggageTravellerType : Swift.String, Swift.Codable {
  case adt
  case chd
  case inf
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) public func registerCell<T>(_ cellClass: T.Type) where T : UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) public func registerConfigurableCellDataContainer<T>(_ cellClass: T.Type) where T : UIKit.UITableViewCell, T : ShareTripSDK.ConfigurableTableViewCellDataContainer
  @_Concurrency.MainActor(unsafe) public func registerNibConfigurableCellDataContainer<T>(_ cellClass: T.Type, nibName: Swift.String = T.reuseID) where T : UIKit.UITableViewCell, T : ShareTripSDK.ConfigurableTableViewCellDataContainer
  @_Concurrency.MainActor(unsafe) public func registerNibCell<T>(_ cellClass: T.Type, nibName: Swift.String = T.reuseID) where T : UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) public func registerHeaderFooter<T>(_ viewClass: T.Type) where T : UIKit.UITableViewHeaderFooterView
  @_Concurrency.MainActor(unsafe) public func registerNibHeaderFooter<T>(_ viewClass: T.Type, nibName: Swift.String = T.reuseID) where T : UIKit.UITableViewHeaderFooterView
  @_Concurrency.MainActor(unsafe) public func dequeueReusableCell<T>(forIndexPath indexPath: Foundation.IndexPath) -> T where T : UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) public func dequeueReusableHeaderFooterView<T>() -> T where T : UIKit.UITableViewHeaderFooterView
}
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) public var dataHasChanged: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public func reloadData(completion: @escaping () -> ())
  @_Concurrency.MainActor(unsafe) public func reloadRowsSafely(at indexPaths: [Foundation.IndexPath], with animation: UIKit.UITableView.RowAnimation)
  @_Concurrency.MainActor(unsafe) public func reloadRowsInSection(section: Swift.Int, oldCount: Swift.Int, newCount: Swift.Int, visibleRowsOnly: Swift.Bool = false)
}
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) public func setEmptyMessage(_ message: Swift.String)
  @_Concurrency.MainActor(unsafe) public func setEmptyMessageView(_ messageView: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public func restore()
  @_Concurrency.MainActor(unsafe) public func removeTopSpace()
  @_Concurrency.MainActor(unsafe) public func removeBottomSpace()
  @_Concurrency.MainActor(unsafe) public func addTopBackgroundView(viewColor: UIKit.UIColor)
}
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) public func startActivityIndicator()
  @_Concurrency.MainActor(unsafe) public func stopActivityIndicator()
}
extension UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public func hideSeparator()
  @_Concurrency.MainActor(unsafe) public func showSeparator()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class RightArrowTitleCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setHighlighted(_ highlighted: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func configure(title: Swift.String, checked: Swift.Bool)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum PaymentConfirmationType : Swift.String, Swift.Codable {
  case success
  case failed
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct PaymentConfirmationData {
  public let confirmationType: ShareTripSDK.PaymentConfirmationType
  public let serviceType: ShareTripSDK.ServiceType
  public let notifierSchedules: [Foundation.DateComponents]
  public let earnTripCoin: Swift.Int
  public let redeemTripCoin: Swift.Int
  public let shareTripCoin: Swift.Int
  public init(confirmationType: ShareTripSDK.PaymentConfirmationType, serviceType: ShareTripSDK.ServiceType, notifierSchedules: [Foundation.DateComponents], earnTripCoin: Swift.Int, redeemTripCoin: Swift.Int, shareTripCoin: Swift.Int)
}
public protocol RangeSeekSliderDelegate : AnyObject {
  func rangeSeekSlider(_ slider: ShareTripSDK.RangeSeekSlider, didChange minValue: CoreFoundation.CGFloat, maxValue: CoreFoundation.CGFloat)
  func didStartTouches(in slider: ShareTripSDK.RangeSeekSlider)
  func didEndTouches(in slider: ShareTripSDK.RangeSeekSlider)
  func rangeSeekSlider(_ slider: ShareTripSDK.RangeSeekSlider, stringForMinValue minValue: CoreFoundation.CGFloat) -> Swift.String?
  func rangeSeekSlider(_ slider: ShareTripSDK.RangeSeekSlider, stringForMaxValue: CoreFoundation.CGFloat) -> Swift.String?
}
extension ShareTripSDK.RangeSeekSliderDelegate {
  public func rangeSeekSlider(_ slider: ShareTripSDK.RangeSeekSlider, didChange minValue: CoreFoundation.CGFloat, maxValue: CoreFoundation.CGFloat)
  public func didStartTouches(in slider: ShareTripSDK.RangeSeekSlider)
  public func didEndTouches(in slider: ShareTripSDK.RangeSeekSlider)
  public func rangeSeekSlider(_ slider: ShareTripSDK.RangeSeekSlider, stringForMinValue minValue: CoreFoundation.CGFloat) -> Swift.String?
  public func rangeSeekSlider(_ slider: ShareTripSDK.RangeSeekSlider, stringForMaxValue maxValue: CoreFoundation.CGFloat) -> Swift.String?
}
public enum UserInfoRowType : Swift.CaseIterable {
  case profileImage
  case nameInputGuideline
  case quickPick
  case givenName
  case surName
  case gender
  case dob
  case age
  case nationality
  case mobile
  case email
  case passportNumber
  case passportExpiryDate
  case frequentFlyerNumber
  case upload
  case warning
  case address
  case postCode
  case mealPreference
  case wheelChairRequest
  case covid19TestInfo
  case travelInsuranceService
  case addUpdateUserToQuickPick
  public var title: Swift.String {
    get
  }
  public var placeholder: Swift.String {
    get
  }
  public var imageString: Swift.String {
    get
  }
  public var keyboardType: UIKit.UIKeyboardType {
    get
  }
  public var textContentType: UIKit.UITextContentType? {
    get
  }
  public static func == (a: ShareTripSDK.UserInfoRowType, b: ShareTripSDK.UserInfoRowType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [ShareTripSDK.UserInfoRowType]
  public static var allCases: [ShareTripSDK.UserInfoRowType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension ShareTripSDK.StarFillMode : Swift.Equatable {}
extension ShareTripSDK.StarFillMode : Swift.Hashable {}
extension ShareTripSDK.StarFillMode : Swift.RawRepresentable {}
extension ShareTripSDK.TapticEngine.Impact.ImpactStyle : Swift.Equatable {}
extension ShareTripSDK.TapticEngine.Impact.ImpactStyle : Swift.Hashable {}
extension ShareTripSDK.TapticEngine.Notification.NotificationType : Swift.Equatable {}
extension ShareTripSDK.TapticEngine.Notification.NotificationType : Swift.Hashable {}
extension ShareTripSDK.Covid19TestOptionsRowType : Swift.Equatable {}
extension ShareTripSDK.Covid19TestOptionsRowType : Swift.Hashable {}
extension ShareTripSDK.BookingButtonType : Swift.Equatable {}
extension ShareTripSDK.BookingButtonType : Swift.Hashable {}
extension ShareTripSDK.GenderType : Swift.Equatable {}
extension ShareTripSDK.GenderType : Swift.Hashable {}
extension ShareTripSDK.GenderType : Swift.RawRepresentable {}
extension ShareTripSDK.BaggageType : Swift.Equatable {}
extension ShareTripSDK.BaggageType : Swift.Hashable {}
extension ShareTripSDK.PaymentGateway.CodingKeys : Swift.Equatable {}
extension ShareTripSDK.PaymentGateway.CodingKeys : Swift.Hashable {}
extension ShareTripSDK.PaymentGateway.CodingKeys : Swift.RawRepresentable {}
extension ShareTripSDK.PaymentGatewayType : Swift.Equatable {}
extension ShareTripSDK.PaymentGatewayType : Swift.Hashable {}
extension ShareTripSDK.PaymentGatewayType : Swift.RawRepresentable {}
extension ShareTripSDK.PaymentGatewayCurrency : Swift.Equatable {}
extension ShareTripSDK.PaymentGatewayCurrency : Swift.Hashable {}
extension ShareTripSDK.PaymentGatewayCurrency : Swift.RawRepresentable {}
extension ShareTripSDK.FlightFilterType : Swift.Equatable {}
extension ShareTripSDK.FlightFilterType : Swift.Hashable {}
extension ShareTripSDK.FlightFilterType : Swift.RawRepresentable {}
extension ShareTripSDK.FlightSearchFilter.CodingKeys : Swift.Equatable {}
extension ShareTripSDK.FlightSearchFilter.CodingKeys : Swift.Hashable {}
extension ShareTripSDK.FlightSearchFilter.CodingKeys : Swift.RawRepresentable {}
extension ShareTripSDK.UseCouponViewModel.CouponViewMode : Swift.Equatable {}
extension ShareTripSDK.UseCouponViewModel.CouponViewMode : Swift.Hashable {}
extension ShareTripSDK.SDKConsumers : Swift.Equatable {}
extension ShareTripSDK.SDKConsumers : Swift.Hashable {}
extension ShareTripSDK.WebSourceType : Swift.Equatable {}
extension ShareTripSDK.WebSourceType : Swift.Hashable {}
extension ShareTripSDK.PaymentConfirmationEvents : Swift.Equatable {}
extension ShareTripSDK.PaymentConfirmationEvents : Swift.Hashable {}
extension ShareTripSDK.FlightDealType : Swift.Equatable {}
extension ShareTripSDK.FlightDealType : Swift.Hashable {}
extension ShareTripSDK.FlightDealType : Swift.RawRepresentable {}
extension ShareTripSDK.FlightRouteType : Swift.Equatable {}
extension ShareTripSDK.FlightRouteType : Swift.Hashable {}
extension ShareTripSDK.FlightRouteType : Swift.RawRepresentable {}
extension ShareTripSDK.SliderCellType : Swift.Equatable {}
extension ShareTripSDK.SliderCellType : Swift.Hashable {}
extension ShareTripSDK.Currency : Swift.Equatable {}
extension ShareTripSDK.Currency : Swift.Hashable {}
extension ShareTripSDK.Currency : Swift.RawRepresentable {}
extension ShareTripSDK.DurationType : Swift.Equatable {}
extension ShareTripSDK.DurationType : Swift.Hashable {}
extension ShareTripSDK.DurationType : Swift.RawRepresentable {}
extension ShareTripSDK.Featured : Swift.Equatable {}
extension ShareTripSDK.Featured : Swift.Hashable {}
extension ShareTripSDK.Featured : Swift.RawRepresentable {}
extension ShareTripSDK.Language : Swift.Equatable {}
extension ShareTripSDK.Language : Swift.Hashable {}
extension ShareTripSDK.Language : Swift.RawRepresentable {}
extension ShareTripSDK.Status : Swift.Equatable {}
extension ShareTripSDK.Status : Swift.Hashable {}
extension ShareTripSDK.Status : Swift.RawRepresentable {}
extension ShareTripSDK.TransportType : Swift.Equatable {}
extension ShareTripSDK.TransportType : Swift.Hashable {}
extension ShareTripSDK.DiscountOptionType : Swift.Equatable {}
extension ShareTripSDK.DiscountOptionType : Swift.Hashable {}
extension ShareTripSDK.DiscountOptionType : Swift.RawRepresentable {}
extension ShareTripSDK.FlightFareCellType : Swift.Equatable {}
extension ShareTripSDK.FlightFareCellType : Swift.Hashable {}
extension ShareTripSDK.TravellerType : Swift.Equatable {}
extension ShareTripSDK.TravellerType : Swift.Hashable {}
extension ShareTripSDK.TravellerType : Swift.RawRepresentable {}
extension ShareTripSDK.ClassType : Swift.Equatable {}
extension ShareTripSDK.ClassType : Swift.Hashable {}
extension ShareTripSDK.ClassType : Swift.RawRepresentable {}
extension ShareTripSDK.TripType : Swift.Equatable {}
extension ShareTripSDK.TripType : Swift.Hashable {}
extension ShareTripSDK.TripType : Swift.RawRepresentable {}
extension ShareTripSDK.AccountCellInfo : Swift.Equatable {}
extension ShareTripSDK.AccountCellInfo : Swift.Hashable {}
extension ShareTripSDK.STUserAccount.UserStatus : Swift.Equatable {}
extension ShareTripSDK.STUserAccount.UserStatus : Swift.Hashable {}
extension ShareTripSDK.STUserAccount.UserStatus : Swift.RawRepresentable {}
extension UIKit.UIImage.JPEGQuality : Swift.Equatable {}
extension UIKit.UIImage.JPEGQuality : Swift.Hashable {}
extension UIKit.UIImage.JPEGQuality : Swift.RawRepresentable {}
extension ShareTripSDK.TitleType : Swift.Equatable {}
extension ShareTripSDK.TitleType : Swift.Hashable {}
extension ShareTripSDK.TitleType : Swift.RawRepresentable {}
extension ShareTripSDK.BookingHistoryOption : Swift.Equatable {}
extension ShareTripSDK.BookingHistoryOption : Swift.Hashable {}
extension ShareTripSDK.BookingHistoryOption : Swift.RawRepresentable {}
@available(*, unavailable, renamed: "Connection")
extension ShareTripSDK.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension ShareTripSDK.Reachability.NetworkStatus : Swift.Hashable {}
extension ShareTripSDK.Reachability.Connection : Swift.Equatable {}
extension ShareTripSDK.Reachability.Connection : Swift.Hashable {}
extension ShareTripSDK.FlightSearchCellOption : Swift.Equatable {}
extension ShareTripSDK.FlightSearchCellOption : Swift.Hashable {}
extension ShareTripSDK.FlightScheduledType : Swift.Equatable {}
extension ShareTripSDK.FlightScheduledType : Swift.Hashable {}
extension ShareTripSDK.FlightScheduledType : Swift.RawRepresentable {}
extension ShareTripSDK.LoginType : Swift.Equatable {}
extension ShareTripSDK.LoginType : Swift.Hashable {}
extension ShareTripSDK.STLog.LogEvent : Swift.Equatable {}
extension ShareTripSDK.STLog.LogEvent : Swift.Hashable {}
extension ShareTripSDK.STLog.LogEvent : Swift.RawRepresentable {}
extension ShareTripSDK.IndicatorType : Swift.Equatable {}
extension ShareTripSDK.IndicatorType : Swift.Hashable {}
extension ShareTripSDK.TravelInsuranceOptionsRowType : Swift.Equatable {}
extension ShareTripSDK.TravelInsuranceOptionsRowType : Swift.Hashable {}
extension ShareTripSDK.ServiceType : Swift.Equatable {}
extension ShareTripSDK.ServiceType : Swift.Hashable {}
extension ShareTripSDK.ServiceType : Swift.RawRepresentable {}
extension ShareTripSDK.Period.Departs : Swift.Equatable {}
extension ShareTripSDK.Period.Departs : Swift.Hashable {}
extension ShareTripSDK.Period.Departs : Swift.RawRepresentable {}
extension ShareTripSDK.FileType : Swift.Equatable {}
extension ShareTripSDK.FileType : Swift.Hashable {}
extension ShareTripSDK.DateSelectionMode : Swift.Equatable {}
extension ShareTripSDK.DateSelectionMode : Swift.Hashable {}
extension ShareTripSDK.FlightDetailSectionType : Swift.Equatable {}
extension ShareTripSDK.FlightDetailSectionType : Swift.Hashable {}
extension ShareTripSDK.FlightDetailSectionType : Swift.RawRepresentable {}
extension ShareTripSDK.FlightDetailInfoType : Swift.Equatable {}
extension ShareTripSDK.FlightDetailInfoType : Swift.Hashable {}
extension ShareTripSDK.FlightDetailInfoType : Swift.RawRepresentable {}
extension ShareTripSDK.RelativeTimeStringType : Swift.Equatable {}
extension ShareTripSDK.RelativeTimeStringType : Swift.Hashable {}
extension ShareTripSDK.DateComponentType : Swift.Equatable {}
extension ShareTripSDK.DateComponentType : Swift.Hashable {}
extension ShareTripSDK.DateStyleType : Swift.Equatable {}
extension ShareTripSDK.DateStyleType : Swift.Hashable {}
extension Foundation.UserDefaults.Key : Swift.Equatable {}
extension Foundation.UserDefaults.Key : Swift.Hashable {}
extension Foundation.UserDefaults.Key : Swift.RawRepresentable {}
extension ShareTripSDK.PriceRangeType : Swift.Equatable {}
extension ShareTripSDK.PriceRangeType : Swift.Hashable {}
extension ShareTripSDK.DiscountType : Swift.Equatable {}
extension ShareTripSDK.DiscountType : Swift.Hashable {}
extension ShareTripSDK.DiscountType : Swift.RawRepresentable {}
extension ShareTripSDK.BaggageHistoryInfoType : Swift.Equatable {}
extension ShareTripSDK.BaggageHistoryInfoType : Swift.Hashable {}
extension ShareTripSDK.FlightClass : Swift.Equatable {}
extension ShareTripSDK.FlightClass : Swift.Hashable {}
extension ShareTripSDK.FlightClass : Swift.RawRepresentable {}
extension ShareTripSDK.FlightSortingOptions : Swift.Equatable {}
extension ShareTripSDK.FlightSortingOptions : Swift.Hashable {}
extension ShareTripSDK.FlightSortingOptions : Swift.RawRepresentable {}
extension ShareTripSDK.FlightBookingStatus : Swift.Equatable {}
extension ShareTripSDK.FlightBookingStatus : Swift.Hashable {}
extension ShareTripSDK.FlightBookingStatus : Swift.RawRepresentable {}
extension ShareTripSDK.PaymentStatus : Swift.Equatable {}
extension ShareTripSDK.PaymentStatus : Swift.Hashable {}
extension ShareTripSDK.PaymentStatus : Swift.RawRepresentable {}
extension ShareTripSDK.GSMessageType : Swift.Equatable {}
extension ShareTripSDK.GSMessageType : Swift.Hashable {}
extension ShareTripSDK.GSMessagePosition : Swift.Equatable {}
extension ShareTripSDK.GSMessagePosition : Swift.Hashable {}
extension ShareTripSDK.GSMessageTextAlignment : Swift.Equatable {}
extension ShareTripSDK.GSMessageTextAlignment : Swift.Hashable {}
extension ShareTripSDK.SearchDestinationCellInfo : Swift.Equatable {}
extension ShareTripSDK.SearchDestinationCellInfo : Swift.Hashable {}
extension ShareTripSDK.SearchDestinationCellInfo : Swift.RawRepresentable {}
extension ShareTripSDK.SearchDestinationResultCellInfo : Swift.Equatable {}
extension ShareTripSDK.SearchDestinationResultCellInfo : Swift.Hashable {}
extension ShareTripSDK.SearchDestinationResultCellInfo : Swift.RawRepresentable {}
extension ShareTripSDK.BaggageTravellerType : Swift.Equatable {}
extension ShareTripSDK.BaggageTravellerType : Swift.Hashable {}
extension ShareTripSDK.BaggageTravellerType : Swift.RawRepresentable {}
extension ShareTripSDK.PaymentConfirmationType : Swift.Equatable {}
extension ShareTripSDK.PaymentConfirmationType : Swift.Hashable {}
extension ShareTripSDK.PaymentConfirmationType : Swift.RawRepresentable {}
extension ShareTripSDK.UserInfoRowType : Swift.Equatable {}
extension ShareTripSDK.UserInfoRowType : Swift.Hashable {}
